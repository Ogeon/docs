var searchIndex = {};
searchIndex["js_builder"] = {"doc":"A JavaScript AST builder and pretty printing library.","items":[[0,"ast","js_builder","Abstract syntax tree components.",null,null],[3,"Expressions","js_builder::ast","A chain of comma separated expressions.",null,null],[12,"exprs","","The comma separated expressions.",0,null],[3,"StringLiteral","","A string literal.",null,null],[12,"double_quote","","Use double quotes (`&quot;`).",1,null],[12,"string","","The string.",1,null],[3,"RegularExpression","","A regular expression literal.",null,null],[12,"body","","The expression body (the part between `/.../`).",2,null],[12,"global","","The `g` flag.",2,null],[12,"ignore_case","","The `i` flag.",2,null],[12,"multiline","","The `m` flag.",2,null],[12,"unicode","","The `u` flag.",2,null],[12,"sticky","","The `y` flag.",2,null],[3,"PathExpression","","A member access path expression.",null,null],[12,"base","","The fist part of the path.",3,null],[12,"access","","The following member access path.",3,null],[3,"CallExpression","","A function call expression.",null,null],[12,"base","","The path leading up to the function.",4,null],[12,"arguments","","The function call arguments.",4,null],[12,"access","","The following member access path.",4,null],[3,"VarDecl","","A variable declaration.",null,null],[12,"ident","","The variable name.",5,null],[12,"init","","An optional initialization expression.",5,null],[3,"Catch","","A catch statement.",null,null],[12,"exception","","The exception variable.",6,null],[12,"block","","What to do when the exception is caught.",6,null],[3,"Block","","A block of statements, surrounded with `{ ... }`.",null,null],[12,"statements","","The statements inside the block.",7,null],[3,"FunctionBody","","The body of a function.",null,null],[12,"elements","","The statements and functions that makes up function body.",8,null],[4,"NumericLiteral","","A number.",null,null],[13,"Decimal","","A regular decimal number literal.",9,null],[13,"HexIntger","","A hexadecimal number literal.",9,null],[4,"PrimaryExpression","","A basic expression, such as a literal.",null,null],[13,"This","","The `this` keyword.",10,null],[13,"Identifier","","An identifier.",10,null],[13,"Null","","A `null` value.",10,null],[13,"Bool","","A Boolean literal.",10,null],[13,"Numeric","","A number literal.",10,null],[13,"String","","A string literal.",10,null],[13,"RegularExpression","","A regular expression literal.",10,null],[13,"Array","","An array literal.",10,null],[13,"Object","","An object literal.",10,null],[13,"Parenthesis","","An expression in parenthesis.",10,null],[4,"PropertyAssignment","","Object field (property) assignment.",null,null],[13,"Assignment","","A regular assignment.",11,null],[13,"Getter","","A property getter.",11,null],[13,"Setter","","A property setter.",11,null],[4,"PropertyName","","An object field (property) name.",null,null],[13,"Identifier","","An identifier.",12,null],[13,"StringLiteral","","A string.",12,null],[13,"NumericLiteral","","A number.",12,null],[4,"Expression","","A general expression.",null,null],[13,"Lhs","","A left hand side expression.",13,null],[13,"Unary","","Apply a unary operator.",13,null],[13,"Binary","","Apply a binary operator.",13,null],[13,"Conditional","","`...? ...: ...`.",13,null],[13,"Assignment","","Assign a value to something.",13,null],[4,"UnaryOp","","Unary operator.",null,null],[13,"PostIncr","","Postfix increment.",14,null],[13,"PostDecr","","Postfix decrement.",14,null],[13,"Delete","","`delete ...`.",14,null],[13,"Void","","`void ...`.",14,null],[13,"Typeof","","`typeof ...`.",14,null],[13,"PreIncr","","Prefix increment.",14,null],[13,"PreDecr","","Prefix decrement.",14,null],[13,"Plus","","`+...`.",14,null],[13,"Minus","","Negation.",14,null],[13,"BitwiseNot","","Bitwise `not`.",14,null],[13,"LogicalNot","","Logical `not`.",14,null],[4,"BinaryOp","","Binary operator.",null,null],[13,"Mul","","Multiplication.",15,null],[13,"Div","","Division.",15,null],[13,"Mod","","Modulo (remainder).",15,null],[13,"Add","","Addition.",15,null],[13,"Sub","","Subtraction.",15,null],[13,"Lsh","","Left shift.",15,null],[13,"Rsh","","Right shift.",15,null],[13,"Ursh","","Unsigned right shift.",15,null],[13,"Lt","","Less than.",15,null],[13,"Gt","","Greater than.",15,null],[13,"Leq","","Less than or equal.",15,null],[13,"Geq","","Greater than or equal.",15,null],[13,"Instanceof","","`... instanceof ...`.",15,null],[13,"In","","`... in ...`.",15,null],[13,"Eq","","Equal.",15,null],[13,"NotEq","","Not equal.",15,null],[13,"Identical","","Identity.",15,null],[13,"NotIdentical","","Nonidentity.",15,null],[13,"BitwiseAnd","","Bitwise `and`.",15,null],[13,"BitwiseXor","","Bitwise `xor`.",15,null],[13,"BitwiseOr","","Bitwise `or`.",15,null],[13,"LogicalAnd","","Logical `and`.",15,null],[13,"LogicalOr","","Logical `or`.",15,null],[4,"AssignmentOp","","An assignment operator.",null,null],[13,"MulAssign","","Multiplication assignment.",16,null],[13,"DivAssign","","Division assignment.",16,null],[13,"ModAssign","","Modulo (remainder) assignment.",16,null],[13,"AddAssign","","Addition assignment.",16,null],[13,"SubAssign","","Subtraction assignment.",16,null],[13,"LshAssign","","Left shift assignment.",16,null],[13,"RshAssign","","Right shift assignment.",16,null],[13,"UrshAssign","","Unsigned right shift assignment.",16,null],[13,"AndAssign","","Bitwise `and` assignment.",16,null],[13,"XorAssign","","Bitwise `xor` assignment.",16,null],[13,"OrAssign","","Bitwise `or` assignment.",16,null],[4,"LhsExpression","","A left hand side expression.",null,null],[13,"Value","","A value expression.",17,null],[13,"Call","","A function call.",17,null],[4,"ValueExpression","","An expression that fetches a value.",null,null],[13,"Path","","A path expression.",18,null],[13,"New","","A constructor call without an argument list.",18,null],[4,"PathBase","","The first part of a path expression.",null,null],[13,"Primary","","A primary expression.",19,null],[13,"Function","","A function expression.",19,null],[13,"New","","A constructor call.",19,null],[4,"CallBase","","The base path of a function call.",null,null],[13,"Path","","A path expression.",20,null],[13,"Call","","Another function call.",20,null],[4,"Access","","A path access notation.",null,null],[13,"Dot","","Dot notation (`x.y`).",21,null],[13,"Bracket","","Bracket notation (`x[y]`).",21,null],[4,"Statement","","A statement.",null,null],[13,"Block","","Code block.",22,null],[13,"Variable","","Variable declaration.",22,null],[13,"Empty","","An empty statement (just a `;`).",22,null],[13,"Expression","","An expression.",22,null],[13,"If","","An `if` statement.",22,null],[13,"Do","","A `do ... while(...)` statement.",22,null],[13,"While","","A `while(...) ...` statement.",22,null],[13,"For","","A `for(...; ...; ...) ...` statement.",22,null],[13,"ForVar","","A `for(var ...; ...; ...) ...` statement.",22,null],[13,"ForIn","","A `for(... in ...) ...` statement.",22,null],[13,"ForInVar","","A `for(var ... in ...) ...` statement.",22,null],[13,"Continue","","A `continue;` statement.",22,null],[13,"Break","","A `break ...;` statement.",22,null],[13,"Return","","A `return ...;` statement.",22,null],[13,"With","","A `with(...) ...` statement.",22,null],[13,"Labeled","","A labeled statement.",22,null],[13,"Switch","","A `switch(...) { ... }` statement.",22,null],[13,"Throw","","A `throw ...;` statement.",22,null],[13,"Try","","A try-catch-finally statement.",22,null],[13,"Debugger","","A `debugger;` statement.",22,null],[4,"CaseClause","","A clause in a `switch` statement.",null,null],[13,"Case","","A regular `case x: ...` clause.",23,null],[13,"Default","","A `default: ...` clause.",23,null],[4,"SourceElement","","Source elements makes up scripts and function bodies.",null,null],[13,"Statement","","A statement.",24,null],[13,"Function","","A function.",24,null],[6,"Identifier","","An identifier.",null,null],[11,"print_with","","",0,{"inputs":[{"name":"expressions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"expressions"}}],[11,"from","","",1,{"inputs":[{"name":"s"}],"output":{"name":"stringliteral"}}],[11,"print_with","","",1,{"inputs":[{"name":"stringliteral"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",9,{"inputs":[{"name":"numericliteral"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"s"}],"output":{"name":"regularexpression"}}],[11,"print_with","","",2,{"inputs":[{"name":"regularexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",10,{"inputs":[{"name":"primaryexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",11,{"inputs":[{"name":"propertyassignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",12,{"inputs":[{"name":"propertyname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new expression.",13,{"inputs":[],"output":{"name":"expressionbuilder"}}],[11,"print_with","","",13,{"inputs":[{"name":"expression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"unaryop"}],"output":{"name":"unaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"unaryop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"binaryop"}],"output":{"name":"binaryop"}}],[11,"fmt","","",15,{"inputs":[{"name":"binaryop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"assignmentop"}],"output":{"name":"assignmentop"}}],[11,"fmt","","",16,{"inputs":[{"name":"assignmentop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new left hand side expression.",17,{"inputs":[],"output":{"name":"lhsexprbuilder"}}],[11,"print_with","","",17,{"inputs":[{"name":"lhsexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new value expression.",18,{"inputs":[],"output":{"name":"valueexprbuilder"}}],[11,"print_with","","",18,{"inputs":[{"name":"valueexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new path expression.",3,{"inputs":[],"output":{"name":"pathbasebuilder"}}],[11,"print_with","","",3,{"inputs":[{"name":"pathexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",19,{"inputs":[{"name":"pathbase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",4,{"inputs":[{"name":"callexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",20,{"inputs":[{"name":"callbase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",21,{"inputs":[{"name":"access"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new statement.",22,{"inputs":[],"output":{"name":"statementbuilder"}}],[11,"print_with","","",22,{"inputs":[{"name":"statement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",23,{"inputs":[{"name":"caseclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new code block.",7,{"inputs":[],"output":{"name":"blockbuilder"}}],[11,"print_with","","",7,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new function body.",8,{"inputs":[],"output":{"name":"fnbodybuilder"}}],[11,"print_with","","",8,{"inputs":[{"name":"functionbody"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new source element.",24,{"inputs":[],"output":{"name":"sourceelementbuilder"}}],[11,"print_with","","",24,{"inputs":[{"name":"sourceelement"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"builder","js_builder","Abstract syntax tree builders.",null,null],[3,"Script","js_builder::builder","Script builder.",null,null],[0,"statement","","Statement related builders.",null,null],[3,"BlockBuilder","js_builder::builder::statement","A builder for statement blocks.",null,null],[3,"StatementBuilder","","A builder for statements.",null,null],[3,"VarsBuilder","","A builder for variable declaration statements.",null,null],[3,"IfBuilder","","A builder for `if` statements.",null,null],[3,"SourceElementBuilder","","A builder for source elements, such as statements and functions.",null,null],[0,"adapter","","Adapters for transitioning between builders.",null,null],[3,"InitAdapter","js_builder::builder::statement::adapter","An adapter that holds the name of a variable.",null,null],[3,"IfAdapter","","An adapter for the condition expression in an `if` statement.",null,null],[3,"ThenAdapter","","An adapter for holding the `if` condition while the first branch is built.",null,null],[3,"ForInLhsAdapter","","An adapter for the left hand side of a `for(... in ...)` statement.",null,null],[3,"ForInRhsAdapter","","An adapter for the right hand side of a `for(... in ...)` statement.",null,null],[3,"ForInStmtAdapter","","An adapter for the loop body of `for(... in ...)` loops.",null,null],[3,"ReturnAdapter","","An expression adapter for `return` statements.",null,null],[3,"DoAdapter","","Adapter for receiving the `do ...` statement in a `do ... while(...)` loop.",null,null],[3,"DoWhileAdapter","","Adapter for receiving the `while(...)` condition in a `do ... while(...)` loop.",null,null],[3,"WhileAdapter","","Adapter for receiving the `while(...)` condition in a `while(...) ...` loop.",null,null],[3,"WhileDoAdapter","","Adapter for receiving the loop body in a `while(...) ...` loop.",null,null],[3,"ForInitAdapter","","Adapter for receiving the initiation statement of a `for` loop.",null,null],[3,"ForCondAdapter","","Adapter for receiving the condition expression of a `for` loop.",null,null],[3,"ForIncrAdapter","","Adapter for receiving the incrementation expression of a `for` loop.",null,null],[3,"ForStmtAdapter","","Adapter for receiving the body statement of a `for` loop.",null,null],[11,"from","","Create a variable initializer adapter from a variable name and a\nbuilder.",25,{"inputs":[{"name":"s"},{"name":"varsbuilder"}],"output":{"name":"initadapter"}}],[11,"build_with","","",25,{"inputs":[{"name":"initadapter"},{"name":"expression"}],"output":{"name":"varsbuilder"}}],[11,"from","","",26,{"inputs":[{"name":"n"}],"output":{"name":"ifadapter"}}],[11,"build_with","","",26,{"inputs":[{"name":"ifadapter"},{"name":"expression"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",26,{"inputs":[{"name":"ifadapter"},{"name":"expressions"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",27,{"inputs":[{"name":"thenadapter"},{"name":"statement"}],"output":{"name":"ifbuilder"}}],[11,"from","","",28,{"inputs":[{"name":"n"}],"output":{"name":"forinlhsadapter"}}],[11,"build_with","","",28,{"inputs":[{"name":"forinlhsadapter"},{"name":"lhsexpression"}],"output":{"name":"expressionbuilder"}}],[11,"from","","Create a `for(var ... in ...)` RHS expression adapter from a variable\nname and a builder.",29,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"forinrhsadapter"}}],[11,"build_with","","",29,{"inputs":[{"name":"forinrhsadapter"},{"name":"expression"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",29,{"inputs":[{"name":"forinrhsadapter"},{"name":"expressions"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",30,{"inputs":[{"name":"forinstmtadapter"},{"name":"statement"}],"output":{"name":"next"}}],[11,"from","","",31,{"inputs":[{"name":"n"}],"output":{"name":"returnadapter"}}],[11,"build_with","","",31,{"inputs":[{"name":"returnadapter"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"build_with","","",31,{"inputs":[{"name":"returnadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"from","","",32,{"inputs":[{"name":"n"}],"output":{"name":"doadapter"}}],[11,"build_with","","",32,{"inputs":[{"name":"doadapter"},{"name":"statement"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",33,{"inputs":[{"name":"dowhileadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",33,{"inputs":[{"name":"dowhileadapter"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"from","","",34,{"inputs":[{"name":"n"}],"output":{"name":"whileadapter"}}],[11,"build_with","","",34,{"inputs":[{"name":"whileadapter"},{"name":"expression"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",34,{"inputs":[{"name":"whileadapter"},{"name":"expressions"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",35,{"inputs":[{"name":"whiledoadapter"},{"name":"statement"}],"output":{"name":"next"}}],[11,"from","","",36,{"inputs":[{"name":"n"}],"output":{"name":"forinitadapter"}}],[11,"build_with","","",36,{"inputs":[{"name":"forinitadapter"},{"name":"expression"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",36,{"inputs":[{"name":"forinitadapter"},{"name":"expressions"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",36,{"inputs":[{"name":"forinitadapter"},{"name":"vec"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",37,{"inputs":[{"name":"forcondadapter"},{"name":"expression"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",37,{"inputs":[{"name":"forcondadapter"},{"name":"expressions"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",38,{"inputs":[{"name":"forincradapter"},{"name":"expression"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",38,{"inputs":[{"name":"forincradapter"},{"name":"expressions"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",39,{"inputs":[{"name":"forstmtadapter"},{"name":"statement"}],"output":{"name":"next"}}],[11,"stmt","js_builder::builder::statement","Build a new statement and add it to the block.",40,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"statementbuilder"}}],[11,"add_stmt","","Same as `stmt`, above, but doesn&#39;t move the builder.",40,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"statementbuilder"}}],[11,"with_stmt","","Add a pre-built statement to the block.",40,{"inputs":[{"name":"blockbuilder"},{"name":"statement"}],"output":{"name":"blockbuilder"}}],[11,"build","","Finish building this statement block.",40,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"next"}}],[11,"build_block","","Use a pre-built statement block, instead.",40,{"inputs":[{"name":"blockbuilder"},{"name":"block"}],"output":{"name":"next"}}],[11,"from","","",40,{"inputs":[{"name":"n"}],"output":{"name":"blockbuilder"}}],[11,"build_with","","",40,{"inputs":[{"name":"blockbuilder"},{"name":"statement"}],"output":{"name":"blockbuilder"}}],[11,"block","","Build a statement block statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"blockbuilder"}}],[11,"var","","Build a variable declaration statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"varsbuilder"}}],[11,"empty","","Build an empty statement. It&#39;s just a `;`.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"next"}}],[11,"expr","","Build an expression statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"if_","","Build an `if` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"do_while","","Build a `do ... while(...)` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"statementbuilder"}}],[11,"while_","","Build a `while(...) ...` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"for_","","Build a `for(...; ...; ...) ...` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"for_var","","Build a `for(var ...; ...; ...) ...` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"varsbuilder"}}],[11,"for_in","","Build a `for(... in ...)` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"for_in_var","","Build a `for(var ... in ...)` statement.",41,{"inputs":[{"name":"statementbuilder"},{"name":"s"}],"output":{"name":"expressionbuilder"}}],[11,"return_","","Build a `return` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"return_nothing","","Build an empty `return` statement.",41,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"next"}}],[11,"build_stmt","","Use a pre-built statement, instead.",41,{"inputs":[{"name":"statementbuilder"},{"name":"statement"}],"output":{"name":"next"}}],[11,"from","","",41,{"inputs":[{"name":"n"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",41,{"inputs":[{"name":"statementbuilder"},{"name":"block"}],"output":{"name":"next"}}],[11,"build_with","","",41,{"inputs":[{"name":"statementbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",41,{"inputs":[{"name":"statementbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",41,{"inputs":[{"name":"statementbuilder"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"inited","","Add an initialized variable to the variable declaration statement.",42,{"inputs":[{"name":"varsbuilder"},{"name":"s"}],"output":{"name":"expressionbuilder"}}],[11,"uninited","","Add an uninitialized variable to the variable declaration statement.",42,{"inputs":[{"name":"varsbuilder"},{"name":"s"}],"output":{"name":"varsbuilder"}}],[11,"build","","Finish declaring variables.",42,{"inputs":[{"name":"varsbuilder"}],"output":{"name":"next"}}],[11,"from","","",42,{"inputs":[{"name":"n"}],"output":{"name":"varsbuilder"}}],[11,"else_","","Add an `else` branch.",43,{"inputs":[{"name":"ifbuilder"}],"output":{"name":"statementbuilder"}}],[11,"else_if","","Add an `else if` branch.",43,{"inputs":[{"name":"ifbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"build","","Build the `if` statement without an `else` branch.",43,{"inputs":[{"name":"ifbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",43,{"inputs":[{"name":"ifbuilder"},{"name":"statement"}],"output":{"name":"next"}}],[11,"stmt","","Build a statement.",44,{"inputs":[{"name":"sourceelementbuilder"}],"output":{"name":"statementbuilder"}}],[11,"function","","Build a function.",44,{"inputs":[{"name":"sourceelementbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"from","","",44,{"inputs":[{"name":"n"}],"output":{"name":"sourceelementbuilder"}}],[11,"build_with","","",44,{"inputs":[{"name":"sourceelementbuilder"},{"name":"statement"}],"output":{"name":"next"}}],[0,"expression","js_builder::builder","Expression related builders.",null,null],[3,"ExpressionBuilder","js_builder::builder::expression","A builder for expressions.",null,null],[3,"PathBuilder","","A builder for path expressions.",null,null],[3,"PathBaseBuilder","","A builder for the first part of a path.",null,null],[3,"ExpressionsBuilder","","A builder for comma separated expression chains.",null,null],[3,"ArrayBuilder","","A builder for array literals.",null,null],[3,"ObjectBuilder","","A builder for object literals.",null,null],[3,"PropNameBuilder","","A builder for object field (property) names.",null,null],[3,"ValueExprBuilder","","A builder for value expressions.",null,null],[3,"LhsExprBuilder","","A builder for left hand side expressions.",null,null],[3,"BinaryExprBuilder","","A builder for binary operator chains.",null,null],[0,"adapter","","Adapters for transitioning between builders.",null,null],[3,"PropAssignAdapter","js_builder::builder::expression::adapter","An adapter that receives the name of an object field (property).",null,null],[3,"PropInitAdapter","","An adapter that holds the name of an object field (property).",null,null],[3,"GetterAdapter","","An adapter that receives the name of an object field getter.",null,null],[3,"GetterBodyAdapter","","An adapter that holds the name of an object field getter.",null,null],[3,"SetterAdapter","","An adapter that holds the argument, and receives the name of an object field setter.",null,null],[3,"SetterBodyAdapter","","An adapter that holds the argument and the name of an object field setter.",null,null],[3,"CallAdapter","","An adapter for function call expressions.",null,null],[3,"AssignAdapter","","An adapter that holds the assignment expression type.",null,null],[3,"AssignRhsAdapter","","An adapter that holds the type and left hand side of an assignment expression.",null,null],[3,"BinaryLhsAdapter","","An adapter that holds the type of a binary operator.",null,null],[3,"UnaryAdapter","","An adapter that holds the type of a unary operator.",null,null],[3,"FnAccessAdapter","","An adapter that receives the path to a function.",null,null],[3,"FnExprDecl","","The parts of a function expression.",null,null],[12,"name","","The function name.",45,null],[12,"args","","The function argument names.",45,null],[12,"body","","The function body.",45,null],[3,"FnExprAdapter","","An adapter that holds parts of a function expression.",null,null],[11,"from","","",46,{"inputs":[{"name":"n"}],"output":{"name":"propassignadapter"}}],[11,"build_with","","",46,{"inputs":[{"name":"propassignadapter"},{"name":"propertyname"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",47,{"inputs":[{"name":"propinitadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"from","","",48,{"inputs":[{"name":"n"}],"output":{"name":"getteradapter"}}],[11,"build_with","","",48,{"inputs":[{"name":"getteradapter"},{"name":"propertyname"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",49,{"inputs":[{"name":"getterbodyadapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"from","","Create a new object field setter adapter from an argument name and a\nbuilder.",50,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"setteradapter"}}],[11,"build_with","","",50,{"inputs":[{"name":"setteradapter"},{"name":"propertyname"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",51,{"inputs":[{"name":"setterbodyadapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"from","","",52,{"inputs":[{"name":"n"}],"output":{"name":"calladapter"}}],[11,"build_with","","",52,{"inputs":[{"name":"calladapter"},{"name":"fncall"}],"output":{"name":"pathbuilder"}}],[11,"with_op","","Create a new assignment expression adapter from an operator and a builder.",53,{"inputs":[{"name":"assignmentop"},{"name":"n"}],"output":{"name":"assignadapter"}}],[11,"from","","",53,{"inputs":[{"name":"n"}],"output":{"name":"assignadapter"}}],[11,"build_with","","",53,{"inputs":[{"name":"assignadapter"},{"name":"lhsexpression"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"assignrhsadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"from","","Create a new binary operator adapter from an operator and a builder.",55,{"inputs":[{"name":"binaryop"},{"name":"n"}],"output":{"name":"binarylhsadapter"}}],[11,"build_with","","",55,{"inputs":[{"name":"binarylhsadapter"},{"name":"expression"}],"output":{"name":"expressionbuilder"}}],[11,"from","","Create a new unary operator adapter from an operator and a builder.",56,{"inputs":[{"name":"unaryop"},{"name":"n"}],"output":{"name":"unaryadapter"}}],[11,"build_with","","",56,{"inputs":[{"name":"unaryadapter"},{"name":"lhsexpression"}],"output":{"name":"next"}}],[11,"from","","",57,{"inputs":[{"name":"n"}],"output":{"name":"fnaccessadapter"}}],[11,"build_with","","",57,{"inputs":[{"name":"fnaccessadapter"},{"name":"pathexpression"}],"output":{"name":"fncallbuilder"}}],[11,"with_name","","Create a new function expression adapter with a function name.",58,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"fnexpradapter"}}],[11,"from","","",58,{"inputs":[{"name":"n"}],"output":{"name":"fnexpradapter"}}],[11,"build_with","","",58,{"inputs":[{"name":"fnexpradapter"},{"name":"vec"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",58,{"inputs":[{"name":"fnexpradapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[8,"PathType","js_builder::builder::expression","Common properties of path like expressions.",null,null],[10,"id","","Add an identifier to the path.",59,{"inputs":[{"name":"pathtype"},{"name":"identifier"}],"output":null}],[10,"index","","Add an index to the path.",59,{"inputs":[{"name":"pathtype"},{"name":"expressions"}],"output":null}],[10,"into_call_base","","Turn the path into the base for a function call.",59,{"inputs":[{"name":"pathtype"}],"output":{"name":"callbase"}}],[11,"this","","Build a `this` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"next"}}],[11,"id","","Build an identifier expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"ids","","Build a path expression, consisting of only identifiers.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"null","","Build a `null` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"next"}}],[11,"bool","","Build a Boolean literal expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"bool"}],"output":{"name":"next"}}],[11,"number","","Build a number literal expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"num"}],"output":{"name":"next"}}],[11,"hex_int","","Build a hexadecimal integer expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"string","","Build a string literal expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"regex","","Build a regular expression literal expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"array","","Build an array literal expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"arraybuilder"}}],[11,"object","","Build an object literal expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"objectbuilder"}}],[11,"paren","","Put parenthesis around an expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"path","","Build a path expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"new","","Build a constructor call expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"new_value","","Build a constructor call expression, without an argument list.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"valueexprbuilder"}}],[11,"function","","Build a function expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"fnargnamesbuilder"}}],[11,"named_function","","Build a named function expression.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"assign","","Build an assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"add_assign","","Build an addition assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"sub_assign","","Build a subtraction assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"mul_assign","","Build a multiplication assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"div_assign","","Build a division assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"mod_assign","","Build a modulo (remainder) assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"lsh_assign","","Build a left shift assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"rsh_assign","","Build a right shift assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"ursh_assign","","Build an unsigned right shift assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"and_assign","","Build a bitwise `and` assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"or_assign","","Build a bitwise `or` assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"xor_assign","","Build a bitwise `xor` assignment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"add","","Build an addition expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"sub","","Build a subtraction expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"mul","","Build a multiplication expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"div","","Build a division expression. At least two sub-expressions are required,\nand more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"mod_","","Build a modulo (reminder) expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"lsh","","Build a left shift expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"rsh","","Build a right shift expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"ursh","","Build an unsigned right shift expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"lt","","Build a less than expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"gt","","Build a greater than expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"lt_eq","","Build a less than or equal expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"gt_eq","","Build a greater than or equal expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"eq","","Build an equality expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"not_eq","","Build an inequality expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"identical","","Build an identity expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"not_identical","","Build a nonidentity expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"and","","Build a logical `and` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"or","","Build a logical `or` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"bit_and","","Build a bitwise `and` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"bit_or","","Build a bitwise `or` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"bit_xor","","Build a bitwise `xor` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"instanceof","","Build an `instanceof` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"in_","","Build an `in` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"pre_incr","","Build a prefix increment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"post_incr","","Build a postfix increment expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"pre_decr","","Build a prefix decrement expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"post_decr","","Build a postfix decrement expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"delete","","Build a `delete` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"void","","Build a `void` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"typeof_","","Build a `typeof` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"plus","","Build a unary plus expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"neg","","Build a negation expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"not","","Build a logical `not` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"bit_not","","Build a bitwise `not` expression.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"build_expr","","Use a pre-built expression, instead.",60,{"inputs":[{"name":"expressionbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"comma","","Build a comma separated expression chain.",60,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionsbuilder"}}],[11,"from","","",60,{"inputs":[{"name":"n"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"primaryexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"valueexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"pathexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"callexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"fnexprdecl"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"expressionbuilder"},{"name":"fncall"}],"output":{"name":"next"}}],[11,"id","","Access a member, using the dot notation.",61,{"inputs":[{"name":"pathbuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"add_id","","Same as `id`, but without moving the builder.",61,{"inputs":[{"name":"pathbuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"index","","Access a member, using the bracket notation.",61,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_index","","Same as `index`, but without moving the builder.",61,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_index","","Index the path, using a pre-built expression chain.",61,{"inputs":[{"name":"pathbuilder"},{"name":"expressions"}],"output":{"name":"pathbuilder"}}],[11,"call","","Call the current path as a function, and continue building it.",61,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"fncallbuilder"}}],[11,"build","","Finish building the path.",61,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",61,{"inputs":[{"name":"pathbuilder"},{"name":"expression"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",61,{"inputs":[{"name":"pathbuilder"},{"name":"expressions"}],"output":{"name":"pathbuilder"}}],[11,"id","js_builder::ast","",3,{"inputs":[{"name":"pathexpression"},{"name":"identifier"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"pathexpression"},{"name":"expressions"}],"output":null}],[11,"into_call_base","","",3,{"inputs":[{"name":"pathexpression"}],"output":{"name":"callbase"}}],[11,"id","","",4,{"inputs":[{"name":"callexpression"},{"name":"identifier"}],"output":null}],[11,"index","","",4,{"inputs":[{"name":"callexpression"},{"name":"expressions"}],"output":null}],[11,"into_call_base","","",4,{"inputs":[{"name":"callexpression"}],"output":{"name":"callbase"}}],[11,"this","js_builder::builder::expression","Build a path that begins with `this`.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"pathbuilder"}}],[11,"id","","Build a path that begins with an identifier.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"null","","Build a path that begins with `null`.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"pathbuilder"}}],[11,"bool","","Build a path that begins with a Boolean value.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"bool"}],"output":{"name":"pathbuilder"}}],[11,"number","","Build a path that begins with a number. You may want to wrap the number\nin parenthesis first, to avoid ambiguities. See\n[`paren`](#method.paren), below.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"num"}],"output":{"name":"pathbuilder"}}],[11,"hex_int","","Build a path that begins with a hexadecimal integer.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"i"}],"output":{"name":"pathbuilder"}}],[11,"string","","Build a path that begins with a string.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"regex","","Build a path that begins with a regular expression.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"array","","Build a path that begins with an array.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"arraybuilder"}}],[11,"object","","Build a path that begins with an object.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"objectbuilder"}}],[11,"paren","","Build a path that begins with an expression in parenthesis.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"expressionbuilder"}}],[11,"function","","Build a path that begins with a function expression.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"fnargnamesbuilder"}}],[11,"named_function","","Build a path that begins with a function expression.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"new","","Build a path that begins with a constructor call.",62,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"ids","","Build a path that begins with a sequence of identifiers.",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"i"}],"output":{"name":"pathbuilder"}}],[11,"from","","",62,{"inputs":[{"name":"n"}],"output":{"name":"pathbasebuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"vec"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"vec"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"expression"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"expressions"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"fnexprdecl"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"fncall"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",62,{"inputs":[{"name":"pathbasebuilder"},{"name":"primaryexpression"}],"output":{"name":"pathbuilder"}}],[11,"expr","","Add an expression to the chain.",63,{"inputs":[{"name":"expressionsbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_expr","","Same as `expr`, but without moving the builder.",63,{"inputs":[{"name":"expressionsbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_expr","","Add a pre-built expression to the chain.",63,{"inputs":[{"name":"expressionsbuilder"},{"name":"expression"}],"output":{"name":"expressionsbuilder"}}],[11,"build","","Finnish building the expression chain.",63,{"inputs":[{"name":"expressionsbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",63,{"inputs":[{"name":"expressionsbuilder"},{"name":"expression"}],"output":{"name":"expressionsbuilder"}}],[11,"elem","","Add an element to the array.",64,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_elem","","Same as `elem`, but without moving the builder.",64,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_elem","","Add a pre-built element to the array.",64,{"inputs":[{"name":"arraybuilder"},{"name":"expression"}],"output":{"name":"arraybuilder"}}],[11,"build","","Finish building the array.",64,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"next"}}],[11,"from","","",64,{"inputs":[{"name":"n"}],"output":{"name":"arraybuilder"}}],[11,"build_with","","",64,{"inputs":[{"name":"arraybuilder"},{"name":"expression"}],"output":{"name":"arraybuilder"}}],[11,"field","","Add an field to the object.",65,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"add_field","","Same as `field`, but without moving the builder.",65,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"getter","","Add a getter to the object.",65,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"add_getter","","Same as `getter`, but without moving the builder.",65,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"setter","","Add a getter to the object.",65,{"inputs":[{"name":"objectbuilder"},{"name":"s"}],"output":{"name":"propnamebuilder"}}],[11,"add_setter","","Same as `setter`, but without moving the builder.",65,{"inputs":[{"name":"objectbuilder"},{"name":"s"}],"output":{"name":"propnamebuilder"}}],[11,"build","","Finish building the object.",65,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"next"}}],[11,"from","","",65,{"inputs":[{"name":"n"}],"output":{"name":"objectbuilder"}}],[11,"build_with","","",65,{"inputs":[{"name":"objectbuilder"},{"name":"propertyassignment"}],"output":{"name":"objectbuilder"}}],[11,"id","","Use an identifier.",66,{"inputs":[{"name":"propnamebuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"string","","Use a string.",66,{"inputs":[{"name":"propnamebuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"number","","Use a number.",66,{"inputs":[{"name":"propnamebuilder"},{"name":"num"}],"output":{"name":"next"}}],[11,"hex_int","","Use a hexadecimal integer.",66,{"inputs":[{"name":"propnamebuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"path","","Build a path expression.",67,{"inputs":[{"name":"valueexprbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"new_value","","Build a constructor call expression, without an argument list.",67,{"inputs":[{"name":"valueexprbuilder"}],"output":{"name":"valueexprbuilder"}}],[11,"from","","",67,{"inputs":[{"name":"n"}],"output":{"name":"valueexprbuilder"}}],[11,"build_with","","",67,{"inputs":[{"name":"valueexprbuilder"},{"name":"pathexpression"}],"output":{"name":"next"}}],[11,"build_with","","",67,{"inputs":[{"name":"valueexprbuilder"},{"name":"valueexpression"}],"output":{"name":"next"}}],[11,"this","","Build a `this` expression.",68,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"next"}}],[11,"id","","Build an identifier expression.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"ids","","Build a path expression, consisting of only identifiers.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"null","","Build a `null` expression.",68,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"next"}}],[11,"bool","","Build a Boolean literal expression.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"bool"}],"output":{"name":"next"}}],[11,"number","","Build a number literal expression.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"num"}],"output":{"name":"next"}}],[11,"hex_int","","Build a hexadecimal integer expression.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"string","","Build a string literal expression.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"regex","","Build a regular expression literal expression.",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"array","","Build an array literal expression.",68,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"arraybuilder"}}],[11,"object","","Build an object literal expression.",68,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"objectbuilder"}}],[11,"paren","","Put parenthesis around an expression.",68,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"path","","Build a path expression.",68,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"from","","",68,{"inputs":[{"name":"n"}],"output":{"name":"lhsexprbuilder"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"pathexpression"}],"output":{"name":"next"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"callexpression"}],"output":{"name":"next"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"primaryexpression"}],"output":{"name":"next"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",68,{"inputs":[{"name":"lhsexprbuilder"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"expr","","Add an expression to the chain.",69,{"inputs":[{"name":"binaryexprbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_expr","","Same as `expr`, but without moving the builder.",69,{"inputs":[{"name":"binaryexprbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_expr","","Add a pre-built expression to the chain.",69,{"inputs":[{"name":"binaryexprbuilder"},{"name":"expression"}],"output":{"name":"self"}}],[11,"build","","Finish building the binary operator chain.",69,{"inputs":[{"name":"binaryexprbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",69,{"inputs":[{"name":"binaryexprbuilder"},{"name":"expression"}],"output":{"name":"binaryexprbuilder"}}],[0,"function","js_builder::builder","Function related builders.",null,null],[3,"FnAdapter","js_builder::builder::function","An adapter that holds a function signature.",null,null],[3,"FnArgnamesBuilder","","A builder for function argument names.",null,null],[3,"FnBodyBuilder","","A builder for function bodies.",null,null],[3,"FnCall","","The parts of a function call.",null,null],[12,"access_expr","","The function access path.",70,null],[12,"args","","The function call arguments.",70,null],[3,"FnCallBuilder","","A builder for function calls.",null,null],[11,"from","","Create a new `FnAdapter` from a function name.",71,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"fnadapter"}}],[11,"build_with","","",71,{"inputs":[{"name":"fnadapter"},{"name":"vec"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",71,{"inputs":[{"name":"fnadapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"arg","","Add an argument to the argument list.",72,{"inputs":[{"name":"fnargnamesbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"add_arg","","Same as `arg`, but without moving the builder.",72,{"inputs":[{"name":"fnargnamesbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"build","","Finish building the function argument list.",72,{"inputs":[{"name":"fnargnamesbuilder"}],"output":{"name":"next"}}],[11,"from","","",72,{"inputs":[{"name":"n"}],"output":{"name":"fnargnamesbuilder"}}],[11,"stmt","","Add a statement to the function body.",73,{"inputs":[{"name":"fnbodybuilder"}],"output":{"name":"statementbuilder"}}],[11,"add_stmt","","Same as `stmt`, but without moving the builder.",73,{"inputs":[{"name":"fnbodybuilder"}],"output":{"name":"statementbuilder"}}],[11,"with_stmt","","Add a pre-built statement to the function body.",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"statement"}],"output":{"name":"fnbodybuilder"}}],[11,"function","","Add a function to the function body.",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"add_function","","Same as `function`, but without moving the builder.",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"with_function","","Add an almost pre-built function to the function body.",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"s"},{"name":"vec"},{"name":"functionbody"}],"output":null}],[11,"build","","Finish building the function body.",73,{"inputs":[{"name":"fnbodybuilder"}],"output":{"name":"next"}}],[11,"build_body","","Use a pre-built function body, instead.",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"from","","",73,{"inputs":[{"name":"n"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"statement"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",73,{"inputs":[{"name":"fnbodybuilder"},{"name":"sourceelement"}],"output":{"name":"fnbodybuilder"}}],[11,"arg","","Add an argument to the function call.",74,{"inputs":[{"name":"fncallbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_arg","","Same as `arg`, but without moving the builder.",74,{"inputs":[{"name":"fncallbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_arg","","Add a pre-built expression as an argument.",74,{"inputs":[{"name":"fncallbuilder"},{"name":"expression"}],"output":{"name":"fncallbuilder"}}],[11,"build","","Finish build the function call.",74,{"inputs":[{"name":"fncallbuilder"}],"output":{"name":"next"}}],[11,"from","","Create a new function call builder from a path and a builder.",74,{"inputs":[{"name":"e"},{"name":"n"}],"output":{"name":"fncallbuilder"}}],[11,"build_with","","",74,{"inputs":[{"name":"fncallbuilder"},{"name":"expression"}],"output":{"name":"fncallbuilder"}}],[8,"Build","js_builder::builder","The interface between builders.",null,null],[16,"Next","","The next value in the chain.",75,null],[10,"build_with","","Use the result from a builder.",75,{"inputs":[{"name":"build"},{"name":"t"}],"output":{"name":"next"}}],[11,"new","","Create a new script builder.",76,{"inputs":[],"output":{"name":"script"}}],[11,"stmt","","Add a statement to the script.",76,{"inputs":[{"name":"script"}],"output":{"name":"statementbuilder"}}],[11,"add_stmt","","Same as `stmt`, but without moving the script builder.",76,{"inputs":[{"name":"script"}],"output":{"name":"statementbuilder"}}],[11,"with_stmt","","Add a pre-built statement.",76,{"inputs":[{"name":"script"},{"name":"statement"}],"output":{"name":"script"}}],[11,"function","","Add a function to the script.",76,{"inputs":[{"name":"script"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"add_function","","Same as `function`, but without moving the script builder.",76,{"inputs":[{"name":"script"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"with_function","","Add a function with pre-built arguments and body.",76,{"inputs":[{"name":"script"},{"name":"s"},{"name":"vec"},{"name":"functionbody"}],"output":null}],[11,"with_source_element","","Add a pre-built source element.",76,{"inputs":[{"name":"script"},{"name":"sourceelement"}],"output":null}],[11,"print_with","","",76,{"inputs":[{"name":"script"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","js_builder::ast","",8,{"inputs":[{"name":"script"}],"output":{"name":"functionbody"}}],[11,"build_with","js_builder::builder","",76,{"inputs":[{"name":"script"},{"name":"statement"}],"output":{"name":"script"}}],[11,"build_with","","",76,{"inputs":[{"name":"script"},{"name":"sourceelement"}],"output":{"name":"script"}}],[0,"print","js_builder","Code printing and formatting utilities.",null,null],[3,"Formatter","js_builder::print","Code formatter.",null,null],[3,"Indented","","An indented formatter.",null,null],[8,"Print","","A trait for printing the AST to a writer.",null,null],[10,"print_with","","Print using a formatter.",77,{"inputs":[{"name":"print"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pretty_print","","Print with somewhat pretty formatting.",77,{"inputs":[{"name":"print"},{"name":"w"}],"output":{"name":"result"}}],[11,"compact_print","","Print with less whitespace.",77,{"inputs":[{"name":"print"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Create a new formatter from a writer.",78,{"inputs":[{"name":"w"},{"name":"bool"}],"output":{"name":"formatter"}}],[11,"new_line","","Start a new line if pretty printing is enabled.",78,{"inputs":[{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","Write something to the writer.",78,{"inputs":[{"name":"formatter"},{"name":"c"}],"output":{"name":"result"}}],[11,"indented","","Create an indented formatter.",78,{"inputs":[{"name":"formatter"}],"output":{"name":"indented"}}],[11,"write_fmt","","Write something formatted.",78,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"deref","","",79,{"inputs":[{"name":"indented"}],"output":{"name":"formatter"}}],[11,"deref_mut","","",79,{"inputs":[{"name":"indented"}],"output":{"name":"formatter"}}],[11,"drop","","",79,{"inputs":[{"name":"indented"}],"output":null}]],"paths":[[3,"Expressions"],[3,"StringLiteral"],[3,"RegularExpression"],[3,"PathExpression"],[3,"CallExpression"],[3,"VarDecl"],[3,"Catch"],[3,"Block"],[3,"FunctionBody"],[4,"NumericLiteral"],[4,"PrimaryExpression"],[4,"PropertyAssignment"],[4,"PropertyName"],[4,"Expression"],[4,"UnaryOp"],[4,"BinaryOp"],[4,"AssignmentOp"],[4,"LhsExpression"],[4,"ValueExpression"],[4,"PathBase"],[4,"CallBase"],[4,"Access"],[4,"Statement"],[4,"CaseClause"],[4,"SourceElement"],[3,"InitAdapter"],[3,"IfAdapter"],[3,"ThenAdapter"],[3,"ForInLhsAdapter"],[3,"ForInRhsAdapter"],[3,"ForInStmtAdapter"],[3,"ReturnAdapter"],[3,"DoAdapter"],[3,"DoWhileAdapter"],[3,"WhileAdapter"],[3,"WhileDoAdapter"],[3,"ForInitAdapter"],[3,"ForCondAdapter"],[3,"ForIncrAdapter"],[3,"ForStmtAdapter"],[3,"BlockBuilder"],[3,"StatementBuilder"],[3,"VarsBuilder"],[3,"IfBuilder"],[3,"SourceElementBuilder"],[3,"FnExprDecl"],[3,"PropAssignAdapter"],[3,"PropInitAdapter"],[3,"GetterAdapter"],[3,"GetterBodyAdapter"],[3,"SetterAdapter"],[3,"SetterBodyAdapter"],[3,"CallAdapter"],[3,"AssignAdapter"],[3,"AssignRhsAdapter"],[3,"BinaryLhsAdapter"],[3,"UnaryAdapter"],[3,"FnAccessAdapter"],[3,"FnExprAdapter"],[8,"PathType"],[3,"ExpressionBuilder"],[3,"PathBuilder"],[3,"PathBaseBuilder"],[3,"ExpressionsBuilder"],[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"PropNameBuilder"],[3,"ValueExprBuilder"],[3,"LhsExprBuilder"],[3,"BinaryExprBuilder"],[3,"FnCall"],[3,"FnAdapter"],[3,"FnArgnamesBuilder"],[3,"FnBodyBuilder"],[3,"FnCallBuilder"],[8,"Build"],[3,"Script"],[8,"Print"],[3,"Formatter"],[3,"Indented"]]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"Atom","string_cache::atom","",null,null],[12,"data","","This field is public so that the `atom!()` macro can use it.\nYou should not otherwise access this field.",0,null],[3,"BorrowedAtom","","",null,null],[12,"0","","",1,null],[7,"STATIC_ATOM_SET","","",null,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",2,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",2,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",2,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",2,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",2,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",2,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"eq","string_cache::atom","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"deref","","",1,{"inputs":[{"name":"borrowedatom"}],"output":{"name":"atom"}}],[11,"eq","","",1,{"inputs":[{"name":"borrowedatom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"get_hash","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"u32"}}],[11,"with_str","","",0,{"inputs":[{"name":"atom"},{"name":"f"}],"output":{"name":"output"}}],[11,"eq","","",0,{"inputs":[{"name":"atom"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"cow"}],"output":{"name":"atom"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"atom"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"atom"}}],[11,"clone","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"drop","","",0,{"inputs":[{"name":"atom"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"str"}}],[11,"serialize","","",0,{"inputs":[{"name":"atom"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_ascii_uppercase","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"to_ascii_lowercase","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"atom"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_str_ignore_ascii_case","","",0,{"inputs":[{"name":"atom"},{"name":"str"}],"output":{"name":"bool"}}],[0,"namespace","string_cache","**Note:** This may move as string-cache becomes less Web-specific.",null,null],[3,"Namespace","string_cache::namespace","An atom that is meant to represent a namespace in the HTML / XML sense.\nWhether a given string represents a namespace is contextual, so this is\na transparent wrapper that will not catch all mistakes.",null,null],[12,"0","","",3,null],[3,"BorrowedNamespace","","",null,null],[12,"0","","",4,null],[3,"QualName","","A name with a namespace.",null,null],[12,"ns","","",5,null],[12,"local","","",5,null],[11,"clone","","",3,{"inputs":[{"name":"namespace"}],"output":{"name":"namespace"}}],[11,"fmt","","",3,{"inputs":[{"name":"namespace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"deref","","",4,{"inputs":[{"name":"borrowednamespace"}],"output":{"name":"namespace"}}],[11,"eq","","",4,{"inputs":[{"name":"borrowednamespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"qualname"}],"output":{"name":"qualname"}}],[11,"fmt","","",5,{"inputs":[{"name":"qualname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"cmp","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"new","","",5,{"inputs":[{"name":"namespace"},{"name":"atom"}],"output":{"name":"qualname"}}],[0,"shared","string_cache","",null,null],[3,"StaticAtomSet","string_cache::shared","",null,null],[12,"key","","",6,null],[12,"disps","","",6,null],[12,"atoms","","",6,null],[5,"pack_static","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null],[11,"get_index_or_hash","","",6,{"inputs":[{"name":"staticatomset"},{"name":"str"}],"output":{"name":"result"}}],[11,"index","","",6,{"inputs":[{"name":"staticatomset"},{"name":"u32"}],"output":{"name":"option"}}],[11,"iter","","",6,{"inputs":[{"name":"staticatomset"}],"output":{"name":"iter"}}],[14,"qualname!","string_cache","",null,null],[14,"ns!","","",null,null],[14,"atom!","","",null,null]],"paths":[[3,"Atom"],[3,"BorrowedAtom"],[3,"Mutex"],[3,"Namespace"],[3,"BorrowedNamespace"],[3,"QualName"],[3,"StaticAtomSet"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"fmt","core::ops","",0,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",0,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",1,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",1,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"next_back","","",1,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",1,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",1,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",2,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"eq","","",2,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",2,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",3,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",3,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",4,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",4,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",4,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"next_back","","",4,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",4,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",6,null],[11,"write_u8","","Write a single `u8` into this hasher",7,null],[11,"write_u16","","Write a single `u16` into this hasher.",7,null],[11,"write_u32","","Write a single `u32` into this hasher.",7,null],[11,"write_u64","","Write a single `u64` into this hasher.",7,null],[11,"write_usize","","Write a single `usize` into this hasher.",7,null],[11,"write_i8","","Write a single `i8` into this hasher.",7,null],[11,"write_i16","","Write a single `i16` into this hasher.",7,null],[11,"write_i32","","Write a single `i32` into this hasher.",7,null],[11,"write_i64","","Write a single `i64` into this hasher.",7,null],[11,"write_isize","","Write a single `isize` into this hasher.",7,null],[11,"default","core::hash","",8,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",8,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"build_hasher","","",8,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",8,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","core::hash::sip","",9,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",9,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"write","","",9,null],[11,"finish","","",9,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",9,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",9,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",9,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",10,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",10,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",10,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",11,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",12,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",12,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",12,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",13,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",13,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",13,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",14,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",14,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",15,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",15,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",16,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",16,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",17,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",17,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",17,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",17,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",17,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",17,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",17,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",17,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",17,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ne","serde::core::cmp","This method tests for `!=`.",19,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"partial_cmp","core::cmp","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lt","serde::core::cmp","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"default","core::marker","",22,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",23,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",25,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"eq","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"decodeutf16error"}],"output":{"name":"decodeutf16error"}}],[11,"fmt","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",26,{"inputs":[{"name":"decodeutf16error"}],"output":{"name":"u16"}}],[11,"next","core::char","",27,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",27,null],[11,"fmt","","",27,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",28,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"count","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",29,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",29,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",30,null],[11,"fmt","","",30,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","collections::str","",31,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"len","core::str","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"count","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",32,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",32,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",33,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"fmt","","",33,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",34,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",34,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",35,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",35,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",35,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",35,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",36,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"eq","","",36,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",36,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",37,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",37,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",37,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",38,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"fmt","","",38,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",39,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",39,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",39,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","core::str::pattern","",40,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"next_match","serde::core::str::pattern","Find the next `Match` result. See `next()`",41,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",41,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",42,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",42,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_back","core::str::pattern","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",43,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",45,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"next_back","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"clone","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",46,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::str","",47,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",47,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",48,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",48,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",49,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"fmt","","",49,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",50,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",50,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","rustc_unicode::u_str","",51,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"fmt","core::str","",52,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",52,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"next_back","","",53,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",53,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",54,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",55,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",55,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",55,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",56,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",56,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",57,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",57,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",58,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",58,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"fmt","","",58,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::num","",59,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",59,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",60,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"eq","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",61,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","core::slice","",62,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",62,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",63,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"count","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",63,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",63,null],[11,"next","","",64,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",65,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",66,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"count","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",67,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",67,null],[11,"fmt","","",67,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"count","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",68,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",68,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"count","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",69,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",71,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",72,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",73,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",73,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",73,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",73,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",73,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",73,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",73,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",73,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",73,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",73,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",73,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"len","","Returns the exact number of times the iterator will iterate.",74,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"next_back","core::iter","",75,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",75,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",76,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"fmt","","",76,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",77,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",77,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",78,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",78,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",79,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"fmt","","",79,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",80,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next_back","","",81,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next_back","","",82,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next_back","","",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"next","","# Overflow Behavior",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"nth","","",83,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"clone","","",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"fmt","","",83,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",84,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",84,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",84,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"clone","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"fmt","","",84,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",85,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",86,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next_back","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",87,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"fmt","","",87,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",88,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",88,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",88,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",88,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",89,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next_back","","",90,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next_back","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",91,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",91,null],[11,"clone","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"fmt","","",91,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",92,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"fmt","","",93,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",94,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",96,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",96,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",96,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"default","","",97,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",97,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",97,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",97,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",97,null],[11,"as_mut","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",97,null],[11,"deref","","",97,null],[11,"deref_mut","","",97,null],[11,"serialize","","",97,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",98,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",98,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",98,null],[11,"visit_byte_buf","","",98,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",97,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"clone","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",99,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",99,null],[11,"from","","",99,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",99,null],[11,"deref","","",99,null],[11,"serialize","","",99,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",100,null],[13,"Usize","","Represents a `usize` type.",100,null],[13,"U8","","Represents a `u8` type.",100,null],[13,"U16","","Represents a `u16` type.",100,null],[13,"U32","","Represents a `u32` type.",100,null],[13,"U64","","Represents a `u64` type.",100,null],[13,"Isize","","Represents a `isize` type.",100,null],[13,"I8","","Represents a `i8` type.",100,null],[13,"I16","","Represents a `i16` type.",100,null],[13,"I32","","Represents a `i32` type.",100,null],[13,"I64","","Represents a `i64` type.",100,null],[13,"F32","","Represents a `f32` type.",100,null],[13,"F64","","Represents a `f64` type.",100,null],[13,"Char","","Represents a `char` type.",100,null],[13,"Str","","Represents a `&amp;str` type.",100,null],[13,"String","","Represents a `String` type.",100,null],[13,"Unit","","Represents a `()` type.",100,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",100,null],[13,"Seq","","Represents a sequence type.",100,null],[13,"Map","","Represents a map type.",100,null],[13,"UnitStruct","","Represents a unit struct type.",100,null],[13,"NewtypeStruct","","Represents a newtype type.",100,null],[13,"TupleStruct","","Represents a tuple struct type.",100,null],[13,"Struct","","Represents a struct type.",100,null],[13,"FieldName","","Represents a struct field name.",100,null],[13,"Tuple","","Represents a tuple type.",100,null],[13,"Enum","","Represents an `enum` type.",100,null],[13,"VariantName","","Represents an enum variant name.",100,null],[13,"StructVariant","","Represents a struct variant.",100,null],[13,"TupleVariant","","Represents a tuple variant.",100,null],[13,"UnitVariant","","Represents a unit variant.",100,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",100,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",101,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",101,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",102,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",102,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",103,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",104,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",105,{"inputs":[{"name":"phantomdatavisitor"}],"output":{"name":"result"}}],[11,"deserialize","core::marker","",22,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",106,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",106,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",106,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",107,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",108,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",108,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",108,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",109,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",110,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",110,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",110,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",111,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",112,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",112,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",112,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",113,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",114,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",114,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",114,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",115,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",116,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",116,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",116,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",117,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",118,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",118,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",119,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",119,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",120,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",120,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",121,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",121,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",122,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",122,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",123,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",123,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",124,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",124,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",125,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",125,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",126,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",126,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",127,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",127,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",128,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",128,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",129,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",129,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",130,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",130,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",130,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",131,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",132,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",132,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",132,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",133,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",134,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",135,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",136,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",137,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",138,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",139,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",140,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",140,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",141,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",142,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",143,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",144,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",145,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",146,null],[13,"InvalidType","","The value had an incorrect type.",146,null],[13,"InvalidLength","","The value had an invalid length.",146,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",146,null],[13,"EndOfStream","","EOF while deserializing a value.",146,null],[13,"UnknownVariant","","Unknown variant in enum.",146,null],[13,"UnknownField","","Unknown field in struct.",146,null],[13,"MissingField","","Struct is missing a field.",146,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",147,null],[10,"into_deserializer","","Convert this value into a deserializer.",147,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",146,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",146,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",146,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",146,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",146,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",146,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",146,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",146,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",146,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",146,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",146,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"deserialize","","",148,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",148,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",149,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",150,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",151,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",152,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",153,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",154,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",155,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",156,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",157,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",158,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",159,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",160,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",161,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",162,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",163,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",163,null],[11,"visit_variant","","",163,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",163,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",103,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"deserialize","serde::de::value","",164,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",164,null],[11,"visit_variant","","",164,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",164,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",165,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",165,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",165,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",165,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",165,null],[11,"into_deserializer","collections::vec","",115,{"inputs":[{"name":"vec"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","collections::btree::set","",109,{"inputs":[{"name":"btreeset"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::set","",113,{"inputs":[{"name":"hashset"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",166,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",166,{"inputs":[{"name":"seqvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",167,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",167,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",167,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",167,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",167,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",167,null],[11,"into_deserializer","collections::btree::map","",131,{"inputs":[{"name":"btreemap"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::map","",133,{"inputs":[{"name":"hashmap"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",168,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",168,{"inputs":[{"name":"mapvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",169,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"deserialize","serde::de::value","",170,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",171,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",171,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",171,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",171,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",171,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",171,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",171,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",171,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",171,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",172,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",173,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",173,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",173,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",173,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",173,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",173,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",173,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",173,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",173,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",174,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",174,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",174,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",174,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",174,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",174,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",175,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",175,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",175,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",175,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",176,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",176,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",176,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",176,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",176,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",176,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",176,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",177,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",177,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",178,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",178,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",178,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",178,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",178,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",178,null],[11,"fmt","","",100,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",179,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",179,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",103,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",104,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",104,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",104,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"serialize","core::marker","",22,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",180,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",180,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",180,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",107,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",109,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",113,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",111,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",115,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",117,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",181,null],[11,"visit","","",181,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",181,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",182,null],[11,"visit","","",182,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",182,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",183,null],[11,"visit","","",183,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",183,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",184,null],[11,"visit","","",184,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",184,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",185,null],[11,"visit","","",185,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",185,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",186,null],[11,"visit","","",186,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",186,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",187,null],[11,"visit","","",187,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",187,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",188,null],[11,"visit","","",188,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",188,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",189,null],[11,"visit","","",189,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",189,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",190,null],[11,"visit","","",190,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",190,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",191,null],[11,"visit","","",191,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",191,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",192,null],[11,"visit","","",192,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",192,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",193,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",193,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",193,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",131,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",133,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",140,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",142,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",141,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",143,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",144,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::ip","",134,{"inputs":[{"name":"ipv4addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::addr","",136,{"inputs":[{"name":"socketaddr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",137,{"inputs":[{"name":"socketaddrv4"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",138,{"inputs":[{"name":"socketaddrv6"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",194,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",139,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",195,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",195,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",196,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",197,null],[10,"serialize_bool","","Serializes a `bool` value.",197,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",197,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",197,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",197,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",197,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes a `i64` value.",197,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",197,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",197,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",197,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",197,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a `u64` value.",197,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",197,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes a `f64` value.",197,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",197,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&amp;str`.",197,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",197,null],[10,"serialize_unit","","Serializes a `()` value.",197,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","Serializes a unit struct value.",197,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value..serialize",197,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",197,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq","","Serializes a sequence.",197,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element.",197,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple","","Serializes a tuple.",197,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_elt","","Serializes a tuple element.",197,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",197,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","Serializes a tuple struct.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",197,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","Serializes a tuple variant.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",197,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_map","","Serializes a map.",197,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",197,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct","","Serializes a struct.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_elt","","Serializes an element of a struct.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","Serializes a struct variant.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",197,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",198,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",198,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",199,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",199,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Hash"],[8,"Hasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"DebugMap"],[3,"Arguments"],[3,"DebugList"],[3,"DebugSet"],[8,"Write"],[3,"DebugTuple"],[3,"DebugStruct"],[3,"Formatter"],[3,"Error"],[8,"PartialEq"],[4,"Ordering"],[8,"PartialOrd"],[3,"PhantomData"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"EncodeUtf8"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf16"],[3,"EncodeUtf16"],[3,"Bytes"],[3,"Lines"],[3,"RMatchIndices"],[3,"Chars"],[3,"Utf8Error"],[3,"RSplitTerminator"],[3,"LinesAny"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"CharRange"],[3,"RMatches"],[3,"SplitN"],[3,"Matches"],[3,"SplitWhitespace"],[3,"ParseBoolError"],[3,"Split"],[3,"RSplitN"],[3,"MatchIndices"],[3,"SplitTerminator"],[3,"RSplit"],[3,"CharIndices"],[4,"FpCategory"],[3,"ParseIntError"],[3,"Wrapping"],[3,"Split"],[3,"IterMut"],[3,"RSplitN"],[3,"SplitNMut"],[3,"Windows"],[3,"Iter"],[3,"Chunks"],[3,"ChunksMut"],[3,"SplitN"],[3,"RSplitNMut"],[3,"SplitMut"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"String"],[4,"Option"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[5,"__unreachable","debug_unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,null],[14,"debug_unreachable!","","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,{"inputs":[],"output":null}],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"e"}}],[11,"unchecked_unwrap","core::option","",2,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_none","","",2,{"inputs":[{"name":"option"}],"output":null}],[11,"unchecked_unwrap_ok","core::result","",3,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_err","","",3,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"],[4,"Option"],[4,"Result"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[11,"fmt","core::fmt","",0,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","void::coreprovider::fmt","Writes a `char` into this writer, returning whether the write succeeded.",2,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",2,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",3,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",3,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",3,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",3,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",3,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",3,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",3,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",3,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",3,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"fmt","","",4,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",5,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",5,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",5,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",6,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",6,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",7,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",7,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",7,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",8,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",8,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",8,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",9,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",9,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"ne","void::coreprovider::cmp","This method tests for `!=`.",10,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"partial_cmp","core::cmp","",11,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",11,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",11,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lt","void::coreprovider::cmp","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"ResultVoidExt","void","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",13,{"inputs":[{"name":"resultvoidext"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",14,{"inputs":[{"name":"resultvoiderrext"}],"output":{"name":"e"}}],[11,"clone","","",15,{"inputs":[{"name":"void"}],"output":{"name":"void"}}],[11,"fmt","","",15,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"option"}}],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",16,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"void_unwrap_err","","Get the error out of an always-err Result.",16,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[4,"Alignment"],[3,"Error"],[8,"Write"],[3,"Formatter"],[3,"Arguments"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugTuple"],[8,"PartialEq"],[4,"Ordering"],[8,"PartialOrd"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"],[4,"Result"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"phfhash"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[11,"phf_hash","collections::string","",1,{"inputs":[{"name":"string"},{"name":"h"}],"output":null}],[11,"phf_hash","collections::vec","",2,{"inputs":[{"name":"vec"},{"name":"h"}],"output":null}]],"paths":[[8,"PhfHash"],[3,"String"],[3,"Vec"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,{"inputs":[{"name":"lazy"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
initSearch(searchIndex);
