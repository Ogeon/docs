var searchIndex = {};
searchIndex["js_builder"] = {"doc":"A JavaScript AST builder and pretty printing library.","items":[[0,"ast","js_builder","Abstract syntax tree components.",null,null],[3,"Expressions","js_builder::ast","A chain of comma separated expressions.",null,null],[12,"exprs","","The comma separated expressions.",0,null],[3,"StringLiteral","","A string literal.",null,null],[12,"double_quote","","Use double quotes (`&quot;`).",1,null],[12,"string","","The string.",1,null],[3,"RegularExpression","","A regular expression literal.",null,null],[12,"body","","The expression body (the part between `/.../`).",2,null],[12,"global","","The `g` flag.",2,null],[12,"ignore_case","","The `i` flag.",2,null],[12,"multiline","","The `m` flag.",2,null],[12,"unicode","","The `u` flag.",2,null],[12,"sticky","","The `y` flag.",2,null],[3,"PathExpression","","A member access path expression.",null,null],[12,"base","","The fist part of the path.",3,null],[12,"access","","The following member access path.",3,null],[3,"CallExpression","","A function call expression.",null,null],[12,"base","","The path leading up to the function.",4,null],[12,"arguments","","The function call arguments.",4,null],[12,"access","","The following member access path.",4,null],[3,"VarDecl","","A variable declaration.",null,null],[12,"ident","","The variable name.",5,null],[12,"init","","An optional initialization expression.",5,null],[3,"Catch","","A catch statement.",null,null],[12,"exception","","The exception variable.",6,null],[12,"block","","What to do when the exception is caught.",6,null],[3,"Block","","A block of statements, surrounded with `{ ... }`.",null,null],[12,"statements","","The statements inside the block.",7,null],[3,"FunctionBody","","The body of a function.",null,null],[12,"elements","","The statements and functions that makes up function body.",8,null],[4,"NumericLiteral","","A number.",null,null],[13,"Decimal","","A regular decimal number literal.",9,null],[13,"HexIntger","","A hexadecimal number literal.",9,null],[4,"PrimaryExpression","","A basic expression, such as a literal.",null,null],[13,"This","","The `this` keyword.",10,null],[13,"Identifier","","An identifier.",10,null],[13,"Null","","A `null` value.",10,null],[13,"Bool","","A Boolean literal.",10,null],[13,"Numeric","","A number literal.",10,null],[13,"String","","A string literal.",10,null],[13,"RegularExpression","","A regular expression literal.",10,null],[13,"Array","","An array literal.",10,null],[13,"Object","","An object literal.",10,null],[13,"Parenthesis","","An expression in parenthesis.",10,null],[4,"PropertyAssignment","","Object field (property) assignment.",null,null],[13,"Assignment","","A regular assignment.",11,null],[13,"Getter","","A property getter.",11,null],[13,"Setter","","A property setter.",11,null],[4,"PropertyName","","An object field (property) name.",null,null],[13,"Identifier","","An identifier.",12,null],[13,"StringLiteral","","A string.",12,null],[13,"NumericLiteral","","A number.",12,null],[4,"Expression","","A general expression.",null,null],[13,"Lhs","","A left hand side expression.",13,null],[13,"Unary","","Apply a unary operator.",13,null],[13,"Binary","","Apply a binary operator.",13,null],[13,"Conditional","","`...? ...: ...`.",13,null],[13,"Assignment","","Assign a value to something.",13,null],[4,"UnaryOp","","Unary operator.",null,null],[13,"PostIncr","","Postfix increment.",14,null],[13,"PostDecr","","Postfix decrement.",14,null],[13,"Delete","","`delete ...`.",14,null],[13,"Void","","`void ...`.",14,null],[13,"Typeof","","`typeof ...`.",14,null],[13,"PreIncr","","Prefix increment.",14,null],[13,"PreDecr","","Prefix decrement.",14,null],[13,"Plus","","`+...`.",14,null],[13,"Minus","","Negation.",14,null],[13,"BitwiseNot","","Bitwise `not`.",14,null],[13,"LogicalNot","","Logical `not`.",14,null],[4,"BinaryOp","","Binary operator.",null,null],[13,"Mul","","Multiplication.",15,null],[13,"Div","","Division.",15,null],[13,"Mod","","Modulo (remainder).",15,null],[13,"Add","","Addition.",15,null],[13,"Sub","","Subtraction.",15,null],[13,"Lsh","","Left shift.",15,null],[13,"Rsh","","Right shift.",15,null],[13,"Ursh","","Unsigned right shift.",15,null],[13,"Lt","","Less than.",15,null],[13,"Gt","","Greater than.",15,null],[13,"Leq","","Less than or equal.",15,null],[13,"Geq","","Greater than or equal.",15,null],[13,"Instanceof","","`... instanceof ...`.",15,null],[13,"In","","`... in ...`.",15,null],[13,"Eq","","Equal.",15,null],[13,"NotEq","","Not equal.",15,null],[13,"Identical","","Identity.",15,null],[13,"NotIdentical","","Nonidentity.",15,null],[13,"BitwiseAnd","","Bitwise `and`.",15,null],[13,"BitwiseXor","","Bitwise `xor`.",15,null],[13,"BitwiseOr","","Bitwise `or`.",15,null],[13,"LogicalAnd","","Logical `and`.",15,null],[13,"LogicalOr","","Logical `or`.",15,null],[4,"AssignmentOp","","An assignment operator.",null,null],[13,"MulAssign","","Multiplication assignment.",16,null],[13,"DivAssign","","Division assignment.",16,null],[13,"ModAssign","","Modulo (remainder) assignment.",16,null],[13,"AddAssign","","Addition assignment.",16,null],[13,"SubAssign","","Subtraction assignment.",16,null],[13,"LshAssign","","Left shift assignment.",16,null],[13,"RshAssign","","Right shift assignment.",16,null],[13,"UrshAssign","","Unsigned right shift assignment.",16,null],[13,"AndAssign","","Bitwise `and` assignment.",16,null],[13,"XorAssign","","Bitwise `xor` assignment.",16,null],[13,"OrAssign","","Bitwise `or` assignment.",16,null],[4,"LhsExpression","","A left hand side expression.",null,null],[13,"Value","","A value expression.",17,null],[13,"Call","","A function call.",17,null],[4,"ValueExpression","","An expression that fetches a value.",null,null],[13,"Path","","A path expression.",18,null],[13,"New","","A constructor call without an argument list.",18,null],[4,"PathBase","","The first part of a path expression.",null,null],[13,"Primary","","A primary expression.",19,null],[13,"Function","","A function expression.",19,null],[13,"New","","A constructor call.",19,null],[4,"CallBase","","The base path of a function call.",null,null],[13,"Path","","A path expression.",20,null],[13,"Call","","Another function call.",20,null],[4,"Access","","A path access notation.",null,null],[13,"Dot","","Dot notation (`x.y`).",21,null],[13,"Bracket","","Bracket notation (`x[y]`).",21,null],[4,"Statement","","A statement.",null,null],[13,"Block","","Code block.",22,null],[13,"Variable","","Variable declaration.",22,null],[13,"Empty","","An empty statement (just a `;`).",22,null],[13,"Expression","","An expression.",22,null],[13,"If","","An `if` statement.",22,null],[13,"Do","","A `do ... while(...)` statement.",22,null],[13,"While","","A `while(...) ...` statement.",22,null],[13,"For","","A `for(...; ...; ...) ...` statement.",22,null],[13,"ForVar","","A `for(var ...; ...; ...) ...` statement.",22,null],[13,"ForIn","","A `for(... in ...) ...` statement.",22,null],[13,"ForInVar","","A `for(var ... in ...) ...` statement.",22,null],[13,"Continue","","A `continue;` statement.",22,null],[13,"Break","","A `break ...;` statement.",22,null],[13,"Return","","A `return ...;` statement.",22,null],[13,"With","","A `with(...) ...` statement.",22,null],[13,"Labeled","","A labeled statement.",22,null],[13,"Switch","","A `switch(...) { ... }` statement.",22,null],[13,"Throw","","A `throw ...;` statement.",22,null],[13,"Try","","A try-catch-finally statement.",22,null],[13,"Debugger","","A `debugger;` statement.",22,null],[4,"CaseClause","","A clause in a `switch` statement.",null,null],[13,"Case","","A regular `case x: ...` clause.",23,null],[13,"Default","","A `default: ...` clause.",23,null],[4,"SourceElement","","Source elements makes up scripts and function bodies.",null,null],[13,"Statement","","A statement.",24,null],[13,"Function","","A function.",24,null],[6,"Identifier","","An identifier.",null,null],[11,"print_with","","",0,{"inputs":[{"name":"expressions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"expressions"}}],[11,"from","","",1,{"inputs":[{"name":"s"}],"output":{"name":"stringliteral"}}],[11,"print_with","","",1,{"inputs":[{"name":"stringliteral"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",9,{"inputs":[{"name":"numericliteral"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"s"}],"output":{"name":"regularexpression"}}],[11,"print_with","","",2,{"inputs":[{"name":"regularexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",10,{"inputs":[{"name":"primaryexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",11,{"inputs":[{"name":"propertyassignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",12,{"inputs":[{"name":"propertyname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new expression.",13,{"inputs":[],"output":{"name":"expressionbuilder"}}],[11,"print_with","","",13,{"inputs":[{"name":"expression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"unaryop"}],"output":{"name":"unaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"unaryop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"binaryop"}],"output":{"name":"binaryop"}}],[11,"fmt","","",15,{"inputs":[{"name":"binaryop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"assignmentop"}],"output":{"name":"assignmentop"}}],[11,"fmt","","",16,{"inputs":[{"name":"assignmentop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new left hand side expression.",17,{"inputs":[],"output":{"name":"lhsexprbuilder"}}],[11,"print_with","","",17,{"inputs":[{"name":"lhsexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new value expression.",18,{"inputs":[],"output":{"name":"valueexprbuilder"}}],[11,"print_with","","",18,{"inputs":[{"name":"valueexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new path expression.",3,{"inputs":[],"output":{"name":"pathbasebuilder"}}],[11,"print_with","","",3,{"inputs":[{"name":"pathexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",19,{"inputs":[{"name":"pathbase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",4,{"inputs":[{"name":"callexpression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",20,{"inputs":[{"name":"callbase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",21,{"inputs":[{"name":"access"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new statement.",22,{"inputs":[],"output":{"name":"statementbuilder"}}],[11,"print_with","","",22,{"inputs":[{"name":"statement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print_with","","",23,{"inputs":[{"name":"caseclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new code block.",7,{"inputs":[],"output":{"name":"blockbuilder"}}],[11,"print_with","","",7,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new function body.",8,{"inputs":[],"output":{"name":"fnbodybuilder"}}],[11,"print_with","","",8,{"inputs":[{"name":"functionbody"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new source element.",24,{"inputs":[],"output":{"name":"sourceelementbuilder"}}],[11,"print_with","","",24,{"inputs":[{"name":"sourceelement"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"builder","js_builder","Abstract syntax tree builders.",null,null],[3,"Script","js_builder::builder","Script builder.",null,null],[0,"statement","","Statement related builders.",null,null],[3,"BlockBuilder","js_builder::builder::statement","A builder for statement blocks.",null,null],[3,"StatementBuilder","","A builder for statements.",null,null],[3,"VarsBuilder","","A builder for variable declaration statements.",null,null],[3,"IfBuilder","","A builder for `if` statements.",null,null],[3,"SourceElementBuilder","","A builder for source elements, such as statements and functions.",null,null],[0,"adapter","","Adapters for transitioning between builders.",null,null],[3,"InitAdapter","js_builder::builder::statement::adapter","An adapter that holds the name of a variable.",null,null],[3,"IfAdapter","","An adapter for the condition expression in an `if` statement.",null,null],[3,"ThenAdapter","","An adapter for holding the `if` condition while the first branch is built.",null,null],[3,"ForInLhsAdapter","","An adapter for the left hand side of a `for(... in ...)` statement.",null,null],[3,"ForInRhsAdapter","","An adapter for the right hand side of a `for(... in ...)` statement.",null,null],[3,"ForInStmtAdapter","","An adapter for the loop body of `for(... in ...)` loops.",null,null],[3,"ReturnAdapter","","An expression adapter for `return` statements.",null,null],[11,"from","","Create a variable initializer adapter from a variable name and a\nbuilder.",25,{"inputs":[{"name":"s"},{"name":"varsbuilder"}],"output":{"name":"initadapter"}}],[11,"build_with","","",25,{"inputs":[{"name":"initadapter"},{"name":"expression"}],"output":{"name":"varsbuilder"}}],[11,"from","","",26,{"inputs":[{"name":"n"}],"output":{"name":"ifadapter"}}],[11,"build_with","","",26,{"inputs":[{"name":"ifadapter"},{"name":"expression"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",26,{"inputs":[{"name":"ifadapter"},{"name":"expressions"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",27,{"inputs":[{"name":"thenadapter"},{"name":"statement"}],"output":{"name":"ifbuilder"}}],[11,"from","","",28,{"inputs":[{"name":"n"}],"output":{"name":"forinlhsadapter"}}],[11,"build_with","","",28,{"inputs":[{"name":"forinlhsadapter"},{"name":"lhsexpression"}],"output":{"name":"expressionbuilder"}}],[11,"from","","Create a `for(var ... in ...)` RHS expression adapter from a variable\nname and a builder.",29,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"forinrhsadapter"}}],[11,"build_with","","",29,{"inputs":[{"name":"forinrhsadapter"},{"name":"expression"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",29,{"inputs":[{"name":"forinrhsadapter"},{"name":"expressions"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",30,{"inputs":[{"name":"forinstmtadapter"},{"name":"statement"}],"output":{"name":"next"}}],[11,"from","","",31,{"inputs":[{"name":"n"}],"output":{"name":"returnadapter"}}],[11,"build_with","","",31,{"inputs":[{"name":"returnadapter"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"build_with","","",31,{"inputs":[{"name":"returnadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"stmt","js_builder::builder::statement","Build a new statement and add it to the block.",32,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"statementbuilder"}}],[11,"add_stmt","","Same as `stmt`, above, but doesn&#39;t move the builder.",32,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"statementbuilder"}}],[11,"with_stmt","","Add a pre-built statement to the block.",32,{"inputs":[{"name":"blockbuilder"},{"name":"statement"}],"output":{"name":"blockbuilder"}}],[11,"build","","Finish building this statement block.",32,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"next"}}],[11,"build_block","","Use a pre-built statement block, instead.",32,{"inputs":[{"name":"blockbuilder"},{"name":"block"}],"output":{"name":"next"}}],[11,"from","","",32,{"inputs":[{"name":"n"}],"output":{"name":"blockbuilder"}}],[11,"build_with","","",32,{"inputs":[{"name":"blockbuilder"},{"name":"statement"}],"output":{"name":"blockbuilder"}}],[11,"block","","Build a statement block statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"blockbuilder"}}],[11,"var","","Build a variable declaration statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"varsbuilder"}}],[11,"empty","","Build an empty statement. It&#39;s just a `;`.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"next"}}],[11,"expr","","Build an expression statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"if_","","Build an `if` statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"for_in","","Build a `for(... in ...)` statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"for_in_var","","Build a `for(var ... in ...)` statement.",33,{"inputs":[{"name":"statementbuilder"},{"name":"s"}],"output":{"name":"expressionbuilder"}}],[11,"return_","","Build a `return` statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"return_nothing","","Build an empty `return` statement.",33,{"inputs":[{"name":"statementbuilder"}],"output":{"name":"next"}}],[11,"from","","",33,{"inputs":[{"name":"n"}],"output":{"name":"statementbuilder"}}],[11,"build_with","","",33,{"inputs":[{"name":"statementbuilder"},{"name":"block"}],"output":{"name":"next"}}],[11,"build_with","","",33,{"inputs":[{"name":"statementbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",33,{"inputs":[{"name":"statementbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",33,{"inputs":[{"name":"statementbuilder"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"inited","","Add an initialized variable to the variable declaration statement.",34,{"inputs":[{"name":"varsbuilder"},{"name":"s"}],"output":{"name":"expressionbuilder"}}],[11,"uninited","","Add an uninitialized variable to the variable declaration statement.",34,{"inputs":[{"name":"varsbuilder"},{"name":"s"}],"output":{"name":"varsbuilder"}}],[11,"build","","Finish declaring variables.",34,{"inputs":[{"name":"varsbuilder"}],"output":{"name":"next"}}],[11,"from","","",34,{"inputs":[{"name":"n"}],"output":{"name":"varsbuilder"}}],[11,"else_","","Add an `else` branch.",35,{"inputs":[{"name":"ifbuilder"}],"output":{"name":"statementbuilder"}}],[11,"else_if","","Add an `else if` branch.",35,{"inputs":[{"name":"ifbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"build","","Build the `if` statement without an `else` branch.",35,{"inputs":[{"name":"ifbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",35,{"inputs":[{"name":"ifbuilder"},{"name":"statement"}],"output":{"name":"next"}}],[11,"stmt","","Build a statement.",36,{"inputs":[{"name":"sourceelementbuilder"}],"output":{"name":"statementbuilder"}}],[11,"function","","Build a function.",36,{"inputs":[{"name":"sourceelementbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"from","","",36,{"inputs":[{"name":"n"}],"output":{"name":"sourceelementbuilder"}}],[11,"build_with","","",36,{"inputs":[{"name":"sourceelementbuilder"},{"name":"statement"}],"output":{"name":"next"}}],[0,"expression","js_builder::builder","Expression related builders.",null,null],[3,"ExpressionBuilder","js_builder::builder::expression","A builder for expressions.",null,null],[3,"PathBuilder","","A builder for path expressions.",null,null],[3,"PathBaseBuilder","","A builder for the first part of a path.",null,null],[3,"ExpressionsBuilder","","A builder for comma separated expression chains.",null,null],[3,"ArrayBuilder","","A builder for array literals.",null,null],[3,"ObjectBuilder","","A builder for object literals.",null,null],[3,"PropNameBuilder","","A builder for object field (property) names.",null,null],[3,"ValueExprBuilder","","A builder for value expressions.",null,null],[3,"LhsExprBuilder","","A builder for left hand side expressions.",null,null],[3,"BinaryExprBuilder","","A builder for binary operator chains.",null,null],[0,"adapter","","Adapters for transitioning between builders.",null,null],[3,"PropAssignAdapter","js_builder::builder::expression::adapter","An adapter that receives the name of an object field (property).",null,null],[3,"PropInitAdapter","","An adapter that holds the name of an object field (property).",null,null],[3,"GetterAdapter","","An adapter that receives the name of an object field getter.",null,null],[3,"GetterBodyAdapter","","An adapter that holds the name of an object field getter.",null,null],[3,"SetterAdapter","","An adapter that holds the argument, and receives the name of an object field setter.",null,null],[3,"SetterBodyAdapter","","An adapter that holds the argument and the name of an object field setter.",null,null],[3,"CallAdapter","","An adapter for function call expressions.",null,null],[3,"AssignAdapter","","An adapter that holds the assignment expression type.",null,null],[3,"AssignRhsAdapter","","An adapter that holds the type and left hand side of an assignment expression.",null,null],[3,"BinaryLhsAdapter","","An adapter that holds the type of a binary operator.",null,null],[3,"UnaryAdapter","","An adapter that holds the type of a unary operator.",null,null],[3,"FnAccessAdapter","","An adapter that receives the path to a function.",null,null],[3,"FnExprDecl","","The parts of a function expression.",null,null],[12,"name","","The function name.",37,null],[12,"args","","The function argument names.",37,null],[12,"body","","The function body.",37,null],[3,"FnExprAdapter","","An adapter that holds parts of a function expression.",null,null],[11,"from","","",38,{"inputs":[{"name":"n"}],"output":{"name":"propassignadapter"}}],[11,"build_with","","",38,{"inputs":[{"name":"propassignadapter"},{"name":"propertyname"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",39,{"inputs":[{"name":"propinitadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"from","","",40,{"inputs":[{"name":"n"}],"output":{"name":"getteradapter"}}],[11,"build_with","","",40,{"inputs":[{"name":"getteradapter"},{"name":"propertyname"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",41,{"inputs":[{"name":"getterbodyadapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"from","","Create a new object field setter adapter from an argument name and a\nbuilder.",42,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"setteradapter"}}],[11,"build_with","","",42,{"inputs":[{"name":"setteradapter"},{"name":"propertyname"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",43,{"inputs":[{"name":"setterbodyadapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"from","","",44,{"inputs":[{"name":"n"}],"output":{"name":"calladapter"}}],[11,"build_with","","",44,{"inputs":[{"name":"calladapter"},{"name":"fncall"}],"output":{"name":"pathbuilder"}}],[11,"with_op","","Create a new assignment expression adapter from an operator and a builder.",45,{"inputs":[{"name":"assignmentop"},{"name":"n"}],"output":{"name":"assignadapter"}}],[11,"from","","",45,{"inputs":[{"name":"n"}],"output":{"name":"assignadapter"}}],[11,"build_with","","",45,{"inputs":[{"name":"assignadapter"},{"name":"lhsexpression"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",46,{"inputs":[{"name":"assignrhsadapter"},{"name":"expression"}],"output":{"name":"next"}}],[11,"from","","Create a new binary operator adapter from an operator and a builder.",47,{"inputs":[{"name":"binaryop"},{"name":"n"}],"output":{"name":"binarylhsadapter"}}],[11,"build_with","","",47,{"inputs":[{"name":"binarylhsadapter"},{"name":"expression"}],"output":{"name":"expressionbuilder"}}],[11,"from","","Create a new unary operator adapter from an operator and a builder.",48,{"inputs":[{"name":"unaryop"},{"name":"n"}],"output":{"name":"unaryadapter"}}],[11,"build_with","","",48,{"inputs":[{"name":"unaryadapter"},{"name":"lhsexpression"}],"output":{"name":"next"}}],[11,"from","","",49,{"inputs":[{"name":"n"}],"output":{"name":"fnaccessadapter"}}],[11,"build_with","","",49,{"inputs":[{"name":"fnaccessadapter"},{"name":"pathexpression"}],"output":{"name":"fncallbuilder"}}],[11,"with_name","","Create a new function expression adapter with a function name.",50,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"fnexpradapter"}}],[11,"from","","",50,{"inputs":[{"name":"n"}],"output":{"name":"fnexpradapter"}}],[11,"build_with","","",50,{"inputs":[{"name":"fnexpradapter"},{"name":"vec"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",50,{"inputs":[{"name":"fnexpradapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[8,"PathType","js_builder::builder::expression","Common properties of path like expressions.",null,null],[10,"id","","Add an identifier to the path.",51,{"inputs":[{"name":"pathtype"},{"name":"identifier"}],"output":null}],[10,"index","","Add an index to the path.",51,{"inputs":[{"name":"pathtype"},{"name":"expressions"}],"output":null}],[10,"into_call_base","","Turn the path into the base for a function call.",51,{"inputs":[{"name":"pathtype"}],"output":{"name":"callbase"}}],[11,"this","","Build a `this` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"next"}}],[11,"id","","Build an identifier expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"ids","","Build a path expression, consisting of only identifiers.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"null","","Build a `null` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"next"}}],[11,"bool","","Build a Boolean literal expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"bool"}],"output":{"name":"next"}}],[11,"number","","Build a number literal expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"num"}],"output":{"name":"next"}}],[11,"hex_int","","Build a hexadecimal integer expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"string","","Build a string literal expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"regex","","Build a regular expression literal expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"array","","Build an array literal expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"arraybuilder"}}],[11,"object","","Build an object literal expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"objectbuilder"}}],[11,"paren","","Put parenthesis around an expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"path","","Build a path expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"new","","Build a constructor call expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"new_value","","Build a constructor call expression, without an argument list.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"valueexprbuilder"}}],[11,"function","","Build a function expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"fnargnamesbuilder"}}],[11,"named_function","","Build a named function expression.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"assign","","Build an assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"add_assign","","Build an addition assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"sub_assign","","Build a subtraction assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"mul_assign","","Build a multiplication assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"div_assign","","Build a division assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"mod_assign","","Build a modulo (remainder) assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"lsh_assign","","Build a left shift assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"rsh_assign","","Build a right shift assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"ursh_assign","","Build an unsigned right shift assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"and_assign","","Build a bitwise `and` assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"or_assign","","Build a bitwise `or` assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"xor_assign","","Build a bitwise `xor` assignment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"add","","Build an addition expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"sub","","Build a subtraction expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"mul","","Build a multiplication expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"div","","Build a division expression. At least two sub-expressions are required,\nand more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"mod_","","Build a modulo (reminder) expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"lsh","","Build a left shift expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"rsh","","Build a right shift expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"ursh","","Build an unsigned right shift expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"lt","","Build a less than expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"gt","","Build a greater than expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"lt_eq","","Build a less than or equal expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"gt_eq","","Build a greater than or equal expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"eq","","Build an equality expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"not_eq","","Build an inequality expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"identical","","Build an identity expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"not_identical","","Build a nonidentity expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"and","","Build a logical `and` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"or","","Build a logical `or` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"bit_and","","Build a bitwise `and` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"bit_or","","Build a bitwise `or` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"bit_xor","","Build a bitwise `xor` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"instanceof","","Build an `instanceof` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"in_","","Build an `in` expression. At least two sub-expressions are\nrequired, and more can be added. See\n[`BinaryExprBuilder`](struct.BinaryExprBuilder.html) for more info.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"pre_incr","","Build a prefix increment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"post_incr","","Build a postfix increment expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"pre_decr","","Build a prefix decrement expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"post_decr","","Build a postfix decrement expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"delete","","Build a `delete` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"void","","Build a `void` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"typeof_","","Build a `typeof` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"plus","","Build a unary plus expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"neg","","Build a negation expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"not","","Build a logical `not` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"bit_not","","Build a bitwise `not` expression.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"lhsexprbuilder"}}],[11,"build_expr","","Use a pre-built expression, instead.",52,{"inputs":[{"name":"expressionbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"comma","","Build a comma separated expression chain.",52,{"inputs":[{"name":"expressionbuilder"}],"output":{"name":"expressionsbuilder"}}],[11,"from","","",52,{"inputs":[{"name":"n"}],"output":{"name":"expressionbuilder"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"primaryexpression"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"valueexpression"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"pathexpression"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"callexpression"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"fnexprdecl"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"build_with","","",52,{"inputs":[{"name":"expressionbuilder"},{"name":"fncall"}],"output":{"name":"next"}}],[11,"id","","Access a member, using the dot notation.",53,{"inputs":[{"name":"pathbuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"add_id","","Same as `id`, but without moving the builder.",53,{"inputs":[{"name":"pathbuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"index","","Access a member, using the bracket notation.",53,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_index","","Same as `index`, but without moving the builder.",53,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_index","","Index the path, using a pre-built expression chain.",53,{"inputs":[{"name":"pathbuilder"},{"name":"expressions"}],"output":{"name":"pathbuilder"}}],[11,"call","","Call the current path as a function, and continue building it.",53,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"fncallbuilder"}}],[11,"build","","Finish building the path.",53,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",53,{"inputs":[{"name":"pathbuilder"},{"name":"expression"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",53,{"inputs":[{"name":"pathbuilder"},{"name":"expressions"}],"output":{"name":"pathbuilder"}}],[11,"id","js_builder::ast","",3,{"inputs":[{"name":"pathexpression"},{"name":"identifier"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"pathexpression"},{"name":"expressions"}],"output":null}],[11,"into_call_base","","",3,{"inputs":[{"name":"pathexpression"}],"output":{"name":"callbase"}}],[11,"id","","",4,{"inputs":[{"name":"callexpression"},{"name":"identifier"}],"output":null}],[11,"index","","",4,{"inputs":[{"name":"callexpression"},{"name":"expressions"}],"output":null}],[11,"into_call_base","","",4,{"inputs":[{"name":"callexpression"}],"output":{"name":"callbase"}}],[11,"this","js_builder::builder::expression","Build a path that begins with `this`.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"pathbuilder"}}],[11,"id","","Build a path that begins with an identifier.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"null","","Build a path that begins with `null`.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"pathbuilder"}}],[11,"bool","","Build a path that begins with a Boolean value.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"bool"}],"output":{"name":"pathbuilder"}}],[11,"number","","Build a path that begins with a number. You may want to wrap the number\nin parenthesis first, to avoid ambiguities. See\n[`paren`](#method.paren), below.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"num"}],"output":{"name":"pathbuilder"}}],[11,"hex_int","","Build a path that begins with a hexadecimal integer.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"i"}],"output":{"name":"pathbuilder"}}],[11,"string","","Build a path that begins with a string.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"regex","","Build a path that begins with a regular expression.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"pathbuilder"}}],[11,"array","","Build a path that begins with an array.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"arraybuilder"}}],[11,"object","","Build a path that begins with an object.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"objectbuilder"}}],[11,"paren","","Build a path that begins with an expression in parenthesis.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"expressionbuilder"}}],[11,"function","","Build a path that begins with a function expression.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"fnargnamesbuilder"}}],[11,"named_function","","Build a path that begins with a function expression.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"new","","Build a path that begins with a constructor call.",54,{"inputs":[{"name":"pathbasebuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"ids","","Build a path that begins with a sequence of identifiers.",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"i"}],"output":{"name":"pathbuilder"}}],[11,"from","","",54,{"inputs":[{"name":"n"}],"output":{"name":"pathbasebuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"vec"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"vec"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"expression"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"expressions"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"fnexprdecl"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"fncall"}],"output":{"name":"pathbuilder"}}],[11,"build_with","","",54,{"inputs":[{"name":"pathbasebuilder"},{"name":"primaryexpression"}],"output":{"name":"pathbuilder"}}],[11,"expr","","Add an expression to the chain.",55,{"inputs":[{"name":"expressionsbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_expr","","Same as `expr`, but without moving the builder.",55,{"inputs":[{"name":"expressionsbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_expr","","Add a pre-built expression to the chain.",55,{"inputs":[{"name":"expressionsbuilder"},{"name":"expression"}],"output":{"name":"expressionsbuilder"}}],[11,"build","","Finnish building the expression chain.",55,{"inputs":[{"name":"expressionsbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",55,{"inputs":[{"name":"expressionsbuilder"},{"name":"expression"}],"output":{"name":"expressionsbuilder"}}],[11,"elem","","Add an element to the array.",56,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_elem","","Same as `elem`, but without moving the builder.",56,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_elem","","Add a pre-built element to the array.",56,{"inputs":[{"name":"arraybuilder"},{"name":"expression"}],"output":{"name":"arraybuilder"}}],[11,"build","","Finish building the array.",56,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"next"}}],[11,"from","","",56,{"inputs":[{"name":"n"}],"output":{"name":"arraybuilder"}}],[11,"build_with","","",56,{"inputs":[{"name":"arraybuilder"},{"name":"expression"}],"output":{"name":"arraybuilder"}}],[11,"field","","Add an field to the object.",57,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"add_field","","Same as `field`, but without moving the builder.",57,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"getter","","Add a getter to the object.",57,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"add_getter","","Same as `getter`, but without moving the builder.",57,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"propnamebuilder"}}],[11,"setter","","Add a getter to the object.",57,{"inputs":[{"name":"objectbuilder"},{"name":"s"}],"output":{"name":"propnamebuilder"}}],[11,"add_setter","","Same as `setter`, but without moving the builder.",57,{"inputs":[{"name":"objectbuilder"},{"name":"s"}],"output":{"name":"propnamebuilder"}}],[11,"build","","Finish building the object.",57,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"next"}}],[11,"from","","",57,{"inputs":[{"name":"n"}],"output":{"name":"objectbuilder"}}],[11,"build_with","","",57,{"inputs":[{"name":"objectbuilder"},{"name":"propertyassignment"}],"output":{"name":"objectbuilder"}}],[11,"id","","Use an identifier.",58,{"inputs":[{"name":"propnamebuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"string","","Use a string.",58,{"inputs":[{"name":"propnamebuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"number","","Use a number.",58,{"inputs":[{"name":"propnamebuilder"},{"name":"num"}],"output":{"name":"next"}}],[11,"hex_int","","Use a hexadecimal integer.",58,{"inputs":[{"name":"propnamebuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"path","","Build a path expression.",59,{"inputs":[{"name":"valueexprbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"new_value","","Build a constructor call expression, without an argument list.",59,{"inputs":[{"name":"valueexprbuilder"}],"output":{"name":"valueexprbuilder"}}],[11,"from","","",59,{"inputs":[{"name":"n"}],"output":{"name":"valueexprbuilder"}}],[11,"build_with","","",59,{"inputs":[{"name":"valueexprbuilder"},{"name":"pathexpression"}],"output":{"name":"next"}}],[11,"build_with","","",59,{"inputs":[{"name":"valueexprbuilder"},{"name":"valueexpression"}],"output":{"name":"next"}}],[11,"this","","Build a `this` expression.",60,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"next"}}],[11,"id","","Build an identifier expression.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"ids","","Build a path expression, consisting of only identifiers.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"null","","Build a `null` expression.",60,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"next"}}],[11,"bool","","Build a Boolean literal expression.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"bool"}],"output":{"name":"next"}}],[11,"number","","Build a number literal expression.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"num"}],"output":{"name":"next"}}],[11,"hex_int","","Build a hexadecimal integer expression.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"i"}],"output":{"name":"next"}}],[11,"string","","Build a string literal expression.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"regex","","Build a regular expression literal expression.",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"s"}],"output":{"name":"next"}}],[11,"array","","Build an array literal expression.",60,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"arraybuilder"}}],[11,"object","","Build an object literal expression.",60,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"objectbuilder"}}],[11,"paren","","Put parenthesis around an expression.",60,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"path","","Build a path expression.",60,{"inputs":[{"name":"lhsexprbuilder"}],"output":{"name":"pathbasebuilder"}}],[11,"from","","",60,{"inputs":[{"name":"n"}],"output":{"name":"lhsexprbuilder"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"pathexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"callexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"primaryexpression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"vec"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"expression"}],"output":{"name":"next"}}],[11,"build_with","","",60,{"inputs":[{"name":"lhsexprbuilder"},{"name":"expressions"}],"output":{"name":"next"}}],[11,"expr","","Add an expression to the chain.",61,{"inputs":[{"name":"binaryexprbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_expr","","Same as `expr`, but without moving the builder.",61,{"inputs":[{"name":"binaryexprbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_expr","","Add a pre-built expression to the chain.",61,{"inputs":[{"name":"binaryexprbuilder"},{"name":"expression"}],"output":{"name":"self"}}],[11,"build","","Finish building the binary operator chain.",61,{"inputs":[{"name":"binaryexprbuilder"}],"output":{"name":"next"}}],[11,"build_with","","",61,{"inputs":[{"name":"binaryexprbuilder"},{"name":"expression"}],"output":{"name":"binaryexprbuilder"}}],[0,"function","js_builder::builder","Function related builders.",null,null],[3,"FnAdapter","js_builder::builder::function","An adapter that holds a function signature.",null,null],[3,"FnArgnamesBuilder","","A builder for function argument names.",null,null],[3,"FnBodyBuilder","","A builder for function bodies.",null,null],[3,"FnCall","","The parts of a function call.",null,null],[12,"access_expr","","The function access path.",62,null],[12,"args","","The function call arguments.",62,null],[3,"FnCallBuilder","","A builder for function calls.",null,null],[11,"from","","Create a new `FnAdapter` from a function name.",63,{"inputs":[{"name":"s"},{"name":"n"}],"output":{"name":"fnadapter"}}],[11,"build_with","","",63,{"inputs":[{"name":"fnadapter"},{"name":"vec"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",63,{"inputs":[{"name":"fnadapter"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"arg","","Add an argument to the argument list.",64,{"inputs":[{"name":"fnargnamesbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"add_arg","","Same as `arg`, but without moving the builder.",64,{"inputs":[{"name":"fnargnamesbuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"build","","Finish building the function argument list.",64,{"inputs":[{"name":"fnargnamesbuilder"}],"output":{"name":"next"}}],[11,"from","","",64,{"inputs":[{"name":"n"}],"output":{"name":"fnargnamesbuilder"}}],[11,"stmt","","Add a statement to the function body.",65,{"inputs":[{"name":"fnbodybuilder"}],"output":{"name":"statementbuilder"}}],[11,"add_stmt","","Same as `stmt`, but without moving the builder.",65,{"inputs":[{"name":"fnbodybuilder"}],"output":{"name":"statementbuilder"}}],[11,"with_stmt","","Add a pre-built statement to the function body.",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"statement"}],"output":{"name":"fnbodybuilder"}}],[11,"function","","Add a function to the function body.",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"add_function","","Same as `function`, but without moving the builder.",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"with_function","","Add an almost pre-built function to the function body.",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"s"},{"name":"vec"},{"name":"functionbody"}],"output":null}],[11,"build","","Finish building the function body.",65,{"inputs":[{"name":"fnbodybuilder"}],"output":{"name":"next"}}],[11,"build_body","","Use a pre-built function body, instead.",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"functionbody"}],"output":{"name":"next"}}],[11,"from","","",65,{"inputs":[{"name":"n"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"statement"}],"output":{"name":"fnbodybuilder"}}],[11,"build_with","","",65,{"inputs":[{"name":"fnbodybuilder"},{"name":"sourceelement"}],"output":{"name":"fnbodybuilder"}}],[11,"arg","","Add an argument to the function call.",66,{"inputs":[{"name":"fncallbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"add_arg","","Same as `arg`, but without moving the builder.",66,{"inputs":[{"name":"fncallbuilder"}],"output":{"name":"expressionbuilder"}}],[11,"with_arg","","Add a pre-built expression as an argument.",66,{"inputs":[{"name":"fncallbuilder"},{"name":"expression"}],"output":{"name":"fncallbuilder"}}],[11,"build","","Finish build the function call.",66,{"inputs":[{"name":"fncallbuilder"}],"output":{"name":"next"}}],[11,"from","","Create a new function call builder from a path and a builder.",66,{"inputs":[{"name":"e"},{"name":"n"}],"output":{"name":"fncallbuilder"}}],[11,"build_with","","",66,{"inputs":[{"name":"fncallbuilder"},{"name":"expression"}],"output":{"name":"fncallbuilder"}}],[8,"Build","js_builder::builder","The interface between builders.",null,null],[16,"Next","","The next value in the chain.",67,null],[10,"build_with","","Use the result from a builder.",67,{"inputs":[{"name":"build"},{"name":"t"}],"output":{"name":"next"}}],[11,"new","","Create a new script builder.",68,{"inputs":[],"output":{"name":"script"}}],[11,"stmt","","Add a statement to the script.",68,{"inputs":[{"name":"script"}],"output":{"name":"statementbuilder"}}],[11,"add_stmt","","Same as `stmt`, but without moving the script builder.",68,{"inputs":[{"name":"script"}],"output":{"name":"statementbuilder"}}],[11,"with_stmt","","Add a pre-built statement.",68,{"inputs":[{"name":"script"},{"name":"statement"}],"output":{"name":"script"}}],[11,"function","","Add a function to the script.",68,{"inputs":[{"name":"script"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"add_function","","Same as `function`, but without moving the script builder.",68,{"inputs":[{"name":"script"},{"name":"s"}],"output":{"name":"fnargnamesbuilder"}}],[11,"with_function","","Add a function with pre-built arguments and body.",68,{"inputs":[{"name":"script"},{"name":"s"},{"name":"vec"},{"name":"functionbody"}],"output":null}],[11,"with_source_element","","Add a pre-built source element.",68,{"inputs":[{"name":"script"},{"name":"sourceelement"}],"output":null}],[11,"print_with","","",68,{"inputs":[{"name":"script"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","js_builder::ast","",8,{"inputs":[{"name":"script"}],"output":{"name":"functionbody"}}],[11,"build_with","js_builder::builder","",68,{"inputs":[{"name":"script"},{"name":"statement"}],"output":{"name":"script"}}],[11,"build_with","","",68,{"inputs":[{"name":"script"},{"name":"sourceelement"}],"output":{"name":"script"}}],[0,"print","js_builder","Code printing and formatting utilities.",null,null],[3,"Formatter","js_builder::print","Code formatter.",null,null],[3,"Indented","","An indented formatter.",null,null],[8,"Print","","A trait for printing the AST to a writer.",null,null],[10,"print_with","","Print using a formatter.",69,{"inputs":[{"name":"print"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pretty_print","","Print with somewhat pretty formatting.",69,{"inputs":[{"name":"print"},{"name":"w"}],"output":{"name":"result"}}],[11,"compact_print","","Print with less whitespace.",69,{"inputs":[{"name":"print"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Create a new formatter from a writer.",70,{"inputs":[{"name":"w"},{"name":"bool"}],"output":{"name":"formatter"}}],[11,"new_line","","Start a new line if pretty printing is enabled.",70,{"inputs":[{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","Write something to the writer.",70,{"inputs":[{"name":"formatter"},{"name":"c"}],"output":{"name":"result"}}],[11,"indented","","Create an indented formatter.",70,{"inputs":[{"name":"formatter"}],"output":{"name":"indented"}}],[11,"write_fmt","","Write something formatted.",70,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"deref","","",71,{"inputs":[{"name":"indented"}],"output":{"name":"formatter"}}],[11,"deref_mut","","",71,{"inputs":[{"name":"indented"}],"output":{"name":"formatter"}}],[11,"drop","","",71,{"inputs":[{"name":"indented"}],"output":null}]],"paths":[[3,"Expressions"],[3,"StringLiteral"],[3,"RegularExpression"],[3,"PathExpression"],[3,"CallExpression"],[3,"VarDecl"],[3,"Catch"],[3,"Block"],[3,"FunctionBody"],[4,"NumericLiteral"],[4,"PrimaryExpression"],[4,"PropertyAssignment"],[4,"PropertyName"],[4,"Expression"],[4,"UnaryOp"],[4,"BinaryOp"],[4,"AssignmentOp"],[4,"LhsExpression"],[4,"ValueExpression"],[4,"PathBase"],[4,"CallBase"],[4,"Access"],[4,"Statement"],[4,"CaseClause"],[4,"SourceElement"],[3,"InitAdapter"],[3,"IfAdapter"],[3,"ThenAdapter"],[3,"ForInLhsAdapter"],[3,"ForInRhsAdapter"],[3,"ForInStmtAdapter"],[3,"ReturnAdapter"],[3,"BlockBuilder"],[3,"StatementBuilder"],[3,"VarsBuilder"],[3,"IfBuilder"],[3,"SourceElementBuilder"],[3,"FnExprDecl"],[3,"PropAssignAdapter"],[3,"PropInitAdapter"],[3,"GetterAdapter"],[3,"GetterBodyAdapter"],[3,"SetterAdapter"],[3,"SetterBodyAdapter"],[3,"CallAdapter"],[3,"AssignAdapter"],[3,"AssignRhsAdapter"],[3,"BinaryLhsAdapter"],[3,"UnaryAdapter"],[3,"FnAccessAdapter"],[3,"FnExprAdapter"],[8,"PathType"],[3,"ExpressionBuilder"],[3,"PathBuilder"],[3,"PathBaseBuilder"],[3,"ExpressionsBuilder"],[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"PropNameBuilder"],[3,"ValueExprBuilder"],[3,"LhsExprBuilder"],[3,"BinaryExprBuilder"],[3,"FnCall"],[3,"FnAdapter"],[3,"FnArgnamesBuilder"],[3,"FnBodyBuilder"],[3,"FnCallBuilder"],[8,"Build"],[3,"Script"],[8,"Print"],[3,"Formatter"],[3,"Indented"]]};
initSearch(searchIndex);
