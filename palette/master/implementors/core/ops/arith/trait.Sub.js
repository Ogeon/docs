(function() {var implementors = {};
implementors["palette"] = [{"text":"impl&lt;C:&nbsp;Sub, T:&nbsp;Float&gt; Sub&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float, C:&nbsp;Sub&lt;T&gt;&gt; Sub&lt;T&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Sub, T:&nbsp;Float&gt; Sub&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub + Clone, C:&nbsp;Sub&lt;T&gt;&gt; Sub&lt;T&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Hsl&lt;S, T&gt;&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Hsv&lt;S, T&gt;&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Hwb&lt;S, T&gt;&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Lch&lt;Wp, T&gt;&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;LabHue&lt;T&gt;&gt; for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;T&gt; for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sub&lt;LabHue&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;LabHue&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;RgbHue&lt;T&gt;&gt; for RgbHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;T&gt; for RgbHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sub&lt;RgbHue&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;RgbHue&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()