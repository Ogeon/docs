(function() {var implementors = {};
implementors["palette"] = [{"text":"impl&lt;C, T&gt; RelativeEq&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RelativeEq&lt;Epsilon = T::Epsilon&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RelativeEq + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RelativeEq&lt;Range&lt;T&gt;&gt; for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RelativeEq + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C, T&gt; RelativeEq&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RelativeEq&lt;Epsilon = T::Epsilon&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; RelativeEq&lt;Hsl&lt;S, T&gt;&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float + FromF64,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; RelativeEq&lt;Hsv&lt;S, T&gt;&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float + FromF64,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; RelativeEq&lt;Hwb&lt;S, T&gt;&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float + FromF64,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; RelativeEq&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; RelativeEq&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; RelativeEq&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; RelativeEq&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; RelativeEq&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; RelativeEq&lt;Lch&lt;Wp, T&gt;&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FloatComponent + RelativeEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + FloatComponent,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + FromF64 + RelativeEq&gt; RelativeEq&lt;LabHue&lt;T&gt;&gt; for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Float + FromF64,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + FromF64 + RelativeEq&gt; RelativeEq&lt;RgbHue&lt;T&gt;&gt; for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Float + FromF64,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()