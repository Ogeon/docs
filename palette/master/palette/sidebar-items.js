initSidebarItems({"enum":[["Color","A generic color type."]],"mod":[["gradient","Types for interpolation between multiple colors."],["pixel","Pixel encodings and pixel format conversion."]],"struct":[["Alpha","An alpha component wrapper for colors."],["Hsl","Linear HSL color space."],["Hsv","Linear HSV color space."],["Lab","The CIE L*a*b* (CIELAB) color space."],["LabHue","A hue type for the CIE L*a*b* family of color spaces."],["Lch","CIE L*C*h°, a polar version of CIE L*a*b*."],["Luma","Linear luminance."],["Rgb","Linear RGB."],["RgbHue","A hue type for the RGB family of color spaces."],["Xyz","The CIE 1931 XYZ color space."],["Yxy","The CIE 1931 Yxy (xyY)  color space."]],"trait":[["GetHue","A trait for colors where a hue may be calculated."],["Hue","A trait for colors where the hue can be manipulated without conversion."],["Limited","A trait for clamping and checking if colors are within their ranges."],["Mix","A trait for linear color interpolation."],["Saturate","A trait for colors where the saturation (or chroma) can be manipulated without conversion."],["Shade","The `Shade` trait allows a color to be lightened or darkened."]],"type":[["Colora","Generic color with an alpha component. See the `Colora` implementation in `Alpha`."],["Hsla","Linear HSL with an alpha component. See the `Hsla` implementation in `Alpha`."],["Hsva","Linear HSV with an alpha component. See the `Hsva` implementation in `Alpha`."],["Laba","CIE L*a*b* (CIELAB) with an alpha component. See the `Laba` implementation in `Alpha`."],["Lcha","CIE L*C*h° with an alpha component. See the `Lcha` implementation in `Alpha`."],["Lumaa","Linear luminance with an alpha component. See the `Lumaa` implementation in `Alpha`."],["Rgba","Linear RGB with an alpha component. See the `Rgba` implementation in `Alpha`."],["Xyza","CIE 1931 XYZ with an alpha component. See the `Xyza` implementation in `Alpha`."],["Yxya","CIE 1931 Yxy (xyY) with an alpha component. See the `Yxya` implementation in `Alpha`."]]});