var searchIndex = {};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"inputs":[],"output":{"name":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",15,null],[10,"inv","","Returns the multiplicative inverse of `self`.",15,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",16,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",16,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",17,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns negative infinity.",17,{"inputs":[],"output":{"name":"self"}}],[10,"nan","","Returns NaN.",17,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",17,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",17,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",17,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",17,{"inputs":[],"output":{"name":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",17,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trunc","","Return the integer part of a number.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fract","","Returns the fractional part of a number.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","Returns the maximum of the two numbers.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"powi","","Raise a number to an integer power.",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",17,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",18,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",18,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",18,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",18,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",18,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",18,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",18,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",19,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",19,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",19,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",20,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",26,null],[10,"pow","","Returns `self` to the power `rhs`.",26,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",27,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",27,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"Bounded"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Real"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Pow"],[8,"Num"]]};
searchIndex["palette"] = {"doc":"A library that makes linear color calculations and conversion easy and accessible for anyone. It provides both precision tools that lets you work in exactly the color space you want to, as well as a general color type that abstracts away some of the technical details.","items":[[3,"Alpha","palette","An alpha component wrapper for colors.",null,null],[12,"color","","The color.",0,null],[12,"alpha","","The transparency component. 0.0 is fully transparent and 1.0 is fully opaque.",0,null],[3,"Luma","","Linear luminance.",null,null],[12,"luma","","The lightness of the color. 0.0 is black and 1.0 is white.",1,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",1,null],[3,"Xyz","","The CIE 1931 XYZ color space.",null,null],[12,"x","","X is the scale of what can be seen as a response curve for the cone cells in the human eye. Its range depends on the white point and goes from 0.0 to 0.95047 for the default D65.",2,null],[12,"y","","Y is the luminance of the color, where 0.0 is black and 1.0 is white.",2,null],[12,"z","","Z is the scale of what can be seen as the blue stimulation. Its range depends on the white point and goes from 0.0 to 1.08883 for the defautl D65.",2,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",2,null],[3,"Lab","","The CIE L*a*b* (CIELAB) color space.",null,null],[12,"l","","L* is the lightness of the color. 0.0 gives absolute black and 100 give the brightest white.",3,null],[12,"a","","a* goes from red at -128 to green at 127.",3,null],[12,"b","","b* goes from yellow at -128 to blue at 127.",3,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",3,null],[3,"Lch","","CIE L*C*h°, a polar version of CIE L*a*b*.",null,null],[12,"l","","L* is the lightness of the color. 0.0 gives absolute black and 100.0 gives the brightest white.",4,null],[12,"chroma","","C* is the colorfulness of the color. It's similar to saturation. 0.0 gives gray scale colors, and numbers around 128-181 gives fully saturated colors. The upper limit of 128 should include the whole L*a*b* space and some more.",4,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc.",4,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",4,null],[3,"Hsv","","Linear HSV color space.",null,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc.",5,null],[12,"saturation","","The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors.",5,null],[12,"value","","Decides how bright the color will look. 0.0 will be black, and 1.0 will give a bright an clear color that goes towards white when `saturation` goes towards 0.0.",5,null],[12,"space","","The white point and RGB primaries this color is adapted to. The default is the sRGB standard.",5,null],[3,"Hsl","","Linear HSL color space.",null,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc.",6,null],[12,"saturation","","The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors.",6,null],[12,"lightness","","Decides how light the color will look. 0.0 will be black, 0.5 will give a clear color, and 1.0 will give white.",6,null],[12,"space","","The white point and RGB primaries this color is adapted to. The default is the sRGB standard.",6,null],[3,"Yxy","","The CIE 1931 Yxy (xyY)  color space.",null,null],[12,"x","","x chromacity co-ordinate derived from XYZ color space as X/(X+Y+Z). Typical range is between 0 and 1",7,null],[12,"y","","y chromacity co-ordinate derived from XYZ color space as Y/(X+Y+Z). Typical range is between 0 and 1",7,null],[12,"luma","","luma (Y) was a measure of the brightness or luminance of a color. It is the same as the Y from the XYZ color space. Its range is from 0 to 1, where 0 is black and 1 is white.",7,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",7,null],[3,"Hwb","","Linear HWB color space.",null,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc. Same as the hue for HSL and HSV.",8,null],[12,"whiteness","","The whiteness of the color. It specifies the amount white to mix into the hue. It varies from 0 to 1, with 1 being always full white and 0 always being the color shade (a mixture of a pure hue with black) chosen with the other two controls.",8,null],[12,"blackness","","The blackness of the color. It specifies the amount black to mix into the hue. It varies from 0 to 1, with 1 being always full black and 0 always being the color tint (a mixture of a pure hue with white) chosen with the other two",8,null],[12,"space","","The white point and RGB primaries this color is adapted to. The default is the sRGB standard.",8,null],[3,"LabHue","","A hue type for the CIE L*a*b* family of color spaces.",null,null],[3,"RgbHue","","A hue type for the RGB family of color spaces.",null,null],[4,"Color","","A generic color type.",null,null],[13,"Luma","","Linear luminance.",9,null],[13,"Rgb","","Linear RGB.",9,null],[13,"Xyz","","CIE 1931 XYZ.",9,null],[13,"Yxy","","CIE 1931 Yxy.",9,null],[13,"Lab","","CIE L*a*b* (CIELAB).",9,null],[13,"Lch","","CIE L*C*h°, a polar version of CIE L*a*b*.",9,null],[13,"Hsv","","Linear HSV, a cylindrical version of RGB.",9,null],[13,"Hsl","","Linear HSL, a cylindrical version of RGB.",9,null],[13,"Hwb","","Linear HWB, an intuitive cylindrical version of RGB.",9,null],[0,"gradient","","Types for interpolation between multiple colors.",null,null],[3,"Gradient","palette::gradient","A linear interpolation between colors.",null,null],[3,"Take","","An iterator over interpolated colors.",null,null],[3,"Slice","","A slice of a Gradient that limits its domain.",null,null],[3,"Range","","A domain range for gradient slices.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a gradient of evenly spaced colors with the domain [0.0, 1.0]. There must be at least one color.",10,{"inputs":[{"name":"i"}],"output":{"name":"gradient"}}],[11,"with_domain","","Create a gradient of colors with custom spacing and domain. There must be at least one color and they are expected to be ordered by their position value.",10,{"inputs":[{"name":"vec"}],"output":{"name":"gradient"}}],[11,"get","","Get a color from the gradient. The color of the closest control point will be returned if `i` is outside the domain.",10,null],[11,"take","","Take `n` evenly spaced colors from the gradient, as an iterator.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"slice","","Slice this gradient to limit its domain.",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"slice"}}],[11,"domain","","Get the limits of this gradient's domain.",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Get a color from the gradient slice. The color of the closest domain limit will be returned if `i` is outside the domain.",12,null],[11,"take","","Take `n` evenly spaced colors from the gradient slice, as an iterator.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"slice","","Slice this gradient slice to further limit its domain. Ranges outside the domain will be clamped to the nearest domain limit.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"slice"}}],[11,"domain","","Get the limits of this gradient slice's domain.",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"from","","",13,{"inputs":[{"name":"rangefrom"}],"output":{"name":"range"}}],[11,"from","","",13,{"inputs":[{"name":"rangeto"}],"output":{"name":"range"}}],[11,"from","","",13,{"inputs":[{"name":"rangefull"}],"output":{"name":"range"}}],[11,"default_epsilon","","",13,null],[11,"default_max_relative","","",13,null],[11,"default_max_ulps","","",13,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",13,null],[11,"ulps_eq","","",13,null],[0,"pixel","palette","Pixel encodings and pixel format conversion.",null,null],[8,"TransferFn","palette::pixel","A transfer function to and from linear space.",null,null],[10,"from_linear","","Convert the color component `x` from linear space.",14,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[10,"into_linear","","Convert the color component `x` into linear space.",14,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"RgbPixel","","A conversion trait for RGB pixel formats.",null,null],[10,"from_rgba","","Create an instance of `Self` from red, green, blue and alpha values. These can be assumed to already be gamma corrected and belongs to the range [0.0, 1.0].",15,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[10,"to_rgba","","Convert the red, green, blue and alpha values of `self` to values in the range [0.0, 1.0]. No gamma correction should be performed.",15,null],[0,"blend","palette","Color blending and blending equations.",null,null],[3,"Equations","palette::blend","A pair of blending equations and corresponding parameters.",null,null],[12,"color_equation","","The equation for the color components.",16,null],[12,"alpha_equation","","The equation for the alpha component.",16,null],[12,"color_parameters","","The parameters for the color components.",16,null],[12,"alpha_parameters","","The parameters for the alpha component.",16,null],[3,"Parameters","","A pair of source and destination parameters.",null,null],[12,"source","","The source parameter.",17,null],[12,"destination","","The destination parameter.",17,null],[3,"PreAlpha","","Premultiplied alpha wrapper.",null,null],[12,"color","","The premultiplied color components (`original.color * original.alpha`).",18,null],[12,"alpha","","The transparency component. 0.0 is fully transparent and 1.0 is fully opaque.",18,null],[4,"Equation","","A blending equation.",null,null],[13,"Add","","Add the source and destination, according to `sp * S + dp * D`.",19,null],[13,"Subtract","","Subtract the destination from the source, according to `sp * S - dp * D`.",19,null],[13,"ReverseSubtract","","Subtract the source from the destination, according to `dp * D - sp * S`.",19,null],[13,"Min","","Create a color where each component is the smallest of each of the source and destination components. A.k.a. component wise min. The parameters are ignored.",19,null],[13,"Max","","Create a color where each component is the largest of each of the source and destination components. A.k.a. component wise max. The parameters are ignored.",19,null],[4,"Parameter","","A blending parameter.",null,null],[13,"One","","A simple 1.",20,null],[13,"Zero","","A simple 0.",20,null],[13,"SourceColor","","The source color, or alpha.",20,null],[13,"OneMinusSourceColor","","One minus the source color, or alpha.",20,null],[13,"DestinationColor","","The destination color, or alpha.",20,null],[13,"OneMinusDestinationColor","","One minus the destination color, or alpha.",20,null],[13,"SourceAlpha","","The source alpha.",20,null],[13,"OneMinusSourceAlpha","","One minus the source alpha.",20,null],[13,"DestinationAlpha","","The destination alpha.",20,null],[13,"OneMinusDestinationAlpha","","One minus the destination alpha.",20,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"equations"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"equations"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"equations"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_equations","","Create a pair of blending equations, where all the parameters are `One`.",16,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"equations"}}],[11,"from_parameters","","Create a pair of additive blending equations with the provided parameters.",16,{"inputs":[{"name":"parameter"},{"name":"parameter"}],"output":{"name":"equations"}}],[11,"apply_to","","",16,{"inputs":[{"name":"self"},{"name":"prealpha"},{"name":"prealpha"}],"output":{"name":"prealpha"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"parameters"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"parameters"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"parameters"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parameter"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prealpha"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"alpha"}],"output":{"name":"prealpha"}}],[11,"from","palette","",0,{"inputs":[{"name":"prealpha"}],"output":{"name":"alpha"}}],[11,"into_premultiplied","palette::blend","",18,{"inputs":[{"name":"self"}],"output":{"name":"prealpha"}}],[11,"from_premultiplied","","",18,{"inputs":[{"name":"prealpha"}],"output":{"name":"prealpha"}}],[11,"mix","","",18,null],[11,"component_wise","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"},{"name":"f"}],"output":{"name":"prealpha"}}],[11,"component_wise_self","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"prealpha"}}],[11,"default_epsilon","","",18,null],[11,"default_max_relative","","",18,null],[11,"default_max_ulps","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",18,null],[11,"ulps_eq","","",18,null],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"}],"output":{"name":"prealpha"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"prealpha"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"}],"output":{"name":"prealpha"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"prealpha"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"}],"output":{"name":"prealpha"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"prealpha"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"prealpha"}],"output":{"name":"prealpha"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"prealpha"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[8,"Blend","","A trait for colors that can be blended together.",null,null],[16,"Color","","The core color type. Typically `Self` for color types without alpha.",21,null],[10,"into_premultiplied","","Convert the color to premultiplied alpha.",21,{"inputs":[{"name":"self"}],"output":{"name":"prealpha"}}],[10,"from_premultiplied","","Convert the color from premultiplied alpha.",21,{"inputs":[{"name":"prealpha"}],"output":{"name":"self"}}],[11,"blend","","Blend self, as the source color, with `destination`, using `blend_function`. Anything that implements `BlendFunction` is acceptable, including functions and closures.",21,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"over","","Place `self` over `other`. This is the good old common alpha composition equation.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inside","","Results in the parts of `self` that overlaps the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"outside","","Results in the parts of `self` that lies outside the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"atop","","Place `self` over only the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"xor","","Results in either `self` or `other`, where they do not overlap.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"plus","","Add `self` and `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise addition.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"multiply","","Multiply `self` with `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise multiplication.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"screen","","Make a color which is at least as light as `self` or `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overlay","","Multiply `self` or `other` if other is dark, or screen them if `other` is light. This results in an S curve.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"darken","","Return the darkest parts of `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lighten","","Return the lightest parts of `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"dodge","","Lighten `other` to reflect `self`. Results in `other` if `self` is black.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"burn","","Darken `other` to reflect `self`. Results in `other` if `self` is white.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"hard_light","","Multiply `self` or `other` if other is dark, or screen them if `self` is light. This is similar to `overlay`, but depends on `self` instead of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"soft_light","","Lighten `other` if `self` is light, or darken `other` as if it's burned if `self` is dark. The effect is increased if the components of `self` is further from 0.5.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"difference","","Return the absolute difference between `self` and `other`. It's basically `abs(self - other)`, but regulated by the alpha component.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"exclusion","","Similar to `difference`, but appears to result in a lower contrast. `other` is inverted if `self` is white, and preserved if `self` is black.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"BlendFunction","","A trait for custom blend functions.",null,null],[10,"apply_to","","Apply this blend function to a pair of colors.",22,{"inputs":[{"name":"self"},{"name":"prealpha"},{"name":"prealpha"}],"output":{"name":"prealpha"}}],[0,"named","palette","A collection of named color constants. Can be toggled with the `\"named\"` Cargo feature.",null,null],[5,"from_str","palette::named","Get a SVG/CSS3 color by name. Can be toggled with the `\"named_from_str\"` Cargo feature.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[17,"ALICEBLUE","","",null,null],[17,"ANTIQUEWHITE","","",null,null],[17,"AQUA","","",null,null],[17,"AQUAMARINE","","",null,null],[17,"AZURE","","",null,null],[17,"BEIGE","","",null,null],[17,"BISQUE","","",null,null],[17,"BLACK","","",null,null],[17,"BLANCHEDALMOND","","",null,null],[17,"BLUE","","",null,null],[17,"BLUEVIOLET","","",null,null],[17,"BROWN","","",null,null],[17,"BURLYWOOD","","",null,null],[17,"CADETBLUE","","",null,null],[17,"CHARTREUSE","","",null,null],[17,"CHOCOLATE","","",null,null],[17,"CORAL","","",null,null],[17,"CORNFLOWERBLUE","","",null,null],[17,"CORNSILK","","",null,null],[17,"CRIMSON","","",null,null],[17,"CYAN","","",null,null],[17,"DARKBLUE","","",null,null],[17,"DARKCYAN","","",null,null],[17,"DARKGOLDENROD","","",null,null],[17,"DARKGRAY","","",null,null],[17,"DARKGREEN","","",null,null],[17,"DARKGREY","","",null,null],[17,"DARKKHAKI","","",null,null],[17,"DARKMAGENTA","","",null,null],[17,"DARKOLIVEGREEN","","",null,null],[17,"DARKORANGE","","",null,null],[17,"DARKORCHID","","",null,null],[17,"DARKRED","","",null,null],[17,"DARKSALMON","","",null,null],[17,"DARKSEAGREEN","","",null,null],[17,"DARKSLATEBLUE","","",null,null],[17,"DARKSLATEGRAY","","",null,null],[17,"DARKSLATEGREY","","",null,null],[17,"DARKTURQUOISE","","",null,null],[17,"DARKVIOLET","","",null,null],[17,"DEEPPINK","","",null,null],[17,"DEEPSKYBLUE","","",null,null],[17,"DIMGRAY","","",null,null],[17,"DIMGREY","","",null,null],[17,"DODGERBLUE","","",null,null],[17,"FIREBRICK","","",null,null],[17,"FLORALWHITE","","",null,null],[17,"FORESTGREEN","","",null,null],[17,"FUCHSIA","","",null,null],[17,"GAINSBORO","","",null,null],[17,"GHOSTWHITE","","",null,null],[17,"GOLD","","",null,null],[17,"GOLDENROD","","",null,null],[17,"GRAY","","",null,null],[17,"GREY","","",null,null],[17,"GREEN","","",null,null],[17,"GREENYELLOW","","",null,null],[17,"HONEYDEW","","",null,null],[17,"HOTPINK","","",null,null],[17,"INDIANRED","","",null,null],[17,"INDIGO","","",null,null],[17,"IVORY","","",null,null],[17,"KHAKI","","",null,null],[17,"LAVENDER","","",null,null],[17,"LAVENDERBLUSH","","",null,null],[17,"LAWNGREEN","","",null,null],[17,"LEMONCHIFFON","","",null,null],[17,"LIGHTBLUE","","",null,null],[17,"LIGHTCORAL","","",null,null],[17,"LIGHTCYAN","","",null,null],[17,"LIGHTGOLDENRODYELLOW","","",null,null],[17,"LIGHTGRAY","","",null,null],[17,"LIGHTGREEN","","",null,null],[17,"LIGHTGREY","","",null,null],[17,"LIGHTPINK","","",null,null],[17,"LIGHTSALMON","","",null,null],[17,"LIGHTSEAGREEN","","",null,null],[17,"LIGHTSKYBLUE","","",null,null],[17,"LIGHTSLATEGRAY","","",null,null],[17,"LIGHTSLATEGREY","","",null,null],[17,"LIGHTSTEELBLUE","","",null,null],[17,"LIGHTYELLOW","","",null,null],[17,"LIME","","",null,null],[17,"LIMEGREEN","","",null,null],[17,"LINEN","","",null,null],[17,"MAGENTA","","",null,null],[17,"MAROON","","",null,null],[17,"MEDIUMAQUAMARINE","","",null,null],[17,"MEDIUMBLUE","","",null,null],[17,"MEDIUMORCHID","","",null,null],[17,"MEDIUMPURPLE","","",null,null],[17,"MEDIUMSEAGREEN","","",null,null],[17,"MEDIUMSLATEBLUE","","",null,null],[17,"MEDIUMSPRINGGREEN","","",null,null],[17,"MEDIUMTURQUOISE","","",null,null],[17,"MEDIUMVIOLETRED","","",null,null],[17,"MIDNIGHTBLUE","","",null,null],[17,"MINTCREAM","","",null,null],[17,"MISTYROSE","","",null,null],[17,"MOCCASIN","","",null,null],[17,"NAVAJOWHITE","","",null,null],[17,"NAVY","","",null,null],[17,"OLDLACE","","",null,null],[17,"OLIVE","","",null,null],[17,"OLIVEDRAB","","",null,null],[17,"ORANGE","","",null,null],[17,"ORANGERED","","",null,null],[17,"ORCHID","","",null,null],[17,"PALEGOLDENROD","","",null,null],[17,"PALEGREEN","","",null,null],[17,"PALETURQUOISE","","",null,null],[17,"PALEVIOLETRED","","",null,null],[17,"PAPAYAWHIP","","",null,null],[17,"PEACHPUFF","","",null,null],[17,"PERU","","",null,null],[17,"PINK","","",null,null],[17,"PLUM","","",null,null],[17,"POWDERBLUE","","",null,null],[17,"PURPLE","","",null,null],[17,"REBECCAPURPLE","","",null,null],[17,"RED","","",null,null],[17,"ROSYBROWN","","",null,null],[17,"ROYALBLUE","","",null,null],[17,"SADDLEBROWN","","",null,null],[17,"SALMON","","",null,null],[17,"SANDYBROWN","","",null,null],[17,"SEAGREEN","","",null,null],[17,"SEASHELL","","",null,null],[17,"SIENNA","","",null,null],[17,"SILVER","","",null,null],[17,"SKYBLUE","","",null,null],[17,"SLATEBLUE","","",null,null],[17,"SLATEGRAY","","",null,null],[17,"SLATEGREY","","",null,null],[17,"SNOW","","",null,null],[17,"SPRINGGREEN","","",null,null],[17,"STEELBLUE","","",null,null],[17,"TAN","","",null,null],[17,"TEAL","","",null,null],[17,"THISTLE","","",null,null],[17,"TOMATO","","",null,null],[17,"TURQUOISE","","",null,null],[17,"VIOLET","","",null,null],[17,"WHEAT","","",null,null],[17,"WHITE","","",null,null],[17,"WHITESMOKE","","",null,null],[17,"YELLOW","","",null,null],[17,"YELLOWGREEN","","",null,null],[11,"clone","palette","",0,{"inputs":[{"name":"self"}],"output":{"name":"alpha"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"alpha"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"alpha"}],"output":{"name":"bool"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"mix","","",0,null],[11,"lighten","","",0,null],[11,"get_hue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_hue","","",0,null],[11,"shift_hue","","",0,null],[11,"saturate","","",0,null],[11,"is_valid","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",0,{"inputs":[{"name":"self"}],"output":{"name":"alpha"}}],[11,"clamp_self","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_premultiplied","","",0,{"inputs":[{"name":"self"}],"output":{"name":"prealpha"}}],[11,"from_premultiplied","","",0,{"inputs":[{"name":"prealpha"}],"output":{"name":"alpha"}}],[11,"component_wise","","",0,{"inputs":[{"name":"self"},{"name":"alpha"},{"name":"f"}],"output":{"name":"alpha"}}],[11,"component_wise_self","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"alpha"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"alpha"}}],[11,"default_epsilon","","",0,null],[11,"default_max_relative","","",0,null],[11,"default_max_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",0,null],[11,"ulps_eq","","",0,null],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"alpha"}],"output":{"name":"alpha"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"alpha"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"alpha"}],"output":{"name":"alpha"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"alpha"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"alpha"}],"output":{"name":"alpha"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"alpha"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"alpha"}],"output":{"name":"alpha"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"c"}],"output":{"name":"alpha"}}],[0,"rgb","","RGB types, spaces and standards.",null,null],[3,"Rgb","palette::rgb","Generic RGB.",null,null],[12,"red","","The amount of red light, where 0.0 is no red light and 1.0 is the highest displayable amount.",23,null],[12,"green","","The amount of green light, where 0.0 is no green light and 1.0 is the highest displayable amount.",23,null],[12,"blue","","The amount of blue light, where 0.0 is no blue light and 1.0 is the highest displayable amount.",23,null],[12,"standard","","The kind of RGB standard. sRGB is the default.",23,null],[0,"standards","","Various RGB standards.",null,null],[0,"srgb","palette::rgb::standards","The sRGB standard.",null,null],[3,"Srgb","palette::rgb::standards::srgb","The sRGB color space.",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"srgb"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"red","","",24,{"inputs":[],"output":{"name":"yxy"}}],[11,"green","","",24,{"inputs":[],"output":{"name":"yxy"}}],[11,"blue","","",24,{"inputs":[],"output":{"name":"yxy"}}],[11,"into_linear","","",24,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[11,"from_linear","","",24,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"gamma","palette::rgb::standards","Gamma encoded RGB.",null,null],[3,"Gamma","palette::rgb::standards::gamma","Gamma encoding.",null,null],[3,"GammaFn","","The transfer function for gamma encoded colors.",null,null],[3,"F2p2","","Represents `2.2f32`.",null,null],[8,"Number","","A type level float constant.",null,null],[18,"VALUE","","The represented number.",25,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"gamma"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"gamma"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"gammafn"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"gammafn"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"gammafn"}],"output":{"name":"bool"}}],[11,"into_linear","","",27,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[11,"from_linear","","",27,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"f2p2"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"f2p2"}],"output":{"name":"bool"}}],[0,"linear","palette::rgb::standards","Linear RGB",null,null],[3,"Linear","palette::rgb::standards::linear","A generic RGB standard with linear components.",null,null],[3,"LinearFn","","Linear color component encoding.",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"linear"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"linear"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"linear"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"linearfn"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"linearfn"}],"output":{"name":"bool"}}],[11,"into_linear","","",30,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[11,"from_linear","","",30,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[11,"fmt","palette::rgb","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"new","","Create an RGB color.",23,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"new_u8","","Create an RGB color from 8 bit values.",23,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgb"}}],[11,"from_pixel","","Create an RGB color from a pixel.",23,{"inputs":[{"name":"p"}],"output":{"name":"rgb"}}],[11,"into_pixel","","Convert the color into a pixel representation.",23,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"into_linear","","Convert the color to linear RGB.",23,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from_linear","","Convert linear RGB to nonlinear RGB.",23,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"rgb"}}],[11,"linear_to_pixel","","Convert a linear color to an RGB pixel.",23,{"inputs":[{"name":"c"}],"output":{"name":"p"}}],[11,"pixel_to_linear","","Convert an RGB pixel to a linear color.",23,{"inputs":[{"name":"p"}],"output":{"name":"c"}}],[11,"new","palette","Nonlinear RGB.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"new_u8","","Nonlinear RGB with transparency from 8 bit values.",0,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgba"}}],[11,"from_pixel","","Create an RGB color with transparency from a pixel.",0,{"inputs":[{"name":"p"}],"output":{"name":"rgba"}}],[11,"into_pixel","","Convert the color into a pixel representation.",0,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"into_linear","","Convert the color to linear RGB with transparency.",0,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgba"}}],[11,"from_linear","","Convert linear RGB to nonlinear RGB with transparency.",0,{"inputs":[{"generics":["linear"],"name":"rgba"}],"output":{"name":"rgba"}}],[11,"linear_to_pixel","","Convert a linear color to an RGB pixel.",0,{"inputs":[{"name":"c"}],"output":{"name":"p"}}],[11,"pixel_to_linear","","Convert an RGB pixel to a linear color.",0,{"inputs":[{"name":"p"}],"output":{"name":"c"}}],[11,"is_valid","palette::rgb","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",23,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"clamp_self","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",23,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"lighten","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"get_hue","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["rgbhue"],"name":"option"}}],[11,"into_premultiplied","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["rgb"],"name":"prealpha"}}],[11,"from_premultiplied","","",23,{"inputs":[{"generics":["rgb"],"name":"prealpha"}],"output":{"name":"self"}}],[11,"component_wise","","",23,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"component_wise_self","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"rgb"}}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"mul","","",23,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"mul","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"div","","",23,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"div","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_xyz","","",23,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_rgb","","",23,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"self"}}],[11,"from_hsl","","",23,{"inputs":[{"name":"hsl"}],"output":{"name":"self"}}],[11,"from_hsv","","",23,{"inputs":[{"name":"hsv"}],"output":{"name":"self"}}],[11,"from_luma","","",23,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"into_xyz","","",23,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",23,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",23,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",23,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_hwb","","",23,{"inputs":[{"name":"self"}],"output":{"name":"hwb"}}],[11,"into_luma","","",23,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"default_epsilon","","",23,null],[11,"default_max_relative","","",23,null],[11,"default_max_ulps","","",23,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",23,null],[11,"ulps_eq","","",23,null],[11,"from","","",23,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"rgb"}}],[6,"Rgba","","Generic RGB with an alpha component. See the `Rgba` implementation in `Alpha`.",null,null],[6,"Srgb","","Nonlinear sRGB.",null,null],[6,"Srgba","","Nonlinear sRGB with an alpha component.",null,null],[6,"LinSrgb","","Linear sRGB.",null,null],[6,"LinSrgba","","Linear sRGB with an alpha component.",null,null],[6,"GammaSrgb","","Gamma 2.2 encoded sRGB.",null,null],[6,"GammaSrgba","","Gamma 2.2 encoded sRGB with an alpha component.",null,null],[8,"RgbStandard","","An RGB space and a transfer function.",null,null],[16,"Space","","The RGB color space.",31,null],[16,"TransferFn","","The transfer function for the color components.",31,null],[8,"RgbSpace","","A set of primaries and a white point.",null,null],[16,"Primaries","","The primaries of the RGB color space.",32,null],[16,"WhitePoint","","The white point of the RGB color space.",32,null],[8,"Primaries","","Represents the red, green and blue primaries of an RGB space.",null,null],[10,"red","","Primary red.",33,{"inputs":[],"output":{"name":"yxy"}}],[10,"green","","Primary green.",33,{"inputs":[],"output":{"name":"yxy"}}],[10,"blue","","Primary blue.",33,{"inputs":[],"output":{"name":"yxy"}}],[11,"fmt","palette","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"new","","Linear luminance with white point D65.",1,{"inputs":[{"name":"t"}],"output":{"generics":["d65"],"name":"luma"}}],[11,"new_u8","","Linear luminance from an 8 bit value with white point D65.",1,{"inputs":[{"name":"u8"}],"output":{"generics":["d65"],"name":"luma"}}],[11,"with_wp","","Linear luminance.",1,{"inputs":[{"name":"t"}],"output":{"name":"luma"}}],[11,"with_wp_u8","","Linear luminance from an 8 bit value.",1,{"inputs":[{"name":"u8"}],"output":{"name":"luma"}}],[11,"new","","Linear luminance with transparency and white point D65.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"lumaa"}}],[11,"new_u8","","Linear luminance and transparency from 8 bit values and white point D65.",0,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"generics":["d65"],"name":"lumaa"}}],[11,"with_wp","","Linear luminance with transparency.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"with_wp_u8","","Linear luminance and transparency from 8 bit values.",0,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"lumaa"}}],[11,"from_xyz","","",1,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_yxy","","",1,{"inputs":[{"name":"yxy"}],"output":{"name":"self"}}],[11,"from_luma","","",1,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"is_valid","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"clamp_self","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",1,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"t"}],"output":{"name":"luma"}}],[11,"lighten","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"luma"}}],[11,"into_premultiplied","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["luma"],"name":"prealpha"}}],[11,"from_premultiplied","","",1,{"inputs":[{"generics":["luma"],"name":"prealpha"}],"output":{"name":"self"}}],[11,"component_wise","","",1,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"component_wise_self","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"luma"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"luma"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"luma"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"luma"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"luma"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"luma"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"luma"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"luma"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from","","",1,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"yxy"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"yxy"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"new","","CIE Yxy with white point D65.",7,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"yxy"}}],[11,"with_wp","","CIE Yxy.",7,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"new","","CIE Yxy and transparency with white point D65.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"yxya"}}],[11,"with_wp","","CIE Yxy and transparency.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"yxya"}}],[11,"from_xyz","","",7,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_yxy","","",7,{"inputs":[{"name":"yxy"}],"output":{"name":"self"}}],[11,"from_luma","","",7,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"is_valid","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",7,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"clamp_self","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",7,{"inputs":[{"name":"self"},{"name":"yxy"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"lighten","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"component_wise","","",7,{"inputs":[{"name":"self"},{"name":"yxy"},{"name":"f"}],"output":{"name":"yxy"}}],[11,"component_wise_self","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"yxy"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"yxy"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"yxy"}],"output":{"name":"yxy"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"yxy"}],"output":{"name":"yxy"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"yxy"}],"output":{"name":"yxy"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"yxy"}],"output":{"name":"yxy"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"yxy"}}],[11,"from","","",7,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"new","","CIE XYZ with whtie point D65.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"xyz"}}],[11,"with_wp","","CIE XYZ.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"new","","CIE Yxy and transparency with white point D65.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"xyza"}}],[11,"with_wp","","CIE XYZ and transparency.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"xyza"}}],[11,"from_xyz","","",2,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_rgb","","",2,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"self"}}],[11,"from_yxy","","",2,{"inputs":[{"name":"yxy"}],"output":{"name":"self"}}],[11,"from_lab","","",2,{"inputs":[{"name":"lab"}],"output":{"name":"self"}}],[11,"from_luma","","",2,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"is_valid","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",2,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"clamp_self","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",2,{"inputs":[{"name":"self"},{"name":"xyz"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"lighten","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"component_wise","","",2,{"inputs":[{"name":"self"},{"name":"xyz"},{"name":"f"}],"output":{"name":"xyz"}}],[11,"component_wise_self","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"xyz"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"xyz"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"xyz"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"xyz"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"xyz"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"xyz"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"xyz"}}],[11,"from","","",2,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"lab"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"lab"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"new","","CIE L*a*b* with white point D65.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"lab"}}],[11,"with_wp","","CIE L*a*b*.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lab"}}],[11,"new","","CIE L*a*b* and transparency and white point D65.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["d65"],"name":"laba"}}],[11,"with_wp","","CIE L*a*b* and transparency.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"laba"}}],[11,"from_xyz","","",3,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_lab","","",3,{"inputs":[{"name":"lab"}],"output":{"name":"self"}}],[11,"from_lch","","",3,{"inputs":[{"name":"lch"}],"output":{"name":"self"}}],[11,"is_valid","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"clamp_self","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",3,{"inputs":[{"name":"self"},{"name":"lab"},{"name":"t"}],"output":{"name":"lab"}}],[11,"lighten","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lab"}}],[11,"get_hue","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["labhue"],"name":"option"}}],[11,"component_wise","","",3,{"inputs":[{"name":"self"},{"name":"lab"},{"name":"f"}],"output":{"name":"lab"}}],[11,"component_wise_self","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"lab"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"lab"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"lab"}],"output":{"name":"lab"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lab"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"lab"}],"output":{"name":"lab"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lab"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"lab"}],"output":{"name":"lab"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lab"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"lab"}],"output":{"name":"lab"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lab"}}],[11,"from","","",3,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lch"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lch"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"new","","CIE L*C*h° with white point D65.",4,{"inputs":[{"name":"t"},{"name":"t"},{"name":"labhue"}],"output":{"generics":["d65"],"name":"lch"}}],[11,"with_wp","","CIE L*C*h°.",4,{"inputs":[{"name":"t"},{"name":"t"},{"name":"labhue"}],"output":{"name":"lch"}}],[11,"new","","CIE L*C*h° and transparency with white point D65.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"labhue"},{"name":"t"}],"output":{"generics":["d65"],"name":"lcha"}}],[11,"with_wp","","CIE L*C*h° and transparency.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"labhue"},{"name":"t"}],"output":{"name":"lcha"}}],[11,"from_xyz","","",4,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_lab","","",4,{"inputs":[{"name":"lab"}],"output":{"name":"self"}}],[11,"from_lch","","",4,{"inputs":[{"name":"lch"}],"output":{"name":"self"}}],[11,"is_valid","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"clamp_self","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",4,{"inputs":[{"name":"self"},{"name":"lch"},{"name":"t"}],"output":{"name":"lch"}}],[11,"lighten","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lch"}}],[11,"get_hue","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["labhue"],"name":"option"}}],[11,"with_hue","","",4,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"lch"}}],[11,"shift_hue","","",4,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"lch"}}],[11,"saturate","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lch"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"lch"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"lch"}],"output":{"name":"lch"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lch"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"lch"}],"output":{"name":"lch"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lch"}}],[11,"from","","",4,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"hsv"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"hsv"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"new","","HSV for linear sRGB.",5,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"hsv"}}],[11,"with_wp","","Linear HSV.",5,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"name":"hsv"}}],[11,"new","","HSV and transparency for linear sRGB.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"hsva"}}],[11,"with_wp","","Linear HSV and transparency.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"hsva"}}],[11,"from_xyz","","",5,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_rgb","","",5,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"self"}}],[11,"from_hsl","","",5,{"inputs":[{"name":"hsl"}],"output":{"name":"self"}}],[11,"from_hsv","","",5,{"inputs":[{"name":"hsv"}],"output":{"name":"self"}}],[11,"from_hwb","","",5,{"inputs":[{"name":"hwb"}],"output":{"name":"self"}}],[11,"is_valid","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",5,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"clamp_self","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",5,{"inputs":[{"name":"self"},{"name":"hsv"},{"name":"t"}],"output":{"name":"hsv"}}],[11,"lighten","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsv"}}],[11,"get_hue","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["rgbhue"],"name":"option"}}],[11,"with_hue","","",5,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"hsv"}}],[11,"shift_hue","","",5,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"hsv"}}],[11,"saturate","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsv"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"hsv"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"hsv"}],"output":{"name":"hsv"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsv"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"hsv"}],"output":{"name":"hsv"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"default_epsilon","","",5,null],[11,"default_max_relative","","",5,null],[11,"default_max_ulps","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",5,null],[11,"ulps_eq","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"hsl"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"hsl"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"new","","HSL for linear sRGB.",6,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"hsl"}}],[11,"with_wp","","Linear HSL.",6,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"name":"hsl"}}],[11,"new","","HSL and transparency for linear sRGB.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"hsla"}}],[11,"with_wp","","Linear HSL and transparency.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"hsla"}}],[11,"from_xyz","","",6,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_rgb","","",6,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"self"}}],[11,"from_hsl","","",6,{"inputs":[{"name":"hsl"}],"output":{"name":"self"}}],[11,"from_hsv","","",6,{"inputs":[{"name":"hsv"}],"output":{"name":"self"}}],[11,"is_valid","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"clamp_self","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",6,{"inputs":[{"name":"self"},{"name":"hsl"},{"name":"t"}],"output":{"name":"hsl"}}],[11,"lighten","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsl"}}],[11,"get_hue","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["rgbhue"],"name":"option"}}],[11,"with_hue","","",6,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"hsl"}}],[11,"shift_hue","","",6,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"hsl"}}],[11,"saturate","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsl"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"hsl"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"hsl"}],"output":{"name":"hsl"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsl"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"hsl"}],"output":{"name":"hsl"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"default_epsilon","","",6,null],[11,"default_max_relative","","",6,null],[11,"default_max_ulps","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",6,null],[11,"ulps_eq","","",6,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"hwb"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"hwb"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hwb"}}],[11,"new","","HWB for linear sRGB.",8,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"hwb"}}],[11,"with_wp","","Linear HWB.",8,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"name":"hwb"}}],[11,"new","","HWB and transparency for linear sRGB.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"hwba"}}],[11,"with_wp","","Linear HWB and transparency.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"hwba"}}],[11,"from_xyz","","",8,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_hsv","","",8,{"inputs":[{"name":"hsv"}],"output":{"name":"self"}}],[11,"from_hwb","","",8,{"inputs":[{"name":"hwb"}],"output":{"name":"self"}}],[11,"is_valid","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clamp","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hwb"}}],[11,"clamp_self","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"mix","","",8,{"inputs":[{"name":"self"},{"name":"hwb"},{"name":"t"}],"output":{"name":"hwb"}}],[11,"lighten","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hwb"}}],[11,"get_hue","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["rgbhue"],"name":"option"}}],[11,"with_hue","","",8,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"hwb"}}],[11,"shift_hue","","",8,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"hwb"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"hwb"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"hwb"}],"output":{"name":"hwb"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hwb"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"hwb"}],"output":{"name":"hwb"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"default_epsilon","","",8,null],[11,"default_max_relative","","",8,null],[11,"default_max_ulps","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",8,null],[11,"ulps_eq","","",8,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"labhue"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"labhue"}}],[11,"from_radians","","Create a new hue from radians, instead of degrees.",34,{"inputs":[{"name":"t"}],"output":{"name":"labhue"}}],[11,"to_degrees","","Get the hue as degrees, in the range `(-180, 180]`.",34,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_radians","","Convert the hue to radians, in the range `(-π, π]`.",34,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_positive_degrees","","Convert the hue to positive degrees, in the range `[0, 360)`.",34,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_positive_radians","","Convert the hue to positive radians, in the range `[0, 2π)`.",34,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",34,{"inputs":[{"name":"t"}],"output":{"name":"labhue"}}],[11,"into","","",34,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"into","","",34,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",34,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add","","",34,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"labhue"}}],[11,"add","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"labhue"}}],[11,"sub","","",34,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"labhue"}}],[11,"sub","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"labhue"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"rgbhue"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"rgbhue"}}],[11,"from_radians","","Create a new hue from radians, instead of degrees.",35,{"inputs":[{"name":"t"}],"output":{"name":"rgbhue"}}],[11,"to_degrees","","Get the hue as degrees, in the range `(-180, 180]`.",35,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_radians","","Convert the hue to radians, in the range `(-π, π]`.",35,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_positive_degrees","","Convert the hue to positive degrees, in the range `[0, 360)`.",35,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_positive_radians","","Convert the hue to positive radians, in the range `[0, 2π)`.",35,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",35,{"inputs":[{"name":"t"}],"output":{"name":"rgbhue"}}],[11,"into","","",35,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"into","","",35,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",35,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add","","",35,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"rgbhue"}}],[11,"add","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgbhue"}}],[11,"sub","","",35,{"inputs":[{"name":"self"},{"name":"rgbhue"}],"output":{"name":"rgbhue"}}],[11,"sub","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgbhue"}}],[11,"into_xyz","","",2,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",2,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",2,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",7,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",7,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",7,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",7,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",7,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",3,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",3,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",4,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",4,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",4,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",1,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",1,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",6,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",6,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",6,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",5,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",5,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",5,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",5,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",5,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"into_xyz","","",8,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","",8,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","",8,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","",8,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_luma","","",8,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"from","","",2,{"inputs":[{"name":"color"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"name":"hsl"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",2,{"inputs":[{"name":"hsv"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",2,{"inputs":[{"name":"hwb"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",7,{"inputs":[{"name":"color"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"name":"hsl"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",7,{"inputs":[{"name":"hsv"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",7,{"inputs":[{"name":"hwb"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",3,{"inputs":[{"name":"color"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"name":"hsl"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",3,{"inputs":[{"name":"hsv"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",3,{"inputs":[{"name":"hwb"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",4,{"inputs":[{"name":"color"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"name":"hsl"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",4,{"inputs":[{"name":"hsv"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",4,{"inputs":[{"name":"hwb"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",1,{"inputs":[{"name":"color"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"name":"hsl"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",1,{"inputs":[{"name":"hsv"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",1,{"inputs":[{"name":"hwb"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","palette::rgb","",23,{"inputs":[{"name":"color"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"name":"color"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"name":"xyz"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"yxy"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"lab"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"lch"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"hsl"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"hsv"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"hwb"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","","",23,{"inputs":[{"name":"luma"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["rgb"],"name":"alpha"}}],[11,"from","palette::rgb","",23,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"from","palette","",6,{"inputs":[{"name":"color"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"name":"xyz"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"name":"yxy"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"name":"lab"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"name":"lch"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"name":"hsv"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"name":"hwb"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",6,{"inputs":[{"name":"luma"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",5,{"inputs":[{"name":"color"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"name":"xyz"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"name":"yxy"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"name":"lab"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"name":"lch"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"name":"hsl"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"name":"hwb"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hwb"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",5,{"inputs":[{"name":"luma"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",8,{"inputs":[{"name":"color"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"name":"color"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["color"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"name":"xyz"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"name":"yxy"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"name":"lab"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"name":"lch"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"name":"hsl"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsl"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"name":"hsv"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"hsv"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",8,{"inputs":[{"name":"luma"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",2,{"inputs":[{"name":"yxy"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",2,{"inputs":[{"name":"lab"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",2,{"inputs":[{"name":"lch"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",2,{"inputs":[{"name":"luma"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",7,{"inputs":[{"name":"xyz"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",7,{"inputs":[{"name":"lab"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",7,{"inputs":[{"name":"lch"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",7,{"inputs":[{"name":"luma"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",3,{"inputs":[{"name":"xyz"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",3,{"inputs":[{"name":"yxy"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",3,{"inputs":[{"name":"lch"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",3,{"inputs":[{"name":"luma"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",4,{"inputs":[{"name":"xyz"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",4,{"inputs":[{"name":"yxy"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",4,{"inputs":[{"name":"lab"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",4,{"inputs":[{"name":"luma"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"luma"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",1,{"inputs":[{"name":"xyz"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"xyz"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",1,{"inputs":[{"name":"yxy"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"yxy"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",1,{"inputs":[{"name":"lab"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lab"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",1,{"inputs":[{"name":"lch"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"lch"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"from","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"xyz"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["xyz"],"name":"alpha"}}],[11,"from","","",2,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"xyz"}}],[11,"from","","",7,{"inputs":[{"name":"rgb"}],"output":{"name":"yxy"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["yxy"],"name":"alpha"}}],[11,"from","","",7,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"yxy"}}],[11,"from","","",3,{"inputs":[{"name":"rgb"}],"output":{"name":"lab"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["lab"],"name":"alpha"}}],[11,"from","","",3,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"lab"}}],[11,"from","","",4,{"inputs":[{"name":"rgb"}],"output":{"name":"lch"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["lch"],"name":"alpha"}}],[11,"from","","",4,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"lch"}}],[11,"from","","",6,{"inputs":[{"name":"rgb"}],"output":{"name":"hsl"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["hsl"],"name":"alpha"}}],[11,"from","","",6,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"hsl"}}],[11,"from","","",5,{"inputs":[{"name":"rgb"}],"output":{"name":"hsv"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["hsv"],"name":"alpha"}}],[11,"from","","",5,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"hsv"}}],[11,"from","","",8,{"inputs":[{"name":"rgb"}],"output":{"name":"hwb"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["hwb"],"name":"alpha"}}],[11,"from","","",8,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"hwb"}}],[11,"from","","",1,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"generics":["luma"],"name":"alpha"}}],[11,"from","","",1,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"luma"}}],[11,"default_epsilon","","",2,null],[11,"default_max_relative","","",2,null],[11,"default_max_ulps","","",2,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",2,null],[11,"ulps_eq","","",2,null],[11,"relative_ne","","",2,null],[11,"ulps_ne","","",2,null],[11,"default_epsilon","","",7,null],[11,"default_max_relative","","",7,null],[11,"default_max_ulps","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",7,null],[11,"ulps_eq","","",7,null],[11,"relative_ne","","",7,null],[11,"ulps_ne","","",7,null],[11,"default_epsilon","","",3,null],[11,"default_max_relative","","",3,null],[11,"default_max_ulps","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",3,null],[11,"ulps_eq","","",3,null],[11,"relative_ne","","",3,null],[11,"ulps_ne","","",3,null],[11,"default_epsilon","","",1,null],[11,"default_max_relative","","",1,null],[11,"default_max_ulps","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",1,null],[11,"ulps_eq","","",1,null],[11,"relative_ne","","",1,null],[11,"ulps_ne","","",1,null],[11,"default_epsilon","","",4,null],[11,"default_max_relative","","",4,null],[11,"default_max_ulps","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",4,null],[11,"ulps_eq","","",4,null],[11,"relative_ne","","",4,null],[11,"ulps_ne","","",4,null],[11,"default_epsilon","","",34,null],[11,"default_max_relative","","",34,null],[11,"default_max_ulps","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",34,null],[11,"ulps_eq","","",34,null],[11,"relative_ne","","",34,null],[11,"ulps_ne","","",34,null],[11,"default_epsilon","","",35,null],[11,"default_max_relative","","",35,null],[11,"default_max_ulps","","",35,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",35,null],[11,"ulps_eq","","",35,null],[11,"relative_ne","","",35,null],[11,"ulps_ne","","",35,null],[0,"chromatic_adaptation","","Convert colors from one reference white point to another",null,null],[3,"ConeResponseMatrices","palette::chromatic_adaptation","Holds the matrix coeffecients for the chromatic adaptation methods",null,null],[12,"ma","","3x3 matrix for the cone response domains",36,null],[12,"inv_ma","","3x3 matrix for the inverse of the cone response domains",36,null],[4,"Method","","Chromatic adaptation methods implemented in the library",null,null],[13,"Bradford","","Bradford chromatic adaptation method",37,null],[13,"VonKries","","VonKries chromatic adaptation method",37,null],[13,"XyzScaling","","XyzScaling chromatic adaptation method",37,null],[8,"TransformMatrix","","Generates a conversion matrix to convert the Xyz trisitmilus values from one illuminant to another (Swp -> Dwp)",null,null],[10,"get_cone_response","","Get the cone response functions for the chromatic adaptation method",38,{"inputs":[{"name":"self"}],"output":{"name":"coneresponsematrices"}}],[11,"generate_transform_matrix","","Generates a 3x3 transformation matrix to convert color from one reference white point to another with the given cone_response",38,{"inputs":[{"name":"self"}],"output":{"name":"mat3"}}],[8,"AdaptFrom","","Trait to convert color from one reference white point to another",null,null],[11,"adapt_from","","Convert the source color to the destination color using the bradford method by default",39,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[10,"adapt_from_using","","Convert the source color to the destination color using the specified method",39,{"inputs":[{"name":"s"},{"name":"m"}],"output":{"name":"self"}}],[8,"AdaptInto","","Trait to convert color with one reference white point into another",null,null],[11,"adapt_into","","Convert the source color to the destination color using the bradford method by default",40,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[10,"adapt_into_using","","Convert the source color to the destination color using the specified method",40,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"d"}}],[11,"get_cone_response","","",37,{"inputs":[{"name":"self"}],"output":{"name":"coneresponsematrices"}}],[0,"white_point","palette","Defines the tristimulus values of the CIE Illuminants.",null,null],[3,"A","palette::white_point","CIE standard illuminant A",null,null],[3,"B","","CIE standard illuminant B",null,null],[3,"C","","CIE standard illuminant C",null,null],[3,"D50","","CIE D series standard illuminant - D50",null,null],[3,"D55","","CIE D series standard illuminant - D55",null,null],[3,"D65","","CIE D series standard illuminant - D65",null,null],[3,"D75","","CIE D series standard illuminant - D75",null,null],[3,"E","","CIE standard illuminant E",null,null],[3,"F2","","CIE fluorescent illuminant series - F2",null,null],[3,"F7","","CIE fluorescent illuminant series - F7",null,null],[3,"F11","","CIE fluorescent illuminant series - F11",null,null],[3,"D50Degree10","","CIE D series standard illuminant - D50",null,null],[3,"D55Degree10","","CIE D series standard illuminant - D55",null,null],[3,"D65Degree10","","CIE D series standard illuminant - D65",null,null],[3,"D75Degree10","","CIE D series standard illuminant - D75",null,null],[8,"WhitePoint","","WhitePoint defines the Xyz color co-ordinates for a given white point.",null,null],[10,"get_xyz","","Get the Xyz chromacity co-ordinates for the white point.",41,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"get_xyz","","",42,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"get_xyz","","",43,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_xyz","","",44,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"d50"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"d50"}],"output":{"name":"bool"}}],[11,"get_xyz","","",45,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"d55"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"d55"}],"output":{"name":"bool"}}],[11,"get_xyz","","",46,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"d65"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"d65"}],"output":{"name":"bool"}}],[11,"get_xyz","","",47,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"d75"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"d75"}],"output":{"name":"bool"}}],[11,"get_xyz","","",48,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"bool"}}],[11,"get_xyz","","",49,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"f2"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"f2"}],"output":{"name":"bool"}}],[11,"get_xyz","","",50,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"f7"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"f7"}],"output":{"name":"bool"}}],[11,"get_xyz","","",51,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"f11"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"f11"}],"output":{"name":"bool"}}],[11,"get_xyz","","",52,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"d50degree10"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"d50degree10"}],"output":{"name":"bool"}}],[11,"get_xyz","","",53,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"d55degree10"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"d55degree10"}],"output":{"name":"bool"}}],[11,"get_xyz","","",54,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"d65degree10"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"d65degree10"}],"output":{"name":"bool"}}],[11,"get_xyz","","",55,{"inputs":[],"output":{"name":"xyz"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"d75degree10"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"d75degree10"}],"output":{"name":"bool"}}],[11,"get_xyz","","",56,{"inputs":[],"output":{"name":"xyz"}}],[6,"Lumaa","palette","Linear luminance with an alpha component. See the `Lumaa` implementation in `Alpha`.",null,null],[6,"Xyza","","CIE 1931 XYZ with an alpha component. See the `Xyza` implementation in `Alpha`.",null,null],[6,"Laba","","CIE L*a*b* (CIELAB) with an alpha component. See the `Laba` implementation in `Alpha`.",null,null],[6,"Lcha","","CIE L*C*h° with an alpha component. See the `Lcha` implementation in `Alpha`.",null,null],[6,"Hsva","","Linear HSV with an alpha component. See the `Hsva` implementation in `Alpha`.",null,null],[6,"Hsla","","Linear HSL with an alpha component. See the `Hsla` implementation in `Alpha`.",null,null],[6,"Yxya","","CIE 1931 Yxy (xyY) with an alpha component. See the `Yxya` implementation in `Alpha`.",null,null],[6,"Hwba","","Linear HWB with an alpha component. See the `Hwba` implementation in `Alpha`.",null,null],[6,"Mat3","","A 9 element array representing a 3x3 matrix",null,null],[6,"Colora","","Generic color with an alpha component. See the `Colora` implementation in `Alpha`.",null,null],[8,"Blend","","A trait for colors that can be blended together.",null,null],[16,"Color","","The core color type. Typically `Self` for color types without alpha.",21,null],[10,"into_premultiplied","","Convert the color to premultiplied alpha.",21,{"inputs":[{"name":"self"}],"output":{"name":"prealpha"}}],[10,"from_premultiplied","","Convert the color from premultiplied alpha.",21,{"inputs":[{"name":"prealpha"}],"output":{"name":"self"}}],[11,"blend","palette::blend","Blend self, as the source color, with `destination`, using `blend_function`. Anything that implements `BlendFunction` is acceptable, including functions and closures.",21,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"over","","Place `self` over `other`. This is the good old common alpha composition equation.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inside","","Results in the parts of `self` that overlaps the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"outside","","Results in the parts of `self` that lies outside the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"atop","","Place `self` over only the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"xor","","Results in either `self` or `other`, where they do not overlap.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"plus","","Add `self` and `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise addition.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"multiply","","Multiply `self` with `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise multiplication.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"screen","","Make a color which is at least as light as `self` or `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overlay","","Multiply `self` or `other` if other is dark, or screen them if `other` is light. This results in an S curve.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"darken","","Return the darkest parts of `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lighten","","Return the lightest parts of `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"dodge","","Lighten `other` to reflect `self`. Results in `other` if `self` is black.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"burn","","Darken `other` to reflect `self`. Results in `other` if `self` is white.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"hard_light","","Multiply `self` or `other` if other is dark, or screen them if `self` is light. This is similar to `overlay`, but depends on `self` instead of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"soft_light","","Lighten `other` if `self` is light, or darken `other` as if it's burned if `self` is dark. The effect is increased if the components of `self` is further from 0.5.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"difference","","Return the absolute difference between `self` and `other`. It's basically `abs(self - other)`, but regulated by the alpha component.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"exclusion","","Similar to `difference`, but appears to result in a lower contrast. `other` is inverted if `self` is white, and preserved if `self` is black.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"FromColor","palette","FromColor provides conversion between the colors.",null,null],[10,"from_xyz","","Convert from XYZ color space",57,{"inputs":[{"name":"xyz"}],"output":{"name":"self"}}],[11,"from_yxy","","Convert from Yxy color space",57,{"inputs":[{"name":"yxy"}],"output":{"name":"self"}}],[11,"from_lab","","Convert from L*a*b* color space",57,{"inputs":[{"name":"lab"}],"output":{"name":"self"}}],[11,"from_lch","","Convert from L*C*h° color space",57,{"inputs":[{"name":"lch"}],"output":{"name":"self"}}],[11,"from_rgb","","Convert from RGB color space",57,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"self"}}],[11,"from_hsl","","Convert from HSL color space",57,{"inputs":[{"name":"hsl"}],"output":{"name":"self"}}],[11,"from_hsv","","Convert from HSV color space",57,{"inputs":[{"name":"hsv"}],"output":{"name":"self"}}],[11,"from_hwb","","Convert from HWB color space",57,{"inputs":[{"name":"hwb"}],"output":{"name":"self"}}],[11,"from_luma","","Convert from Luma",57,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[8,"IntoColor","","IntoColor provides conversion between the colors.",null,null],[10,"into_xyz","","Convert into XYZ space",58,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"into_yxy","","Convert into Yxy color space",58,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","Convert into L*a*b* color space",58,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","Convert into L*C*h° color space",58,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","Convert into RGB color space.",58,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","Convert into HSL color space",58,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","Convert into HSV color space",58,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_hwb","","Convert into HWB color space",58,{"inputs":[{"name":"self"}],"output":{"name":"hwb"}}],[11,"into_luma","","Convert into Luma",58,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[8,"Limited","","A trait for clamping and checking if colors are within their ranges.",null,null],[10,"is_valid","","Check if the color's components are within the expected ranges.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"clamp","","Return a new color where the components has been clamped to the nearest valid values.",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"clamp_self","","Clamp the color's components to the nearest valid values.",59,{"inputs":[{"name":"self"}],"output":null}],[8,"Mix","","A trait for linear color interpolation.",null,null],[16,"Scalar","","The type of the mixing factor.",60,null],[10,"mix","","Mix the color with an other color, by `factor`.",60,null],[8,"Shade","","The `Shade` trait allows a color to be lightened or darkened.",null,null],[16,"Scalar","","The type of the lighten/darken amount.",61,null],[10,"lighten","","Lighten the color by `amount`.",61,null],[11,"darken","","Darken the color by `amount`.",61,null],[8,"GetHue","","A trait for colors where a hue may be calculated.",null,null],[16,"Hue","","The kind of hue unit this color space uses.",62,null],[10,"get_hue","","Calculate a hue if possible.",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Hue","","A trait for colors where the hue can be manipulated without conversion.",null,null],[10,"with_hue","","Return a new copy of `self`, but with a specific hue.",63,null],[10,"shift_hue","","Return a new copy of `self`, but with the hue shifted by `amount`.",63,null],[8,"Saturate","","A trait for colors where the saturation (or chroma) can be manipulated without conversion.",null,null],[16,"Scalar","","The type of the (de)saturation factor.",64,null],[10,"saturate","","Increase the saturation by `factor`.",64,null],[11,"desaturate","","Decrease the saturation by `factor`.",64,null],[8,"ComponentWise","","Perform a unary or binary operation on each component of a color.",null,null],[16,"Scalar","","The scalar type for color components.",65,null],[10,"component_wise","","Perform a binary operation on this and an other color.",65,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"component_wise_self","","Perform a unary operation on this color.",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"y","","Linear luminance.",9,{"inputs":[{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"y_u8","","Linear luminance from an 8 bit value.",9,{"inputs":[{"name":"u8"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"linear_rgb","","Linear RGB.",9,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"linear_rgb_u8","","Linear RGB from an 8 bit value.",9,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"xyz","","CIE XYZ.",9,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"yxy","","CIE Yxy.",9,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"lab","","CIE L*a*b*.",9,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"lch","","CIE L*C*h°.",9,{"inputs":[{"name":"t"},{"name":"t"},{"name":"labhue"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"hsv","","Linear HSV.",9,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"hsl","","Linear HSL.",9,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"hwb","","Linear HWB.",9,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"color"}}],[11,"y","","Linear luminance.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"y_u8","","Linear luminance from an 8 bit value.",0,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"linear_rgb","","Linear RGB.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"linear_rgb_u8","","Linear RGB from an 8 bit value.",0,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"xyz","","CIE XYZ.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"yxy","","CIE Yxy.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"lab","","CIE L*a*b*.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"lch","","CIE L*C*h°.",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"labhue"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"hsv","","Linear HSV.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"hsl","","Linear HSL.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"hwb","","Linear HWB.",0,{"inputs":[{"name":"rgbhue"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"generics":["srgb"],"name":"colora"}}],[11,"mix","","",9,{"inputs":[{"name":"self"},{"name":"color"},{"name":"t"}],"output":{"name":"color"}}],[11,"lighten","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"color"}}],[11,"get_hue","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["labhue"],"name":"option"}}],[11,"with_hue","","",9,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"color"}}],[11,"shift_hue","","",9,{"inputs":[{"name":"self"},{"name":"labhue"}],"output":{"name":"color"}}],[11,"saturate","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"color"}}],[11,"into_premultiplied","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgb"],"name":"prealpha"}}],[11,"from_premultiplied","","",9,{"inputs":[{"generics":["rgb"],"name":"prealpha"}],"output":{"name":"self"}}],[11,"default_epsilon","","",9,null],[11,"default_max_relative","","",9,null],[11,"default_max_ulps","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",9,null],[11,"ulps_eq","","",9,null],[11,"from","","",9,{"inputs":[{"name":"luma"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["luma"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["rgb"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"xyz"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["xyz"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"yxy"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["yxy"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"lab"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["lab"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"lch"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["lch"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"hsv"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["hsv"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"hsl"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["hsl"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"from","","",9,{"inputs":[{"name":"hwb"}],"output":{"name":"color"}}],[11,"from","","",9,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"name":"color"}}],[11,"from","","",0,{"inputs":[{"generics":["hwb"],"name":"alpha"}],"output":{"generics":["color"],"name":"alpha"}}],[11,"blend","palette::blend","Blend self, as the source color, with `destination`, using `blend_function`. Anything that implements `BlendFunction` is acceptable, including functions and closures.",21,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"over","","Place `self` over `other`. This is the good old common alpha composition equation.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inside","","Results in the parts of `self` that overlaps the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"outside","","Results in the parts of `self` that lies outside the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"atop","","Place `self` over only the visible parts of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"xor","","Results in either `self` or `other`, where they do not overlap.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"plus","","Add `self` and `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise addition.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"multiply","","Multiply `self` with `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise multiplication.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"screen","","Make a color which is at least as light as `self` or `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overlay","","Multiply `self` or `other` if other is dark, or screen them if `other` is light. This results in an S curve.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"darken","","Return the darkest parts of `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lighten","","Return the lightest parts of `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"dodge","","Lighten `other` to reflect `self`. Results in `other` if `self` is black.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"burn","","Darken `other` to reflect `self`. Results in `other` if `self` is white.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"hard_light","","Multiply `self` or `other` if other is dark, or screen them if `self` is light. This is similar to `overlay`, but depends on `self` instead of `other`.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"soft_light","","Lighten `other` if `self` is light, or darken `other` as if it's burned if `self` is dark. The effect is increased if the components of `self` is further from 0.5.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"difference","","Return the absolute difference between `self` and `other`. It's basically `abs(self - other)`, but regulated by the alpha component.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"exclusion","","Similar to `difference`, but appears to result in a lower contrast. `other` is inverted if `self` is white, and preserved if `self` is black.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from_yxy","palette","Convert from Yxy color space",57,{"inputs":[{"name":"yxy"}],"output":{"name":"self"}}],[11,"from_lab","","Convert from L*a*b* color space",57,{"inputs":[{"name":"lab"}],"output":{"name":"self"}}],[11,"from_lch","","Convert from L*C*h° color space",57,{"inputs":[{"name":"lch"}],"output":{"name":"self"}}],[11,"from_rgb","","Convert from RGB color space",57,{"inputs":[{"generics":["linear"],"name":"rgb"}],"output":{"name":"self"}}],[11,"from_hsl","","Convert from HSL color space",57,{"inputs":[{"name":"hsl"}],"output":{"name":"self"}}],[11,"from_hsv","","Convert from HSV color space",57,{"inputs":[{"name":"hsv"}],"output":{"name":"self"}}],[11,"from_hwb","","Convert from HWB color space",57,{"inputs":[{"name":"hwb"}],"output":{"name":"self"}}],[11,"from_luma","","Convert from Luma",57,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"into_yxy","","Convert into Yxy color space",58,{"inputs":[{"name":"self"}],"output":{"name":"yxy"}}],[11,"into_lab","","Convert into L*a*b* color space",58,{"inputs":[{"name":"self"}],"output":{"name":"lab"}}],[11,"into_lch","","Convert into L*C*h° color space",58,{"inputs":[{"name":"self"}],"output":{"name":"lch"}}],[11,"into_rgb","","Convert into RGB color space.",58,{"inputs":[{"name":"self"}],"output":{"generics":["linear"],"name":"rgb"}}],[11,"into_hsl","","Convert into HSL color space",58,{"inputs":[{"name":"self"}],"output":{"name":"hsl"}}],[11,"into_hsv","","Convert into HSV color space",58,{"inputs":[{"name":"self"}],"output":{"name":"hsv"}}],[11,"into_hwb","","Convert into HWB color space",58,{"inputs":[{"name":"self"}],"output":{"name":"hwb"}}],[11,"into_luma","","Convert into Luma",58,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}]],"paths":[[3,"Alpha"],[3,"Luma"],[3,"Xyz"],[3,"Lab"],[3,"Lch"],[3,"Hsv"],[3,"Hsl"],[3,"Yxy"],[3,"Hwb"],[4,"Color"],[3,"Gradient"],[3,"Take"],[3,"Slice"],[3,"Range"],[8,"TransferFn"],[8,"RgbPixel"],[3,"Equations"],[3,"Parameters"],[3,"PreAlpha"],[4,"Equation"],[4,"Parameter"],[8,"Blend"],[8,"BlendFunction"],[3,"Rgb"],[3,"Srgb"],[8,"Number"],[3,"Gamma"],[3,"GammaFn"],[3,"F2p2"],[3,"Linear"],[3,"LinearFn"],[8,"RgbStandard"],[8,"RgbSpace"],[8,"Primaries"],[3,"LabHue"],[3,"RgbHue"],[3,"ConeResponseMatrices"],[4,"Method"],[8,"TransformMatrix"],[8,"AdaptFrom"],[8,"AdaptInto"],[8,"WhitePoint"],[3,"A"],[3,"B"],[3,"C"],[3,"D50"],[3,"D55"],[3,"D65"],[3,"D75"],[3,"E"],[3,"F2"],[3,"F7"],[3,"F11"],[3,"D50Degree10"],[3,"D55Degree10"],[3,"D65Degree10"],[3,"D75Degree10"],[8,"FromColor"],[8,"IntoColor"],[8,"Limited"],[8,"Mix"],[8,"Shade"],[8,"GetHue"],[8,"Hue"],[8,"Saturate"],[8,"ComponentWise"]]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
initSearch(searchIndex);
