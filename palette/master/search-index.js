var searchIndex = {};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"AbsDiff","approx","The requisite parameters for testing for approximate equality using a absolute difference based comparison.",null,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[3,"Relative","","The requisite parameters for testing for approximate equality using a relative based comparison.",null,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",1,null],[3,"Ulps","","The requisite parameters for testing for approximate equality using an ULPs based comparison.",null,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",2,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",2,null],[8,"AbsDiffEq","","Equality that is defined using the absolute difference of two numbers.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",3,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",3,null],[10,"abs_diff_eq","","A test for equality that uses the absolute difference to compute the approximate equality of two numbers.",3,null],[11,"abs_diff_ne","","The inverse of `ApproxEq::abs_diff_eq`.",3,null],[8,"RelativeEq","","Equality comparisons between two numbers using both the absolute difference and relative based comparisons.",null,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",4,null],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",4,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",4,null],[8,"UlpsEq","","Equality comparisons between two numbers using both the absolute difference and ULPs (Units in Last Place) based comparisons.",null,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",5,{"o":{"n":"u32"}}],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",5,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",5,null],[11,"default","","",0,{"o":{"n":"absdiff"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[11,"default","","",1,{"o":{"n":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",1,null],[11,"eq","","Peform the equality comparison",1,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[11,"default","","",2,{"o":{"n":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",2,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"ulps"}}],[11,"eq","","Peform the equality comparison",2,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[11,"ne","","Peform the inequality comparison",2,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[14,"abs_diff_eq","","Approximate equality of using the absolute difference.",null,null],[14,"abs_diff_ne","","Approximate inequality of using the absolute difference.",null,null],[14,"relative_eq","","Approximate equality using both the absolute difference and relative based comparisons.",null,null],[14,"relative_ne","","Approximate inequality using both the absolute difference and relative based comparisons.",null,null],[14,"ulps_eq","","Approximate equality using both the absolute difference and ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Approximate inequality using both the absolute difference and ULPs (Units in Last Place).",null,null],[14,"assert_abs_diff_eq","","An assertion that delegates to `abs_diff_eq!`, and panics with a helpful error on failure.",null,null],[14,"assert_abs_diff_ne","","An assertion that delegates to `abs_diff_ne!`, and panics with a helpful error on failure.",null,null],[14,"assert_relative_eq","","An assertion that delegates to `relative_eq!`, and panics with a helpful error on failure.",null,null],[14,"assert_relative_ne","","An assertion that delegates to `relative_ne!`, and panics with a helpful error on failure.",null,null],[14,"assert_ulps_eq","","An assertion that delegates to `ulps_eq!`, and panics with a helpful error on failure.",null,null],[14,"assert_ulps_ne","","An assertion that delegates to `ulps_ne!`, and panics with a helpful error on failure.",null,null],[11,"abs_diff_ne","","The inverse of `ApproxEq::abs_diff_eq`.",3,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",4,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",5,null]],"paths":[[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"],[8,"AbsDiffEq"],[8,"RelativeEq"],[8,"UlpsEq"]]};
searchIndex["libm"] = {"doc":"libm in pure Rust","items":[[5,"acos","libm","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"acosf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"asin","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"asinf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"atan","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"atan2","","",null,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"f64"}}],[5,"atan2f","","",null,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"f32"}}],[5,"atanf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"cbrt","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"cbrtf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"ceil","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"ceilf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"cos","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"cosf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"cosh","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"coshf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"exp","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"exp2","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"exp2f","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"expf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"expm1","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"expm1f","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"fabs","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"fabsf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"fdim","","",null,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"f64"}}],[5,"fdimf","","",null,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"f32"}}],[5,"floor","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"floorf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"fma","","",null,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"f64"}}],[5,"fmaf","","",null,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"f32"}}],[5,"fmod","","",null,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"f64"}}],[5,"fmodf","","",null,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"f32"}}],[5,"hypot","","",null,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"f64"}}],[5,"hypotf","","",null,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"f32"}}],[5,"log","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"log10","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"log10f","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"log1p","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"log1pf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"log2","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"log2f","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"logf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"pow","","",null,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"f64"}}],[5,"powf","","",null,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"f32"}}],[5,"round","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"roundf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"scalbn","","",null,{"i":[{"n":"f64"},{"n":"i32"}],"o":{"n":"f64"}}],[5,"scalbnf","","",null,{"i":[{"n":"f32"},{"n":"i32"}],"o":{"n":"f32"}}],[5,"sin","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"sinf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"sinh","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"sinhf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"sqrt","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"sqrtf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"tan","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"tanf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"tanh","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"tanhf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[5,"trunc","","",null,{"i":[{"n":"f64"}],"o":{"n":"f64"}}],[5,"truncf","","",null,{"i":[{"n":"f32"}],"o":{"n":"f32"}}],[8,"F32Ext","","Math support for `f32`",null,null],[10,"floor","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fdim","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"mul_add","","",0,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"div_euc","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_euc","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"powf","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"sin_cos","","",0,null],[10,"exp_m1","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"F64Ext","","Math support for `f64`",null,null],[10,"floor","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fdim","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"mul_add","","",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"div_euc","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_euc","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"powf","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"sin_cos","","",1,null],[10,"exp_m1","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}]],"paths":[[8,"F32Ext"],[8,"F64Ext"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"inv","","Returns the multiplicative inverse of `self`.",17,null],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",18,null],[10,"mul_add","","Performs the fused multiply-add operation.",18,null],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",19,{"i":[{"n":"self"},{"n":"a"},{"n":"b"}]}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"o":{"n":"self"}}],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",21,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns negative infinity.",21,{"o":{"n":"self"}}],[10,"nan","","Returns NaN.",21,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",21,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"o":{"n":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",21,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"trunc","","Return the integer part of a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fract","","Returns the fractional part of a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",21,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"max","","Returns the maximum of the two numbers.",21,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"powi","","Raise a number to an integer power.",21,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",21,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",22,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",22,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",22,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",22,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",22,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",22,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",22,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",22,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",22,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",22,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",22,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",22,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",22,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",23,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",23,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",23,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",23,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",23,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",23,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",23,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",23,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",23,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",23,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",23,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",23,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",23,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",23,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",23,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",23,{"o":{"n":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",25,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",25,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",25,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",25,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",25,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",25,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",25,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",25,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",25,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",25,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",25,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",25,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",25,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",27,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",28,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",29,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",29,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",29,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",29,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",29,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",30,null],[10,"pow","","Returns `self` to the power `rhs`.",30,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",31,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",31,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Bounded"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Real"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Pow"],[8,"Num"]]};
searchIndex["palette"] = {"doc":"A library that makes linear color calculations and conversion easy and accessible for anyone. It uses the type system to enforce correctness and to avoid mistakes, such as mixing incompatible color types.","items":[[3,"Alpha","palette","An alpha component wrapper for colors.",null,null],[12,"color","","The color.",0,null],[12,"alpha","","The transparency component. 0.0 is fully transparent and 1.0 is fully opaque.",0,null],[3,"Hsl","","Linear HSL color space.",null,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc.",1,null],[12,"saturation","","The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors.",1,null],[12,"lightness","","Decides how light the color will look. 0.0 will be black, 0.5 will give a clear color, and 1.0 will give white.",1,null],[12,"space","","The white point and RGB primaries this color is adapted to. The default is the sRGB standard.",1,null],[3,"Hsv","","Linear HSV color space.",null,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc.",2,null],[12,"saturation","","The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors.",2,null],[12,"value","","Decides how bright the color will look. 0.0 will be black, and 1.0 will give a bright an clear color that goes towards white when `saturation` goes towards 0.0.",2,null],[12,"space","","The white point and RGB primaries this color is adapted to. The default is the sRGB standard.",2,null],[3,"Hwb","","Linear HWB color space.",null,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc. Same as the hue for HSL and HSV.",3,null],[12,"whiteness","","The whiteness of the color. It specifies the amount white to mix into  the hue. It varies from 0 to 1, with 1 being always full white and 0 always being the color shade (a mixture of a pure hue with black)  chosen with the other two controls.",3,null],[12,"blackness","","The blackness of the color. It specifies the amount black to mix into the hue. It varies from 0 to 1, with 1 being always full black and 0 always being the color tint (a mixture of a pure hue with white) chosen with the other two",3,null],[12,"space","","The white point and RGB primaries this color is adapted to. The default is the sRGB standard.",3,null],[3,"Lab","","The CIE L*a*b* (CIELAB) color space.",null,null],[12,"l","","L* is the lightness of the color. 0.0 gives absolute black and 100 give the brightest white.",4,null],[12,"a","","a* goes from red at -128 to green at 127.",4,null],[12,"b","","b* goes from yellow at -128 to blue at 127.",4,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",4,null],[3,"Lch","","CIE L*C*h°, a polar version of CIE L*a*b*.",null,null],[12,"l","","L* is the lightness of the color. 0.0 gives absolute black and 100.0 gives the brightest white.",5,null],[12,"chroma","","C* is the colorfulness of the color. It's similar to saturation. 0.0 gives gray scale colors, and numbers around 128-181 gives fully saturated colors. The upper limit of 128 should include the whole L*a*b* space and some more.",5,null],[12,"hue","","The hue of the color, in degrees. Decides if it's red, blue, purple, etc.",5,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",5,null],[3,"Xyz","","The CIE 1931 XYZ color space.",null,null],[12,"x","","X is the scale of what can be seen as a response curve for the cone cells in the human eye. Its range depends on the white point and goes from 0.0 to 0.95047 for the default D65.",6,null],[12,"y","","Y is the luminance of the color, where 0.0 is black and 1.0 is white.",6,null],[12,"z","","Z is the scale of what can be seen as the blue stimulation. Its range depends on the white point and goes from 0.0 to 1.08883 for the defautl D65.",6,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",6,null],[3,"Yxy","","The CIE 1931 Yxy (xyY)  color space.",null,null],[12,"x","","x chromacity co-ordinate derived from XYZ color space as X/(X+Y+Z). Typical range is between 0 and 1",7,null],[12,"y","","y chromacity co-ordinate derived from XYZ color space as Y/(X+Y+Z). Typical range is between 0 and 1",7,null],[12,"luma","","luma (Y) was a measure of the brightness or luminance of a color. It is the same as the Y from the XYZ color space. Its range is from 0 to 1, where 0 is black and 1 is white.",7,null],[12,"white_point","","The white point associated with the color's illuminant and observer. D65 for 2 degree observer is used by default.",7,null],[3,"OutOfBounds","","The error type for a color conversion that converted a color into a color with invalid values.",null,null],[3,"LabHue","","A hue type for the CIE L*a*b* family of color spaces.",null,null],[3,"RgbHue","","A hue type for the RGB family of color spaces.",null,null],[4,"Color","","A generic color type.",null,null],[13,"Luma","","Linear luminance.",8,null],[13,"Rgb","","Linear RGB.",8,null],[13,"Xyz","","CIE 1931 XYZ.",8,null],[13,"Yxy","","CIE 1931 Yxy.",8,null],[13,"Lab","","CIE L*a*b* (CIELAB).",8,null],[13,"Lch","","CIE L*C*h°, a polar version of CIE L*a*b*.",8,null],[13,"Hsv","","Linear HSV, a cylindrical version of RGB.",8,null],[13,"Hsl","","Linear HSL, a cylindrical version of RGB.",8,null],[13,"Hwb","","Linear HWB, an intuitive cylindrical version of RGB.",8,null],[0,"blend","","Color blending and blending equations.",null,null],[3,"Equations","palette::blend","A pair of blending equations and corresponding parameters.",null,null],[12,"color_equation","","The equation for the color components.",9,null],[12,"alpha_equation","","The equation for the alpha component.",9,null],[12,"color_parameters","","The parameters for the color components.",9,null],[12,"alpha_parameters","","The parameters for the alpha component.",9,null],[3,"Parameters","","A pair of source and destination parameters.",null,null],[12,"source","","The source parameter.",10,null],[12,"destination","","The destination parameter.",10,null],[3,"PreAlpha","","Premultiplied alpha wrapper.",null,null],[12,"color","","The premultiplied color components (`original.color * original.alpha`).",11,null],[12,"alpha","","The transparency component. 0.0 is fully transparent and 1.0 is fully opaque.",11,null],[4,"Equation","","A blending equation.",null,null],[13,"Add","","Add the source and destination, according to `sp * S + dp * D`.",12,null],[13,"Subtract","","Subtract the destination from the source, according to `sp * S - dp * D`.",12,null],[13,"ReverseSubtract","","Subtract the source from the destination, according to `dp * D - sp * S`.",12,null],[13,"Min","","Create a color where each component is the smallest of each of the source and destination components. A.k.a. component wise min. The parameters are ignored.",12,null],[13,"Max","","Create a color where each component is the largest of each of the source and destination components. A.k.a. component wise max. The parameters are ignored.",12,null],[4,"Parameter","","A blending parameter.",null,null],[13,"One","","A simple 1.",13,null],[13,"Zero","","A simple 0.",13,null],[13,"SourceColor","","The source color, or alpha.",13,null],[13,"OneMinusSourceColor","","One minus the source color, or alpha.",13,null],[13,"DestinationColor","","The destination color, or alpha.",13,null],[13,"OneMinusDestinationColor","","One minus the destination color, or alpha.",13,null],[13,"SourceAlpha","","The source alpha.",13,null],[13,"OneMinusSourceAlpha","","One minus the source alpha.",13,null],[13,"DestinationAlpha","","The destination alpha.",13,null],[13,"OneMinusDestinationAlpha","","One minus the destination alpha.",13,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"equations"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"equations"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"equations"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_equations","","Create a pair of blending equations, where all the parameters are `One`.",9,{"i":[{"n":"equation"},{"n":"equation"}],"o":{"n":"equations"}}],[11,"from_parameters","","Create a pair of additive blending equations with the provided parameters.",9,{"i":[{"n":"parameter"},{"n":"parameter"}],"o":{"n":"equations"}}],[11,"apply_to","","",9,{"i":[{"n":"self"},{"n":"prealpha"},{"n":"prealpha"}],"o":{"n":"prealpha"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"parameters"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"parameters"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"parameters"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"parameter"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"parameter"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"prealpha"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"prealpha"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"prealpha"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"alpha"}],"o":{"n":"prealpha"}}],[11,"from","palette","",0,{"i":[{"n":"prealpha"}],"o":{"n":"alpha"}}],[11,"into_premultiplied","palette::blend","",11,{"i":[{"n":"self"}],"o":{"n":"prealpha"}}],[11,"from_premultiplied","","",11,{"i":[{"n":"prealpha"}],"o":{"n":"prealpha"}}],[11,"mix","","",11,null],[11,"component_wise","","",11,{"i":[{"n":"self"},{"n":"prealpha"},{"n":"f"}],"o":{"n":"prealpha"}}],[11,"component_wise_self","","",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"prealpha"}}],[11,"default","","",11,{"o":{"n":"prealpha"}}],[11,"default_epsilon","","",11,null],[11,"abs_diff_eq","","",11,null],[11,"default_max_relative","","",11,null],[11,"relative_eq","","",11,null],[11,"default_max_ulps","","",11,{"o":{"n":"u32"}}],[11,"ulps_eq","","",11,null],[11,"add","","",11,{"i":[{"n":"self"},{"n":"prealpha"}],"o":{"n":"prealpha"}}],[11,"add","","",11,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"prealpha"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"prealpha"}],"o":{"n":"prealpha"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"prealpha"}}],[11,"mul","","",11,{"i":[{"n":"self"},{"n":"prealpha"}],"o":{"n":"prealpha"}}],[11,"mul","","",11,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"prealpha"}}],[11,"div","","",11,{"i":[{"n":"self"},{"n":"prealpha"}],"o":{"n":"prealpha"}}],[11,"div","","",11,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"prealpha"}}],[11,"as_ref","","",11,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",11,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"deref","","",11,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"deref_mut","","",11,{"i":[{"n":"self"}],"o":{"n":"c"}}],[8,"Blend","","A trait for colors that can be blended together.",null,null],[16,"Color","","The core color type. Typically `Self` for color types without alpha.",14,null],[10,"into_premultiplied","","Convert the color to premultiplied alpha.",14,{"i":[{"n":"self"}],"o":{"n":"prealpha"}}],[10,"from_premultiplied","","Convert the color from premultiplied alpha.",14,{"i":[{"n":"prealpha"}],"o":{"n":"self"}}],[11,"blend","","Blend self, as the source color, with `destination`, using `blend_function`. Anything that implements `BlendFunction` is acceptable, including functions and closures.",14,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"over","","Place `self` over `other`. This is the good old common alpha composition equation.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"inside","","Results in the parts of `self` that overlaps the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"outside","","Results in the parts of `self` that lies outside the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"atop","","Place `self` over only the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"xor","","Results in either `self` or `other`, where they do not overlap.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"plus","","Add `self` and `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise addition.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"multiply","","Multiply `self` with `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise multiplication.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"screen","","Make a color which is at least as light as `self` or `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"overlay","","Multiply `self` or `other` if other is dark, or screen them if `other` is light. This results in an S curve.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"darken","","Return the darkest parts of `self` and `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"lighten","","Return the lightest parts of `self` and `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"dodge","","Lighten `other` to reflect `self`. Results in `other` if `self` is black.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"burn","","Darken `other` to reflect `self`. Results in `other` if `self` is white.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"hard_light","","Multiply `self` or `other` if other is dark, or screen them if `self` is light. This is similar to `overlay`, but depends on `self` instead of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"soft_light","","Lighten `other` if `self` is light, or darken `other` as if it's burned if `self` is dark. The effect is increased if the components of `self` is further from 0.5.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"difference","","Return the absolute difference between `self` and `other`. It's basically `abs(self - other)`, but regulated by the alpha component.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"exclusion","","Similar to `difference`, but appears to result in a lower contrast. `other` is inverted if `self` is white, and preserved if `self` is black.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"BlendFunction","","A trait for custom blend functions.",null,null],[10,"apply_to","","Apply this blend function to a pair of colors.",15,{"i":[{"n":"self"},{"n":"prealpha"},{"n":"prealpha"}],"o":{"n":"prealpha"}}],[0,"gradient","palette","Types for interpolation between multiple colors.",null,null],[3,"Gradient","palette::gradient","A linear interpolation between colors.",null,null],[3,"Take","","An iterator over interpolated colors.",null,null],[3,"Slice","","A slice of a Gradient that limits its domain.",null,null],[3,"Range","","A domain range for gradient slices.",null,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"gradient"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a gradient of evenly spaced colors with the domain [0.0, 1.0]. There must be at least one color.",16,{"i":[{"n":"i"}],"o":{"n":"gradient"}}],[11,"with_domain","","Create a gradient of colors with custom spacing and domain. There must be at least one color and they are expected to be ordered by their position value.",16,{"i":[{"n":"vec"}],"o":{"n":"gradient"}}],[11,"get","","Get a color from the gradient. The color of the closest control point will be returned if `i` is outside the domain.",16,null],[11,"take","","Take `n` evenly spaced colors from the gradient, as an iterator.",16,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"slice","","Slice this gradient to limit its domain.",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"slice"}}],[11,"domain","","Get the limits of this gradient's domain.",16,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"take"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"slice"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Get a color from the gradient slice. The color of the closest domain limit will be returned if `i` is outside the domain.",18,null],[11,"take","","Take `n` evenly spaced colors from the gradient slice, as an iterator.",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"slice","","Slice this gradient slice to further limit its domain. Ranges outside the domain will be clamped to the nearest domain limit.",18,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"slice"}}],[11,"domain","","Get the limits of this gradient slice's domain.",18,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"from","","",19,{"i":[{"n":"range"}],"o":{"n":"range"}}],[11,"from","","",19,{"i":[{"n":"rangefrom"}],"o":{"n":"range"}}],[11,"from","","",19,{"i":[{"n":"rangeto"}],"o":{"n":"range"}}],[11,"from","","",19,{"i":[{"n":"rangefull"}],"o":{"n":"range"}}],[11,"default_epsilon","","",19,null],[11,"abs_diff_eq","","",19,null],[11,"default_max_relative","","",19,null],[11,"relative_eq","","",19,null],[11,"default_max_ulps","","",19,{"o":{"n":"u32"}}],[11,"ulps_eq","","",19,null],[0,"named","palette","A collection of named color constants. Can be toggled with the `\"named\"` and `\"named_from_str\"` Cargo features.",null,null],[5,"from_str","palette::named","Get a SVG/CSS3 color by name. Can be toggled with the `\"named_from_str\"` Cargo feature.",null,{"i":[{"n":"str"}],"o":{"g":["srgb"],"n":"option"}}],[17,"ALICEBLUE","","",null,null],[17,"ANTIQUEWHITE","","",null,null],[17,"AQUA","","",null,null],[17,"AQUAMARINE","","",null,null],[17,"AZURE","","",null,null],[17,"BEIGE","","",null,null],[17,"BISQUE","","",null,null],[17,"BLACK","","",null,null],[17,"BLANCHEDALMOND","","",null,null],[17,"BLUE","","",null,null],[17,"BLUEVIOLET","","",null,null],[17,"BROWN","","",null,null],[17,"BURLYWOOD","","",null,null],[17,"CADETBLUE","","",null,null],[17,"CHARTREUSE","","",null,null],[17,"CHOCOLATE","","",null,null],[17,"CORAL","","",null,null],[17,"CORNFLOWERBLUE","","",null,null],[17,"CORNSILK","","",null,null],[17,"CRIMSON","","",null,null],[17,"CYAN","","",null,null],[17,"DARKBLUE","","",null,null],[17,"DARKCYAN","","",null,null],[17,"DARKGOLDENROD","","",null,null],[17,"DARKGRAY","","",null,null],[17,"DARKGREEN","","",null,null],[17,"DARKGREY","","",null,null],[17,"DARKKHAKI","","",null,null],[17,"DARKMAGENTA","","",null,null],[17,"DARKOLIVEGREEN","","",null,null],[17,"DARKORANGE","","",null,null],[17,"DARKORCHID","","",null,null],[17,"DARKRED","","",null,null],[17,"DARKSALMON","","",null,null],[17,"DARKSEAGREEN","","",null,null],[17,"DARKSLATEBLUE","","",null,null],[17,"DARKSLATEGRAY","","",null,null],[17,"DARKSLATEGREY","","",null,null],[17,"DARKTURQUOISE","","",null,null],[17,"DARKVIOLET","","",null,null],[17,"DEEPPINK","","",null,null],[17,"DEEPSKYBLUE","","",null,null],[17,"DIMGRAY","","",null,null],[17,"DIMGREY","","",null,null],[17,"DODGERBLUE","","",null,null],[17,"FIREBRICK","","",null,null],[17,"FLORALWHITE","","",null,null],[17,"FORESTGREEN","","",null,null],[17,"FUCHSIA","","",null,null],[17,"GAINSBORO","","",null,null],[17,"GHOSTWHITE","","",null,null],[17,"GOLD","","",null,null],[17,"GOLDENROD","","",null,null],[17,"GRAY","","",null,null],[17,"GREY","","",null,null],[17,"GREEN","","",null,null],[17,"GREENYELLOW","","",null,null],[17,"HONEYDEW","","",null,null],[17,"HOTPINK","","",null,null],[17,"INDIANRED","","",null,null],[17,"INDIGO","","",null,null],[17,"IVORY","","",null,null],[17,"KHAKI","","",null,null],[17,"LAVENDER","","",null,null],[17,"LAVENDERBLUSH","","",null,null],[17,"LAWNGREEN","","",null,null],[17,"LEMONCHIFFON","","",null,null],[17,"LIGHTBLUE","","",null,null],[17,"LIGHTCORAL","","",null,null],[17,"LIGHTCYAN","","",null,null],[17,"LIGHTGOLDENRODYELLOW","","",null,null],[17,"LIGHTGRAY","","",null,null],[17,"LIGHTGREEN","","",null,null],[17,"LIGHTGREY","","",null,null],[17,"LIGHTPINK","","",null,null],[17,"LIGHTSALMON","","",null,null],[17,"LIGHTSEAGREEN","","",null,null],[17,"LIGHTSKYBLUE","","",null,null],[17,"LIGHTSLATEGRAY","","",null,null],[17,"LIGHTSLATEGREY","","",null,null],[17,"LIGHTSTEELBLUE","","",null,null],[17,"LIGHTYELLOW","","",null,null],[17,"LIME","","",null,null],[17,"LIMEGREEN","","",null,null],[17,"LINEN","","",null,null],[17,"MAGENTA","","",null,null],[17,"MAROON","","",null,null],[17,"MEDIUMAQUAMARINE","","",null,null],[17,"MEDIUMBLUE","","",null,null],[17,"MEDIUMORCHID","","",null,null],[17,"MEDIUMPURPLE","","",null,null],[17,"MEDIUMSEAGREEN","","",null,null],[17,"MEDIUMSLATEBLUE","","",null,null],[17,"MEDIUMSPRINGGREEN","","",null,null],[17,"MEDIUMTURQUOISE","","",null,null],[17,"MEDIUMVIOLETRED","","",null,null],[17,"MIDNIGHTBLUE","","",null,null],[17,"MINTCREAM","","",null,null],[17,"MISTYROSE","","",null,null],[17,"MOCCASIN","","",null,null],[17,"NAVAJOWHITE","","",null,null],[17,"NAVY","","",null,null],[17,"OLDLACE","","",null,null],[17,"OLIVE","","",null,null],[17,"OLIVEDRAB","","",null,null],[17,"ORANGE","","",null,null],[17,"ORANGERED","","",null,null],[17,"ORCHID","","",null,null],[17,"PALEGOLDENROD","","",null,null],[17,"PALEGREEN","","",null,null],[17,"PALETURQUOISE","","",null,null],[17,"PALEVIOLETRED","","",null,null],[17,"PAPAYAWHIP","","",null,null],[17,"PEACHPUFF","","",null,null],[17,"PERU","","",null,null],[17,"PINK","","",null,null],[17,"PLUM","","",null,null],[17,"POWDERBLUE","","",null,null],[17,"PURPLE","","",null,null],[17,"REBECCAPURPLE","","",null,null],[17,"RED","","",null,null],[17,"ROSYBROWN","","",null,null],[17,"ROYALBLUE","","",null,null],[17,"SADDLEBROWN","","",null,null],[17,"SALMON","","",null,null],[17,"SANDYBROWN","","",null,null],[17,"SEAGREEN","","",null,null],[17,"SEASHELL","","",null,null],[17,"SIENNA","","",null,null],[17,"SILVER","","",null,null],[17,"SKYBLUE","","",null,null],[17,"SLATEBLUE","","",null,null],[17,"SLATEGRAY","","",null,null],[17,"SLATEGREY","","",null,null],[17,"SNOW","","",null,null],[17,"SPRINGGREEN","","",null,null],[17,"STEELBLUE","","",null,null],[17,"TAN","","",null,null],[17,"TEAL","","",null,null],[17,"THISTLE","","",null,null],[17,"TOMATO","","",null,null],[17,"TURQUOISE","","",null,null],[17,"VIOLET","","",null,null],[17,"WHEAT","","",null,null],[17,"WHITE","","",null,null],[17,"WHITESMOKE","","",null,null],[17,"YELLOW","","",null,null],[17,"YELLOWGREEN","","",null,null],[11,"clone","palette","",0,{"i":[{"n":"self"}],"o":{"n":"alpha"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"alpha"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"alpha"}],"o":{"n":"bool"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"mix","","",0,null],[11,"lighten","","",0,null],[11,"get_hue","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"with_hue","","",0,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"alpha"}}],[11,"shift_hue","","",0,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"alpha"}}],[11,"saturate","","",0,null],[11,"is_valid","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",0,{"i":[{"n":"self"}],"o":{"n":"alpha"}}],[11,"clamp_self","","",0,{"i":[{"n":"self"}]}],[11,"into_premultiplied","","",0,{"i":[{"n":"self"}],"o":{"n":"prealpha"}}],[11,"from_premultiplied","","",0,{"i":[{"n":"prealpha"}],"o":{"n":"alpha"}}],[11,"component_wise","","",0,{"i":[{"n":"self"},{"n":"alpha"},{"n":"f"}],"o":{"n":"alpha"}}],[11,"component_wise_self","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"alpha"}}],[11,"default","","",0,{"o":{"n":"alpha"}}],[11,"default_epsilon","","",0,null],[11,"abs_diff_eq","","",0,null],[11,"default_max_relative","","",0,null],[11,"relative_eq","","",0,null],[11,"default_max_ulps","","",0,{"o":{"n":"u32"}}],[11,"ulps_eq","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"from","","",0,{"i":[{"n":"c"}],"o":{"n":"alpha"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_xyz","","",1,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_rgb","","",1,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"self"}}],[11,"from_hsv","","",1,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from_hsl","","",1,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"hsl"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"hsl"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"new","","HSL for linear sRGB.",1,{"i":[{"n":"h"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"hsl"}}],[11,"with_wp","","Linear HSL.",1,{"i":[{"n":"h"},{"n":"t"},{"n":"t"}],"o":{"n":"hsl"}}],[11,"into_components","","Convert to a `(hue, saturation, lightness)` tuple.",1,null],[11,"from_components","","Convert from a `(hue, saturation, lightness)` tuple.",1,null],[11,"new","","HSL and transparency for linear sRGB.",0,{"i":[{"n":"h"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","Linear HSL and transparency.",0,{"i":[{"n":"h"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(hue, saturation, lightness, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(hue, saturation, lightness, alpha)` tuple.",0,null],[11,"from","","",1,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",1,null],[11,"into","","",1,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",1,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"clamp_self","","",1,{"i":[{"n":"self"}]}],[11,"mix","","",1,{"i":[{"n":"self"},{"n":"hsl"},{"n":"t"}],"o":{"n":"hsl"}}],[11,"lighten","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsl"}}],[11,"get_hue","","",1,{"i":[{"n":"self"}],"o":{"g":["rgbhue"],"n":"option"}}],[11,"with_hue","","",1,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"hsl"}}],[11,"shift_hue","","",1,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"hsl"}}],[11,"saturate","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsl"}}],[11,"default","","",1,{"o":{"n":"hsl"}}],[11,"add","","",1,{"i":[{"n":"self"},{"n":"hsl"}],"o":{"n":"hsl"}}],[11,"add","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsl"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"hsl"}],"o":{"n":"hsl"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsl"}}],[11,"as_ref","","",1,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",1,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"default_epsilon","","",1,null],[11,"abs_diff_eq","","",1,null],[11,"default_max_relative","","",1,null],[11,"relative_eq","","",1,null],[11,"default_max_ulps","","",1,{"o":{"n":"u32"}}],[11,"ulps_eq","","",1,null],[11,"from_xyz","","",2,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_rgb","","",2,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"self"}}],[11,"from_hsl","","",2,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from_hwb","","",2,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from_hsv","","",2,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"hsv"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"hsv"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"new","","HSV for linear sRGB.",2,{"i":[{"n":"h"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"hsv"}}],[11,"with_wp","","Linear HSV.",2,{"i":[{"n":"h"},{"n":"t"},{"n":"t"}],"o":{"n":"hsv"}}],[11,"into_components","","Convert to a `(hue, saturation, value)` tuple.",2,null],[11,"from_components","","Convert from a `(hue, saturation, value)` tuple.",2,null],[11,"new","","HSV and transparency for linear sRGB.",0,{"i":[{"n":"h"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","Linear HSV and transparency.",0,{"i":[{"n":"h"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(hue, saturation, value, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(hue, saturation, value, alpha)` tuple.",0,null],[11,"from","","",2,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",2,null],[11,"into","","",2,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",2,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"clamp_self","","",2,{"i":[{"n":"self"}]}],[11,"mix","","",2,{"i":[{"n":"self"},{"n":"hsv"},{"n":"t"}],"o":{"n":"hsv"}}],[11,"lighten","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsv"}}],[11,"get_hue","","",2,{"i":[{"n":"self"}],"o":{"g":["rgbhue"],"n":"option"}}],[11,"with_hue","","",2,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"hsv"}}],[11,"shift_hue","","",2,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"hsv"}}],[11,"saturate","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsv"}}],[11,"default","","",2,{"o":{"n":"hsv"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"hsv"}],"o":{"n":"hsv"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsv"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"hsv"}],"o":{"n":"hsv"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hsv"}}],[11,"as_ref","","",2,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"default_epsilon","","",2,null],[11,"abs_diff_eq","","",2,null],[11,"default_max_relative","","",2,null],[11,"relative_eq","","",2,null],[11,"default_max_ulps","","",2,{"o":{"n":"u32"}}],[11,"ulps_eq","","",2,null],[11,"from_xyz","","",3,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_hsv","","",3,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from_hwb","","",3,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"hwb"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"hwb"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"hwb"}}],[11,"new","","HWB for linear sRGB.",3,{"i":[{"n":"h"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"hwb"}}],[11,"with_wp","","Linear HWB.",3,{"i":[{"n":"h"},{"n":"t"},{"n":"t"}],"o":{"n":"hwb"}}],[11,"into_components","","Convert to a `(hue, whiteness, blackness)` tuple.",3,null],[11,"from_components","","Convert from a `(hue, whiteness, blackness)` tuple.",3,null],[11,"new","","HWB and transparency for linear sRGB.",0,{"i":[{"n":"h"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","Linear HWB and transparency.",0,{"i":[{"n":"h"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(hue, whiteness, blackness, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(hue, whiteness, blackness, alpha)` tuple.",0,null],[11,"from","","",3,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",3,null],[11,"into","","",3,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",3,{"i":[{"n":"self"}],"o":{"n":"hwb"}}],[11,"clamp_self","","",3,{"i":[{"n":"self"}]}],[11,"mix","","",3,{"i":[{"n":"self"},{"n":"hwb"},{"n":"t"}],"o":{"n":"hwb"}}],[11,"lighten","","",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hwb"}}],[11,"get_hue","","",3,{"i":[{"n":"self"}],"o":{"g":["rgbhue"],"n":"option"}}],[11,"with_hue","","",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"hwb"}}],[11,"shift_hue","","",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"hwb"}}],[11,"default","","",3,{"o":{"n":"hwb"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"hwb"}],"o":{"n":"hwb"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hwb"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"hwb"}],"o":{"n":"hwb"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"hwb"}}],[11,"as_ref","","",3,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",3,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"default_epsilon","","",3,null],[11,"abs_diff_eq","","",3,null],[11,"default_max_relative","","",3,null],[11,"relative_eq","","",3,null],[11,"default_max_ulps","","",3,{"o":{"n":"u32"}}],[11,"ulps_eq","","",3,null],[11,"from_xyz","","",4,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_lab","","",4,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from_lch","","",4,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"lab"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"lab"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"new","","CIE L*a*b* with white point D65.",4,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["d65"],"n":"lab"}}],[11,"with_wp","","CIE L*a*b*.",4,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"lab"}}],[11,"into_components","","Convert to a `(L\\*, a\\*, b\\*)` tuple.",4,null],[11,"from_components","","Convert from a `(L\\*, a\\*, b\\*)` tuple.",4,null],[11,"new","","CIE L*a*b* and transparency and white point D65.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","CIE L*a*b* and transparency.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(L\\*, a\\*, b\\*, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(L\\*, a\\*, b\\*, alpha)` tuple.",0,null],[11,"from","","",4,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",4,null],[11,"into","","",4,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",4,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"clamp_self","","",4,{"i":[{"n":"self"}]}],[11,"mix","","",4,{"i":[{"n":"self"},{"n":"lab"},{"n":"t"}],"o":{"n":"lab"}}],[11,"lighten","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lab"}}],[11,"get_hue","","",4,{"i":[{"n":"self"}],"o":{"g":["labhue"],"n":"option"}}],[11,"component_wise","","",4,{"i":[{"n":"self"},{"n":"lab"},{"n":"f"}],"o":{"n":"lab"}}],[11,"component_wise_self","","",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"lab"}}],[11,"default","","",4,{"o":{"n":"lab"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"lab"}],"o":{"n":"lab"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lab"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"lab"}],"o":{"n":"lab"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lab"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"lab"}],"o":{"n":"lab"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lab"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"lab"}],"o":{"n":"lab"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lab"}}],[11,"as_ref","","",4,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"from_xyz","","",5,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_lab","","",5,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from_lch","","",5,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"lch"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"lch"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"new","","CIE L*C*h° with white point D65.",5,{"i":[{"n":"t"},{"n":"t"},{"n":"h"}],"o":{"g":["d65"],"n":"lch"}}],[11,"with_wp","","CIE L*C*h°.",5,{"i":[{"n":"t"},{"n":"t"},{"n":"h"}],"o":{"n":"lch"}}],[11,"into_components","","Convert to a `(L\\*, C\\*, h°)` tuple.",5,null],[11,"from_components","","Convert from a `(L\\*, C\\*, h°)` tuple.",5,null],[11,"new","","CIE L*C*h° and transparency with white point D65.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"h"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","CIE L*C*h° and transparency.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"h"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(L\\*, C\\*, h°, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(L\\*, C\\*, h°, alpha)` tuple.",0,null],[11,"from","","",5,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",5,null],[11,"into","","",5,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",5,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"clamp_self","","",5,{"i":[{"n":"self"}]}],[11,"mix","","",5,{"i":[{"n":"self"},{"n":"lch"},{"n":"t"}],"o":{"n":"lch"}}],[11,"lighten","","",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lch"}}],[11,"get_hue","","",5,{"i":[{"n":"self"}],"o":{"g":["labhue"],"n":"option"}}],[11,"with_hue","","",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"lch"}}],[11,"shift_hue","","",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"lch"}}],[11,"saturate","","",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lch"}}],[11,"default","","",5,{"o":{"n":"lch"}}],[11,"add","","",5,{"i":[{"n":"self"},{"n":"lch"}],"o":{"n":"lch"}}],[11,"add","","",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lch"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"lch"}],"o":{"n":"lch"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"lch"}}],[11,"as_ref","","",5,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",5,{"i":[{"n":"self"}],"o":{"n":"p"}}],[0,"luma","","Luminance types.",null,null],[3,"Luma","palette::luma","Luminance.",null,null],[12,"luma","","The lightness of the color. 0.0 is black and 1.0 is white.",20,null],[12,"standard","","The kind of RGB standard. sRGB is the default.",20,null],[11,"from_xyz","","",20,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_yxy","","",20,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from_luma","","",20,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",20,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",20,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","palette::luma","",20,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","palette::luma","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"luma"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"luma"}],"o":{"n":"bool"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"new","","Create a luminance color.",20,{"i":[{"n":"t"}],"o":{"n":"luma"}}],[11,"into_format","","Convert into another component type.",20,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"from_format","","Convert from another component type.",20,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(luma,)` tuple.",20,null],[11,"from_components","","Convert from a `(luma,)` tuple.",20,null],[11,"into_linear","","Convert the color to linear luminance.",20,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"from_linear","","Convert linear luminance to nonlinear luminance.",20,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"luma"}}],[11,"into_encoding","","Convert the color to a different encoding.",20,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"from_encoding","","Convert luminance from a different encoding.",20,{"i":[{"n":"luma"}],"o":{"n":"luma"}}],[11,"new","palette","Create a luminance color with transparency.",0,{"i":[{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_format","","Convert into another component type.",0,{"i":[{"n":"self"}],"o":{"g":["luma"],"n":"alpha"}}],[11,"from_format","","Convert from another component type.",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(luma, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(luma, alpha)` tuple.",0,null],[11,"into_linear","","Convert the color to linear luminance with transparency.",0,{"i":[{"n":"self"}],"o":{"g":["luma"],"n":"alpha"}}],[11,"from_linear","","Convert linear luminance to nonlinear luminance with transparency.",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"g":["luma"],"n":"alpha"}}],[11,"into_encoding","","Convert the color to a different encoding with transparency.",0,{"i":[{"n":"self"}],"o":{"g":["luma"],"n":"alpha"}}],[11,"from_encoding","","Convert luminance from a different encoding with transparency.",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"g":["luma"],"n":"alpha"}}],[11,"from","palette::luma","",20,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",20,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",20,null],[11,"into","","",20,null],[11,"from","palette","",0,null],[11,"into","","",0,null],[11,"into_xyz","palette::luma","",20,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",20,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_luma","","",20,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"is_valid","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",20,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"clamp_self","","",20,{"i":[{"n":"self"}]}],[11,"mix","","",20,{"i":[{"n":"self"},{"n":"luma"},{"n":"t"}],"o":{"n":"luma"}}],[11,"lighten","","",20,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"luma"}}],[11,"into_premultiplied","","",20,{"i":[{"n":"self"}],"o":{"g":["luma"],"n":"prealpha"}}],[11,"from_premultiplied","","",20,{"i":[{"g":["luma"],"n":"prealpha"}],"o":{"n":"self"}}],[11,"component_wise","","",20,{"i":[{"n":"self"},{"n":"luma"},{"n":"f"}],"o":{"n":"luma"}}],[11,"component_wise_self","","",20,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"luma"}}],[11,"default","","",20,{"o":{"n":"luma"}}],[11,"add","","",20,null],[11,"add","","",20,null],[11,"sub","","",20,null],[11,"sub","","",20,null],[11,"mul","","",20,null],[11,"mul","","",20,null],[11,"div","","",20,null],[11,"div","","",20,null],[11,"as_ref","","Convert to a raw pixel format.",20,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","Convert to a raw pixel format.",20,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"default_epsilon","","",20,null],[11,"abs_diff_eq","","",20,null],[11,"default_max_relative","","",20,null],[11,"relative_eq","","",20,null],[11,"default_max_ulps","","",20,{"o":{"n":"u32"}}],[11,"ulps_eq","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Lumaa","","Luminance with an alpha component. See the `Lumaa` implementation in `Alpha`.",null,null],[6,"SrgbLuma","","sRGB encoded luminance.",null,null],[6,"SrgbLumaa","","sRGB encoded luminance with an alpha component.",null,null],[6,"LinLuma","","Linear luminance.",null,null],[6,"LinLumaa","","Linear luminance with an alpha component.",null,null],[6,"GammaLuma","","Gamma 2.2 encoded luminance.",null,null],[6,"GammaLumaa","","Gamma 2.2 encoded luminance with an alpha component.",null,null],[8,"LumaStandard","","A white point and a transfer function.",null,null],[16,"WhitePoint","","The white point of the color space.",21,null],[16,"TransferFn","","The transfer function for the luminance component.",21,null],[0,"rgb","palette","RGB types, spaces and standards.",null,null],[3,"Rgb","palette::rgb","Generic RGB.",null,null],[12,"red","","The amount of red light, where 0.0 is no red light and 1.0f (or 255u8) is the highest displayable amount.",22,null],[12,"green","","The amount of green light, where 0.0 is no green light and 1.0f (or 255u8) is the highest displayable amount.",22,null],[12,"blue","","The amount of blue light, where 0.0 is no blue light and 1.0f (or 255u8) is the highest displayable amount.",22,null],[12,"standard","","The kind of RGB standard. sRGB is the default.",22,null],[11,"from_xyz","","",22,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_hsv","","",22,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from_hsl","","",22,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from_luma","","",22,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"self"}}],[11,"from_rgb","","",22,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",22,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","palette::rgb","",22,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","palette","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","palette::rgb","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"rgb"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"rgb"}],"o":{"n":"bool"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"new","","Create an RGB color.",22,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"rgb"}}],[11,"into_format","","Convert into another component type.",22,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"from_format","","Convert from another component type.",22,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(red, green, blue)` tuple.",22,null],[11,"from_components","","Convert from a `(red, green, blue)` tuple.",22,null],[11,"into_linear","","Convert the color to linear RGB.",22,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"from_linear","","Convert linear RGB to nonlinear RGB.",22,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"rgb"}}],[11,"into_encoding","","Convert the color to a different encoding.",22,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"from_encoding","","Convert RGB from a different encoding.",22,{"i":[{"n":"rgb"}],"o":{"n":"rgb"}}],[11,"new","palette","Nonlinear RGB.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_format","","Convert into another component type.",0,{"i":[{"n":"self"}],"o":{"g":["rgb"],"n":"alpha"}}],[11,"from_format","","Convert from another component type.",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(red, green, blue, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(red, green, blue, alpha)` tuple.",0,null],[11,"into_linear","","Convert the color to linear RGB with transparency.",0,{"i":[{"n":"self"}],"o":{"g":["rgb"],"n":"alpha"}}],[11,"from_linear","","Convert linear RGB to nonlinear RGB with transparency.",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"into_encoding","","Convert the color to a different encoding with transparency.",0,{"i":[{"n":"self"}],"o":{"g":["rgb"],"n":"alpha"}}],[11,"from_encoding","","Convert RGB from a different encoding with transparency.",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"is_valid","palette::rgb","",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",22,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"clamp_self","","",22,{"i":[{"n":"self"}]}],[11,"mix","","",22,{"i":[{"n":"self"},{"n":"rgb"},{"n":"t"}],"o":{"n":"rgb"}}],[11,"lighten","","",22,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"rgb"}}],[11,"get_hue","","",22,{"i":[{"n":"self"}],"o":{"g":["rgbhue"],"n":"option"}}],[11,"into_premultiplied","","",22,{"i":[{"n":"self"}],"o":{"g":["rgb"],"n":"prealpha"}}],[11,"from_premultiplied","","",22,{"i":[{"g":["rgb"],"n":"prealpha"}],"o":{"n":"self"}}],[11,"component_wise","","",22,{"i":[{"n":"self"},{"n":"rgb"},{"n":"f"}],"o":{"n":"rgb"}}],[11,"component_wise_self","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"rgb"}}],[11,"default","","",22,{"o":{"n":"rgb"}}],[11,"add","","",22,null],[11,"add","","",22,null],[11,"sub","","",22,null],[11,"sub","","",22,null],[11,"mul","","",22,null],[11,"mul","","",22,null],[11,"div","","",22,null],[11,"div","","",22,null],[11,"from","","",22,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",22,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",22,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",22,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",22,null],[11,"into","","",22,null],[11,"from","palette","",0,null],[11,"into","","",0,null],[11,"into_xyz","palette::rgb","",22,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",22,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",22,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",22,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",22,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",22,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",22,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_hwb","","",22,{"i":[{"n":"self"}],"o":{"n":"hwb"}}],[11,"into_luma","","",22,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"default_epsilon","","",22,null],[11,"abs_diff_eq","","",22,null],[11,"default_max_relative","","",22,null],[11,"relative_eq","","",22,null],[11,"default_max_ulps","","",22,{"o":{"n":"u32"}}],[11,"ulps_eq","","",22,null],[11,"as_ref","","Convert to a raw pixel format.",22,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","Convert to a raw pixel format.",22,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Rgba","","Generic RGB with an alpha component. See the `Rgba` implementation in `Alpha`.",null,null],[6,"Srgb","","Nonlinear sRGB.",null,null],[6,"Srgba","","Nonlinear sRGB with an alpha component.",null,null],[6,"LinSrgb","","Linear sRGB.",null,null],[6,"LinSrgba","","Linear sRGB with an alpha component.",null,null],[6,"GammaSrgb","","Gamma 2.2 encoded sRGB.",null,null],[6,"GammaSrgba","","Gamma 2.2 encoded sRGB with an alpha component.",null,null],[8,"RgbStandard","","An RGB space and a transfer function.",null,null],[16,"Space","","The RGB color space.",23,null],[16,"TransferFn","","The transfer function for the color components.",23,null],[8,"RgbSpace","","A set of primaries and a white point.",null,null],[16,"Primaries","","The primaries of the RGB color space.",24,null],[16,"WhitePoint","","The white point of the RGB color space.",24,null],[8,"Primaries","","Represents the red, green and blue primaries of an RGB space.",null,null],[10,"red","","Primary red.",25,{"o":{"n":"yxy"}}],[10,"green","","Primary green.",25,{"o":{"n":"yxy"}}],[10,"blue","","Primary blue.",25,{"o":{"n":"yxy"}}],[11,"from_xyz","palette","",6,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_rgb","","",6,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"self"}}],[11,"from_lab","","",6,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from_yxy","","",6,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from_luma","","",6,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"xyz"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"xyz"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"new","","CIE XYZ with whtie point D65.",6,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["d65"],"n":"xyz"}}],[11,"with_wp","","CIE XYZ.",6,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"into_components","","Convert to a `(X, Y, Z)` tuple.",6,null],[11,"from_components","","Convert from a `(X, Y, Z)` tuple.",6,null],[11,"new","","CIE Yxy and transparency with white point D65.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","CIE XYZ and transparency.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(X, Y, Z, alpha)` tuple.",0,null],[11,"from_components","","Convert from a `(X, Y, Z, alpha)` tuple.",0,null],[11,"from","","",6,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",6,null],[11,"into","","",6,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",6,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"clamp_self","","",6,{"i":[{"n":"self"}]}],[11,"mix","","",6,{"i":[{"n":"self"},{"n":"xyz"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"lighten","","",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"component_wise","","",6,{"i":[{"n":"self"},{"n":"xyz"},{"n":"f"}],"o":{"n":"xyz"}}],[11,"component_wise_self","","",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"xyz"}}],[11,"default","","",6,{"o":{"n":"xyz"}}],[11,"add","","",6,{"i":[{"n":"self"},{"n":"xyz"}],"o":{"n":"xyz"}}],[11,"add","","",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"sub","","",6,{"i":[{"n":"self"},{"n":"xyz"}],"o":{"n":"xyz"}}],[11,"sub","","",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"mul","","",6,{"i":[{"n":"self"},{"n":"xyz"}],"o":{"n":"xyz"}}],[11,"mul","","",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"div","","",6,{"i":[{"n":"self"},{"n":"xyz"}],"o":{"n":"xyz"}}],[11,"div","","",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"xyz"}}],[11,"as_ref","","",6,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"from_xyz","","",7,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_yxy","","",7,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from_luma","","",7,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"rgb"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"g":["color"],"n":"alpha"}],"o":{"n":"self"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"yxy"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"yxy"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"new","","CIE Yxy with white point D65.",7,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["d65"],"n":"yxy"}}],[11,"with_wp","","CIE Yxy.",7,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"into_components","","Convert to a `(x, y, luma)`, a.k.a. `(x, y, Y)` tuple.",7,null],[11,"from_components","","Convert from a `(x, y, luma)`, a.k.a. `(x, y, Y)` tuple.",7,null],[11,"new","","CIE Yxy and transparency with white point D65.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"with_wp","","CIE Yxy and transparency.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"a"}],"o":{"n":"self"}}],[11,"into_components","","Convert to a `(x, y, luma)`, a.k.a. `(x, y, Y)` tuple.",0,null],[11,"from_components","","Convert from a `(x, y, luma)`, a.k.a. `(x, y, Y)` tuple.",0,null],[11,"from","","",7,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"luma"}],"o":{"n":"self"}}],[11,"from","","",7,null],[11,"into","","",7,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"is_valid","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clamp","","",7,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"clamp_self","","",7,{"i":[{"n":"self"}]}],[11,"mix","","",7,{"i":[{"n":"self"},{"n":"yxy"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"lighten","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"component_wise","","",7,{"i":[{"n":"self"},{"n":"yxy"},{"n":"f"}],"o":{"n":"yxy"}}],[11,"component_wise_self","","",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"yxy"}}],[11,"default","","",7,{"o":{"n":"yxy"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"yxy"}],"o":{"n":"yxy"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"yxy"}],"o":{"n":"yxy"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"yxy"}],"o":{"n":"yxy"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"yxy"}],"o":{"n":"yxy"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"yxy"}}],[11,"as_ref","","",7,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_mut","","",7,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"labhue"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",26,{"o":{"n":"labhue"}}],[11,"from_degrees","","Create a new hue from degrees.",26,{"i":[{"n":"t"}],"o":{"n":"labhue"}}],[11,"from_radians","","Create a new hue from radians, instead of degrees.",26,{"i":[{"n":"t"}],"o":{"n":"labhue"}}],[11,"to_degrees","","Get the hue as degrees, in the range `(-180, 180]`.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_radians","","Convert the hue to radians, in the range `(-π, π]`.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_positive_degrees","","Convert the hue to positive degrees, in the range `[0, 360)`.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_positive_radians","","Convert the hue to positive radians, in the range `[0, 2π)`.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_raw_degrees","","Get the internal representation, without normalizing it.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_raw_radians","","Get the internal representation as radians, without normalizing it.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",26,{"i":[{"n":"t"}],"o":{"n":"labhue"}}],[11,"into","","",26,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"into","","",26,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"into","","",26,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"labhue"}],"o":{"n":"bool"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"add","","",26,{"i":[{"n":"self"},{"n":"labhue"}],"o":{"n":"labhue"}}],[11,"add","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"labhue"}}],[11,"sub","","",26,{"i":[{"n":"self"},{"n":"labhue"}],"o":{"n":"labhue"}}],[11,"sub","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"labhue"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"rgbhue"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",27,{"o":{"n":"rgbhue"}}],[11,"from_degrees","","Create a new hue from degrees.",27,{"i":[{"n":"t"}],"o":{"n":"rgbhue"}}],[11,"from_radians","","Create a new hue from radians, instead of degrees.",27,{"i":[{"n":"t"}],"o":{"n":"rgbhue"}}],[11,"to_degrees","","Get the hue as degrees, in the range `(-180, 180]`.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_radians","","Convert the hue to radians, in the range `(-π, π]`.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_positive_degrees","","Convert the hue to positive degrees, in the range `[0, 360)`.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_positive_radians","","Convert the hue to positive radians, in the range `[0, 2π)`.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_raw_degrees","","Get the internal representation, without normalizing it.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_raw_radians","","Get the internal representation as radians, without normalizing it.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",27,{"i":[{"n":"t"}],"o":{"n":"rgbhue"}}],[11,"into","","",27,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"into","","",27,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"into","","",27,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"rgbhue"}],"o":{"n":"bool"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"add","","",27,{"i":[{"n":"self"},{"n":"rgbhue"}],"o":{"n":"rgbhue"}}],[11,"add","","",27,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"rgbhue"}}],[11,"sub","","",27,{"i":[{"n":"self"},{"n":"rgbhue"}],"o":{"n":"rgbhue"}}],[11,"sub","","",27,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"rgbhue"}}],[0,"chromatic_adaptation","","Convert colors from one reference white point to another",null,null],[3,"ConeResponseMatrices","palette::chromatic_adaptation","Holds the matrix coeffecients for the chromatic adaptation methods",null,null],[12,"ma","","3x3 matrix for the cone response domains",28,null],[12,"inv_ma","","3x3 matrix for the inverse of the cone response domains",28,null],[4,"Method","","Chromatic adaptation methods implemented in the library",null,null],[13,"Bradford","","Bradford chromatic adaptation method",29,null],[13,"VonKries","","VonKries chromatic adaptation method",29,null],[13,"XyzScaling","","XyzScaling chromatic adaptation method",29,null],[8,"TransformMatrix","","Generates a conversion matrix to convert the Xyz trisitmilus values from one illuminant to another (Swp -> Dwp)",null,null],[10,"get_cone_response","","Get the cone response functions for the chromatic adaptation method",30,{"i":[{"n":"self"}],"o":{"n":"coneresponsematrices"}}],[11,"generate_transform_matrix","","Generates a 3x3 transformation matrix to convert color from one reference white point to another with the given cone_response",30,{"i":[{"n":"self"}],"o":{"n":"mat3"}}],[8,"AdaptFrom","","Trait to convert color from one reference white point to another",null,null],[11,"adapt_from","","Convert the source color to the destination color using the bradford method by default",31,{"i":[{"n":"s"}],"o":{"n":"self"}}],[10,"adapt_from_using","","Convert the source color to the destination color using the specified method",31,{"i":[{"n":"s"},{"n":"m"}],"o":{"n":"self"}}],[8,"AdaptInto","","Trait to convert color with one reference white point into another",null,null],[11,"adapt_into","","Convert the source color to the destination color using the bradford method by default",32,{"i":[{"n":"self"}],"o":{"n":"d"}}],[10,"adapt_into_using","","Convert the source color to the destination color using the specified method",32,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"d"}}],[11,"get_cone_response","","",29,{"i":[{"n":"self"}],"o":{"n":"coneresponsematrices"}}],[11,"fmt","palette","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"color","","Consume this error and return the wrapped color",33,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"description","","",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_xyz","","",6,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",6,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",6,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",6,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",6,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",6,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",6,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",6,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"into_xyz","","",7,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",7,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",7,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",7,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",7,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",7,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",7,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",7,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"into_xyz","","",4,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",4,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",4,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",4,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",4,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",4,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",4,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",4,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"into_xyz","","",5,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",5,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",5,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",5,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",5,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",5,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",5,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",5,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"into_xyz","","",1,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",1,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",1,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",1,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",1,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",1,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",1,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",1,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"into_xyz","","",2,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",2,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",2,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",2,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",2,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",2,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",2,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",2,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"into_xyz","","",3,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","",3,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","",3,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","",3,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","",3,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","",3,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","",3,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_luma","","",3,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[0,"encoding","","Various encoding traits, types and standards.",null,null],[0,"srgb","palette::encoding","The sRGB standard.",null,null],[3,"Srgb","palette::encoding::srgb","The sRGB color space.",null,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"srgb"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"bool"}}],[11,"red","","",34,{"o":{"n":"yxy"}}],[11,"green","","",34,{"o":{"n":"yxy"}}],[11,"blue","","",34,{"o":{"n":"yxy"}}],[11,"into_linear","","",34,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"from_linear","","",34,{"i":[{"n":"t"}],"o":{"n":"t"}}],[0,"gamma","palette::encoding","Gamma encoding.",null,null],[3,"Gamma","palette::encoding::gamma","Gamma encoding.",null,null],[3,"GammaFn","","The transfer function for gamma encoded colors.",null,null],[3,"F2p2","","Represents `2.2f32`.",null,null],[8,"Number","","A type level float constant.",null,null],[18,"VALUE","","The represented number.",35,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"gamma"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"gamma"}],"o":{"n":"bool"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"gammafn"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"gammafn"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"gammafn"}],"o":{"n":"bool"}}],[11,"into_linear","","",37,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"from_linear","","",37,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"f2p2"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"f2p2"}],"o":{"n":"bool"}}],[0,"linear","palette::encoding","Linear encoding",null,null],[3,"Linear","palette::encoding::linear","A generic standard with linear components.",null,null],[3,"LinearFn","","Linear color component encoding.",null,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"linear"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"linear"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"linear"}],"o":{"n":"bool"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"linearfn"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"linearfn"}],"o":{"n":"bool"}}],[11,"into_linear","","",40,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"from_linear","","",40,{"i":[{"n":"t"}],"o":{"n":"t"}}],[0,"pixel","palette::encoding","Pixel encodings and pixel format conversion.",null,null],[8,"RawPixelSized","palette::encoding::pixel","A contiguous sequence of pixel channels with a known length.",null,null],[18,"CHANNELS","","The guaranteed number of channels in the sequence.",41,null],[8,"RawPixel","","A contiguous sequence of pixel channels.",null,null],[10,"channels","","The length of the sequence.",42,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"from_raw_parts","","Convert from a pointer and a length.",42,null],[10,"from_raw_parts_mut","","Convert from a mutable pointer and a length.",42,null],[10,"as_ptr","","Convert to a pointer.",42,null],[10,"as_mut_ptr","","Convert to a mutable pointer.",42,null],[8,"Pixel","","Represents colors that can be serialized and deserialized from raw color components.",null,null],[18,"CHANNELS","","The number of color channels.",43,null],[11,"as_raw","","Cast as a reference to raw color components.",43,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"as_raw_mut","","Cast as a mutable reference to raw color components.",43,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"into_raw","","Convert from raw color components.",43,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"from_raw","","Cast from a reference to raw color components.",43,{"i":[{"n":"p"}],"o":{"n":"self"}}],[11,"from_raw_mut","","Cast from a mutable reference to raw color components.",43,{"i":[{"n":"p"}],"o":{"n":"self"}}],[11,"from_raw_slice","","Cast a slice of raw color components to a slice of colors.",43,null],[11,"from_raw_slice_mut","","Cast a mutable slice of raw color components to a mutable slice of colors.",43,null],[11,"into_raw_slice","","Cast a slice of colors to a slice of raw color components.",43,null],[11,"into_raw_slice_mut","","Cast a mutable slice of colors to a mutable slice of raw color components.",43,null],[8,"TransferFn","palette::encoding","A transfer function to and from linear space.",null,null],[10,"from_linear","","Convert the color component `x` from linear space.",44,{"i":[{"n":"t"}],"o":{"n":"t"}}],[10,"into_linear","","Convert the color component `x` into linear space.",44,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"default_epsilon","palette","",6,null],[11,"abs_diff_eq","","",6,null],[11,"abs_diff_ne","","",6,null],[11,"default_max_relative","","",6,null],[11,"relative_eq","","",6,null],[11,"relative_ne","","",6,null],[11,"default_max_ulps","","",6,{"o":{"n":"u32"}}],[11,"ulps_eq","","",6,null],[11,"ulps_ne","","",6,null],[11,"default_epsilon","","",7,null],[11,"abs_diff_eq","","",7,null],[11,"abs_diff_ne","","",7,null],[11,"default_max_relative","","",7,null],[11,"relative_eq","","",7,null],[11,"relative_ne","","",7,null],[11,"default_max_ulps","","",7,{"o":{"n":"u32"}}],[11,"ulps_eq","","",7,null],[11,"ulps_ne","","",7,null],[11,"default_epsilon","","",4,null],[11,"abs_diff_eq","","",4,null],[11,"abs_diff_ne","","",4,null],[11,"default_max_relative","","",4,null],[11,"relative_eq","","",4,null],[11,"relative_ne","","",4,null],[11,"default_max_ulps","","",4,{"o":{"n":"u32"}}],[11,"ulps_eq","","",4,null],[11,"ulps_ne","","",4,null],[11,"default_epsilon","","",5,null],[11,"abs_diff_eq","","",5,null],[11,"abs_diff_ne","","",5,null],[11,"default_max_relative","","",5,null],[11,"relative_eq","","",5,null],[11,"relative_ne","","",5,null],[11,"default_max_ulps","","",5,{"o":{"n":"u32"}}],[11,"ulps_eq","","",5,null],[11,"ulps_ne","","",5,null],[11,"default_epsilon","","",26,null],[11,"abs_diff_eq","","",26,null],[11,"abs_diff_ne","","",26,null],[11,"default_max_relative","","",26,null],[11,"relative_eq","","",26,null],[11,"relative_ne","","",26,null],[11,"default_max_ulps","","",26,{"o":{"n":"u32"}}],[11,"ulps_eq","","",26,null],[11,"ulps_ne","","",26,null],[11,"default_epsilon","","",27,null],[11,"abs_diff_eq","","",27,null],[11,"abs_diff_ne","","",27,null],[11,"default_max_relative","","",27,null],[11,"relative_eq","","",27,null],[11,"relative_ne","","",27,null],[11,"default_max_ulps","","",27,{"o":{"n":"u32"}}],[11,"ulps_eq","","",27,null],[11,"ulps_ne","","",27,null],[0,"white_point","","Defines the tristimulus values of the CIE Illuminants.",null,null],[3,"A","palette::white_point","CIE standard illuminant A",null,null],[3,"B","","CIE standard illuminant B",null,null],[3,"C","","CIE standard illuminant C",null,null],[3,"D50","","CIE D series standard illuminant - D50",null,null],[3,"D55","","CIE D series standard illuminant - D55",null,null],[3,"D65","","CIE D series standard illuminant - D65",null,null],[3,"D75","","CIE D series standard illuminant - D75",null,null],[3,"E","","CIE standard illuminant E",null,null],[3,"F2","","CIE fluorescent illuminant series - F2",null,null],[3,"F7","","CIE fluorescent illuminant series - F7",null,null],[3,"F11","","CIE fluorescent illuminant series - F11",null,null],[3,"D50Degree10","","CIE D series standard illuminant - D50",null,null],[3,"D55Degree10","","CIE D series standard illuminant - D55",null,null],[3,"D65Degree10","","CIE D series standard illuminant - D65",null,null],[3,"D75Degree10","","CIE D series standard illuminant - D75",null,null],[8,"WhitePoint","","WhitePoint defines the Xyz color co-ordinates for a given white point.",null,null],[10,"get_xyz","","Get the Xyz chromacity co-ordinates for the white point.",45,{"o":{"n":"xyz"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"bool"}}],[11,"get_xyz","","",46,{"o":{"n":"xyz"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"get_xyz","","",47,{"o":{"n":"xyz"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_xyz","","",48,{"o":{"n":"xyz"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"d50"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"d50"}],"o":{"n":"bool"}}],[11,"get_xyz","","",49,{"o":{"n":"xyz"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"d55"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"d55"}],"o":{"n":"bool"}}],[11,"get_xyz","","",50,{"o":{"n":"xyz"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"d65"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"d65"}],"o":{"n":"bool"}}],[11,"get_xyz","","",51,{"o":{"n":"xyz"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"d75"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"d75"}],"o":{"n":"bool"}}],[11,"get_xyz","","",52,{"o":{"n":"xyz"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"bool"}}],[11,"get_xyz","","",53,{"o":{"n":"xyz"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"f2"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"f2"}],"o":{"n":"bool"}}],[11,"get_xyz","","",54,{"o":{"n":"xyz"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"f7"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"f7"}],"o":{"n":"bool"}}],[11,"get_xyz","","",55,{"o":{"n":"xyz"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"f11"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"f11"}],"o":{"n":"bool"}}],[11,"get_xyz","","",56,{"o":{"n":"xyz"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"d50degree10"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"d50degree10"}],"o":{"n":"bool"}}],[11,"get_xyz","","",57,{"o":{"n":"xyz"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"d55degree10"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"d55degree10"}],"o":{"n":"bool"}}],[11,"get_xyz","","",58,{"o":{"n":"xyz"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"d65degree10"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"d65degree10"}],"o":{"n":"bool"}}],[11,"get_xyz","","",59,{"o":{"n":"xyz"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"d75degree10"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"d75degree10"}],"o":{"n":"bool"}}],[11,"get_xyz","","",60,{"o":{"n":"xyz"}}],[0,"float","palette","Floating point traits",null,null],[8,"Float","palette::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",61,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",61,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",61,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",61,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",61,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",61,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",61,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",61,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",61,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",61,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",61,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",61,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",61,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",61,null],[6,"Hsla","palette","Linear HSL with an alpha component. See the `Hsla` implementation in `Alpha`.",null,null],[6,"Hsva","","Linear HSV with an alpha component. See the `Hsva` implementation in `Alpha`.",null,null],[6,"Hwba","","Linear HWB with an alpha component. See the `Hwba` implementation in `Alpha`.",null,null],[6,"Laba","","CIE L*a*b* (CIELAB) with an alpha component. See the `Laba` implementation in `Alpha`.",null,null],[6,"Lcha","","CIE L*C*h° with an alpha component. See the `Lcha` implementation in `Alpha`.",null,null],[6,"Xyza","","CIE 1931 XYZ with an alpha component. See the `Xyza` implementation in `Alpha`.",null,null],[6,"Yxya","","CIE 1931 Yxy (xyY) with an alpha component. See the `Yxya` implementation in `Alpha`.",null,null],[6,"Mat3","","A 9 element array representing a 3x3 matrix",null,null],[6,"Colora","","Generic color with an alpha component. See the `Colora` implementation in `Alpha`.",null,null],[8,"Blend","","A trait for colors that can be blended together.",null,null],[16,"Color","","The core color type. Typically `Self` for color types without alpha.",14,null],[10,"into_premultiplied","","Convert the color to premultiplied alpha.",14,{"i":[{"n":"self"}],"o":{"n":"prealpha"}}],[10,"from_premultiplied","","Convert the color from premultiplied alpha.",14,{"i":[{"n":"prealpha"}],"o":{"n":"self"}}],[11,"blend","palette::blend","Blend self, as the source color, with `destination`, using `blend_function`. Anything that implements `BlendFunction` is acceptable, including functions and closures.",14,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"over","","Place `self` over `other`. This is the good old common alpha composition equation.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"inside","","Results in the parts of `self` that overlaps the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"outside","","Results in the parts of `self` that lies outside the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"atop","","Place `self` over only the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"xor","","Results in either `self` or `other`, where they do not overlap.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"plus","","Add `self` and `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise addition.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"multiply","","Multiply `self` with `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise multiplication.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"screen","","Make a color which is at least as light as `self` or `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"overlay","","Multiply `self` or `other` if other is dark, or screen them if `other` is light. This results in an S curve.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"darken","","Return the darkest parts of `self` and `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"lighten","","Return the lightest parts of `self` and `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"dodge","","Lighten `other` to reflect `self`. Results in `other` if `self` is black.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"burn","","Darken `other` to reflect `self`. Results in `other` if `self` is white.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"hard_light","","Multiply `self` or `other` if other is dark, or screen them if `self` is light. This is similar to `overlay`, but depends on `self` instead of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"soft_light","","Lighten `other` if `self` is light, or darken `other` as if it's burned if `self` is dark. The effect is increased if the components of `self` is further from 0.5.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"difference","","Return the absolute difference between `self` and `other`. It's basically `abs(self - other)`, but regulated by the alpha component.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"exclusion","","Similar to `difference`, but appears to result in a lower contrast. `other` is inverted if `self` is white, and preserved if `self` is black.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"ConvertFrom","palette","A trait for converting one color from another.",null,null],[10,"convert_from","","Convert from T with values clamped to the color defined bounds",62,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"convert_unclamped_from","","Convert from T. The resulting color might be invalid in its color space",62,{"i":[{"n":"t"}],"o":{"n":"self"}}],[10,"try_convert_from","","Convert from T, returning ok if the color is inside of its defined range, otherwise an `OutOfBounds` error is returned which contains the unclamped color.",62,{"i":[{"n":"t"}],"o":{"g":["outofbounds"],"n":"result"}}],[8,"ConvertInto","","A trait for converting a color into another.",null,null],[10,"convert_into","","Convert into T with values clamped to the color defined bounds",63,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"convert_unclamped_into","","Convert into T. The resulting color might be invalid in its color space",63,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"try_convert_into","","Convert into T, returning ok if the color is inside of its defined range, otherwise an `OutOfBounds` error is returned which contains the unclamped color.",63,{"i":[{"n":"self"}],"o":{"g":["outofbounds"],"n":"result"}}],[8,"FromColor","","FromColor provides conversion from the colors.",null,null],[10,"from_xyz","","Convert from XYZ color space",64,{"i":[{"n":"xyz"}],"o":{"n":"self"}}],[11,"from_yxy","","Convert from Yxy color space",64,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from_lab","","Convert from L*a*b* color space",64,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from_lch","","Convert from L*C*h° color space",64,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from_rgb","","Convert from RGB color space",64,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"self"}}],[11,"from_hsl","","Convert from HSL color space",64,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from_hsv","","Convert from HSV color space",64,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from_hwb","","Convert from HWB color space",64,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from_luma","","Convert from Luma",64,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"self"}}],[8,"IntoColor","","IntoColor provides conversion to the colors.",null,null],[10,"into_xyz","","Convert into XYZ space",65,{"i":[{"n":"self"}],"o":{"n":"xyz"}}],[11,"into_yxy","","Convert into Yxy color space",65,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","Convert into L*a*b* color space",65,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","Convert into L*C*h° color space",65,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","Convert into RGB color space.",65,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","Convert into HSL color space",65,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","Convert into HSV color space",65,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_hwb","","Convert into HWB color space",65,{"i":[{"n":"self"}],"o":{"n":"hwb"}}],[11,"into_luma","","Convert into Luma",65,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[8,"Limited","","A trait for clamping and checking if colors are within their ranges.",null,null],[10,"is_valid","","Check if the color's components are within the expected ranges.",66,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"clamp","","Return a new color where the components has been clamped to the nearest valid values.",66,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"clamp_self","","Clamp the color's components to the nearest valid values.",66,{"i":[{"n":"self"}]}],[8,"Mix","","A trait for linear color interpolation.",null,null],[16,"Scalar","","The type of the mixing factor.",67,null],[10,"mix","","Mix the color with an other color, by `factor`.",67,null],[8,"Shade","","The `Shade` trait allows a color to be lightened or darkened.",null,null],[16,"Scalar","","The type of the lighten/darken amount.",68,null],[10,"lighten","","Lighten the color by `amount`.",68,null],[11,"darken","","Darken the color by `amount`.",68,null],[8,"GetHue","","A trait for colors where a hue may be calculated.",null,null],[16,"Hue","","The kind of hue unit this color space uses.",69,null],[10,"get_hue","","Calculate a hue if possible.",69,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"Hue","","A trait for colors where the hue can be manipulated without conversion.",null,null],[10,"with_hue","","Return a new copy of `self`, but with a specific hue.",70,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"self"}}],[10,"shift_hue","","Return a new copy of `self`, but with the hue shifted by `amount`.",70,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"self"}}],[8,"Saturate","","A trait for colors where the saturation (or chroma) can be manipulated without conversion.",null,null],[16,"Scalar","","The type of the (de)saturation factor.",71,null],[10,"saturate","","Increase the saturation by `factor`.",71,null],[11,"desaturate","","Decrease the saturation by `factor`.",71,null],[8,"ComponentWise","","Perform a unary or binary operation on each component of a color.",null,null],[16,"Scalar","","The scalar type for color components.",72,null],[10,"component_wise","","Perform a binary operation on this and an other color.",72,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[10,"component_wise_self","","Perform a unary operation on this color.",72,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[8,"Component","","Common trait for color components.",null,null],[18,"LIMITED","","True if the max intensity is also the highest possible value of the type. Conversion to limited types requires clamping.",73,null],[10,"max_intensity","","The highest displayable value this component type can reach. Higher values are allowed, but they may be lowered to this before converting to another format.",73,{"o":{"n":"self"}}],[10,"convert","","Convert into another color component type, including scaling.",73,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"default","","",8,{"o":{"n":"color"}}],[11,"linear_y","","Linear luminance.",8,{"i":[{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"linear_rgb","","Linear RGB.",8,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"xyz","","CIE XYZ.",8,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"yxy","","CIE Yxy.",8,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"lab","","CIE L*a*b*.",8,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"lch","","CIE L*C*h°.",8,{"i":[{"n":"t"},{"n":"t"},{"n":"labhue"}],"o":{"g":["srgb"],"n":"color"}}],[11,"hsv","","Linear HSV.",8,{"i":[{"n":"rgbhue"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"hsl","","Linear HSL.",8,{"i":[{"n":"rgbhue"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"hwb","","Linear HWB.",8,{"i":[{"n":"rgbhue"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"color"}}],[11,"linear_y","","Linear luminance.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"linear_rgb","","Linear RGB.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"xyz","","CIE XYZ.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"yxy","","CIE Yxy.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"lab","","CIE L*a*b*.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"lch","","CIE L*C*h°.",0,{"i":[{"n":"t"},{"n":"t"},{"n":"labhue"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"hsv","","Linear HSV.",0,{"i":[{"n":"rgbhue"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"hsl","","Linear HSL.",0,{"i":[{"n":"rgbhue"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"hwb","","Linear HWB.",0,{"i":[{"n":"rgbhue"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"g":["srgb"],"n":"colora"}}],[11,"mix","","",8,{"i":[{"n":"self"},{"n":"color"},{"n":"t"}],"o":{"n":"color"}}],[11,"lighten","","",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"color"}}],[11,"get_hue","","",8,{"i":[{"n":"self"}],"o":{"g":["labhue"],"n":"option"}}],[11,"with_hue","","",8,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"color"}}],[11,"shift_hue","","",8,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"color"}}],[11,"saturate","","",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"color"}}],[11,"into_premultiplied","","",8,{"i":[{"n":"self"}],"o":{"g":["rgb"],"n":"prealpha"}}],[11,"from_premultiplied","","",8,{"i":[{"g":["rgb"],"n":"prealpha"}],"o":{"n":"self"}}],[11,"default_epsilon","","",8,null],[11,"abs_diff_eq","","",8,null],[11,"default_max_relative","","",8,null],[11,"relative_eq","","",8,null],[11,"default_max_ulps","","",8,{"o":{"n":"u32"}}],[11,"ulps_eq","","",8,null],[11,"from","","",8,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["luma"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["rgb"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"xyz"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["xyz"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"yxy"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["yxy"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"lab"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["lab"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"lch"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["lch"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"hsv"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["hsv"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"hsl"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["hsl"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"from","","",8,{"i":[{"n":"hwb"}],"o":{"n":"color"}}],[11,"from","","",8,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"n":"color"}}],[11,"from","","",0,{"i":[{"g":["hwb"],"n":"alpha"}],"o":{"g":["color"],"n":"alpha"}}],[11,"blend","palette::blend","Blend self, as the source color, with `destination`, using `blend_function`. Anything that implements `BlendFunction` is acceptable, including functions and closures.",14,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"over","","Place `self` over `other`. This is the good old common alpha composition equation.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"inside","","Results in the parts of `self` that overlaps the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"outside","","Results in the parts of `self` that lies outside the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"atop","","Place `self` over only the visible parts of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"xor","","Results in either `self` or `other`, where they do not overlap.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"plus","","Add `self` and `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise addition.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"multiply","","Multiply `self` with `other`. This uses the alpha component to regulate the effect, so it's not just plain component wise multiplication.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"screen","","Make a color which is at least as light as `self` or `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"overlay","","Multiply `self` or `other` if other is dark, or screen them if `other` is light. This results in an S curve.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"darken","","Return the darkest parts of `self` and `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"lighten","","Return the lightest parts of `self` and `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"dodge","","Lighten `other` to reflect `self`. Results in `other` if `self` is black.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"burn","","Darken `other` to reflect `self`. Results in `other` if `self` is white.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"hard_light","","Multiply `self` or `other` if other is dark, or screen them if `self` is light. This is similar to `overlay`, but depends on `self` instead of `other`.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"soft_light","","Lighten `other` if `self` is light, or darken `other` as if it's burned if `self` is dark. The effect is increased if the components of `self` is further from 0.5.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"difference","","Return the absolute difference between `self` and `other`. It's basically `abs(self - other)`, but regulated by the alpha component.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"exclusion","","Similar to `difference`, but appears to result in a lower contrast. `other` is inverted if `self` is white, and preserved if `self` is black.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"from_yxy","palette","Convert from Yxy color space",64,{"i":[{"n":"yxy"}],"o":{"n":"self"}}],[11,"from_lab","","Convert from L*a*b* color space",64,{"i":[{"n":"lab"}],"o":{"n":"self"}}],[11,"from_lch","","Convert from L*C*h° color space",64,{"i":[{"n":"lch"}],"o":{"n":"self"}}],[11,"from_rgb","","Convert from RGB color space",64,{"i":[{"g":["linear"],"n":"rgb"}],"o":{"n":"self"}}],[11,"from_hsl","","Convert from HSL color space",64,{"i":[{"n":"hsl"}],"o":{"n":"self"}}],[11,"from_hsv","","Convert from HSV color space",64,{"i":[{"n":"hsv"}],"o":{"n":"self"}}],[11,"from_hwb","","Convert from HWB color space",64,{"i":[{"n":"hwb"}],"o":{"n":"self"}}],[11,"from_luma","","Convert from Luma",64,{"i":[{"g":["linear"],"n":"luma"}],"o":{"n":"self"}}],[11,"into_yxy","","Convert into Yxy color space",65,{"i":[{"n":"self"}],"o":{"n":"yxy"}}],[11,"into_lab","","Convert into L*a*b* color space",65,{"i":[{"n":"self"}],"o":{"n":"lab"}}],[11,"into_lch","","Convert into L*C*h° color space",65,{"i":[{"n":"self"}],"o":{"n":"lch"}}],[11,"into_rgb","","Convert into RGB color space.",65,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"rgb"}}],[11,"into_hsl","","Convert into HSL color space",65,{"i":[{"n":"self"}],"o":{"n":"hsl"}}],[11,"into_hsv","","Convert into HSV color space",65,{"i":[{"n":"self"}],"o":{"n":"hsv"}}],[11,"into_hwb","","Convert into HWB color space",65,{"i":[{"n":"self"}],"o":{"n":"hwb"}}],[11,"into_luma","","Convert into Luma",65,{"i":[{"n":"self"}],"o":{"g":["linear"],"n":"luma"}}],[11,"convert_unclamped_from","","Convert from T. The resulting color might be invalid in its color space",62,{"i":[{"n":"t"}],"o":{"n":"self"}}],[18,"CHANNELS","palette::encoding::pixel","The guaranteed number of channels in the sequence.",41,null]],"paths":[[3,"Alpha"],[3,"Hsl"],[3,"Hsv"],[3,"Hwb"],[3,"Lab"],[3,"Lch"],[3,"Xyz"],[3,"Yxy"],[4,"Color"],[3,"Equations"],[3,"Parameters"],[3,"PreAlpha"],[4,"Equation"],[4,"Parameter"],[8,"Blend"],[8,"BlendFunction"],[3,"Gradient"],[3,"Take"],[3,"Slice"],[3,"Range"],[3,"Luma"],[8,"LumaStandard"],[3,"Rgb"],[8,"RgbStandard"],[8,"RgbSpace"],[8,"Primaries"],[3,"LabHue"],[3,"RgbHue"],[3,"ConeResponseMatrices"],[4,"Method"],[8,"TransformMatrix"],[8,"AdaptFrom"],[8,"AdaptInto"],[3,"OutOfBounds"],[3,"Srgb"],[8,"Number"],[3,"Gamma"],[3,"GammaFn"],[3,"F2p2"],[3,"Linear"],[3,"LinearFn"],[8,"RawPixelSized"],[8,"RawPixel"],[8,"Pixel"],[8,"TransferFn"],[8,"WhitePoint"],[3,"A"],[3,"B"],[3,"C"],[3,"D50"],[3,"D55"],[3,"D65"],[3,"D75"],[3,"E"],[3,"F2"],[3,"F7"],[3,"F11"],[3,"D50Degree10"],[3,"D55Degree10"],[3,"D65Degree10"],[3,"D75Degree10"],[8,"Float"],[8,"ConvertFrom"],[8,"ConvertInto"],[8,"FromColor"],[8,"IntoColor"],[8,"Limited"],[8,"Mix"],[8,"Shade"],[8,"GetHue"],[8,"Hue"],[8,"Saturate"],[8,"ComponentWise"],[8,"Component"]]};
searchIndex["palette_derive"] = {"doc":"Derives traits from the palette crate.","items":[[5,"derive_from_color","palette_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_into_color","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_pixel","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"i":[{"n":"self"}],"o":{"n":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"i":[{"n":"self"},{"n":"set"}],"o":{"n":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"i":[{"n":"self"},{"n":"set"}],"o":{"n":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"i":[{"n":"self"},{"n":"set"}],"o":{"n":"bool"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["usize"],"n":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"i":[{"n":"self"}],"o":{"n":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"i":[{"n":"self"},{"n":"u"}],"o":{"g":["usize"],"n":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"i":[{"n":"self"},{"n":"orderedset"}],"o":{"n":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"i":[{"n":"self"},{"n":"orderedset"}],"o":{"n":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"i":[{"n":"self"},{"n":"orderedset"}],"o":{"n":"bool"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"i":[{"n":"t"},{"n":"u64"}],"o":{"n":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["tokentree"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","proc_macro2","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,{"o":{"n":"tokenstream"}}],[11,"empty","","",4,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"from","","",4,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",6,{"o":{"n":"span"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",0,{"i":[{"n":"self"},{"n":"span"}]}],[11,"from","","",0,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",7,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"spacing"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",8,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",10,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",10,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",10,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"i":[{"n":"self"},{"n":"u"}]}],[10,"append_all","","",0,{"i":[{"n":"self"},{"n":"i"}]}],[10,"append_separated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[10,"append_terminated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"siphasher13"}}],[11,"default","","",0,{"o":{"n":"siphasher13"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"siphasher24"}}],[11,"default","","",1,{"o":{"n":"siphasher24"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"siphasher"}}],[11,"default","","",2,{"o":{"n":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"o":{"n":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"o":{"n":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"o":{"n":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"default","","",3,{"o":{"n":"hash128"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"siphasher13"}}],[11,"default","","",5,{"o":{"n":"siphasher13"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"siphasher24"}}],[11,"default","","",6,{"o":{"n":"siphasher24"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"siphasher"}}],[11,"default","","",7,{"o":{"n":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"o":{"n":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"o":{"n":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"o":{"n":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",13,null],[12,"base","","",13,null],[12,"dot_token","","",13,null],[12,"member","","",13,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",14,null],[12,"expr","","",14,null],[12,"bracket_token","","",14,null],[12,"index","","",14,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",15,null],[12,"lit","","",15,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",16,null],[12,"paren_token","","",16,null],[12,"expr","","",16,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",17,null],[12,"qself","","",17,null],[12,"path","","",17,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",18,null],[12,"op","","",18,null],[12,"expr","","",18,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",19,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",20,null],[12,"span","","",20,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",21,null],[12,"lt_token","","",21,null],[12,"lifetimes","","",21,null],[12,"gt_token","","",21,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",22,null],[12,"const_token","","",22,null],[12,"ident","","",22,null],[12,"colon_token","","",22,null],[12,"ty","","",22,null],[12,"eq_token","","",22,null],[12,"default","","",22,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",23,null],[12,"params","","",23,null],[12,"gt_token","","",23,null],[12,"where_clause","","",23,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",24,null],[12,"lifetime","","",24,null],[12,"colon_token","","",24,null],[12,"bounds","","",24,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",25,null],[12,"eq_token","","",25,null],[12,"rhs_ty","","",25,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",26,null],[12,"colon_token","","",26,null],[12,"bounds","","",26,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",27,null],[12,"bounded_ty","","The type being bounded",27,null],[12,"colon_token","","",27,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",28,null],[12,"modifier","","",28,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",29,null],[12,"ident","","",29,null],[12,"colon_token","","",29,null],[12,"bounds","","",29,null],[12,"eq_token","","",29,null],[12,"default","","",29,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",30,null],[12,"predicates","","",30,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",31,null],[12,"ident","","",31,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",32,null],[12,"span","","",32,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",33,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",34,null],[12,"bang_token","","",34,null],[12,"delimiter","","",34,null],[12,"tts","","",34,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",35,null],[12,"brace_token","","",35,null],[12,"variants","","",35,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",36,null],[12,"fields","","",36,null],[12,"semi_token","","",36,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",37,null],[12,"fields","","",37,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,null],[12,"vis","","Visibility of the struct or enum.",38,null],[12,"ident","","Name of the struct or enum.",38,null],[12,"generics","","Generics required to complete the definition.",38,null],[12,"data","","Data within the struct or enum.",38,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",39,null],[12,"name","","",39,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",40,null],[12,"ty","","",40,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",41,null],[12,"elem","","",41,null],[12,"semi_token","","",41,null],[12,"len","","",41,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",42,null],[12,"abi","","",42,null],[12,"fn_token","","",42,null],[12,"lifetimes","","",42,null],[12,"paren_token","","",42,null],[12,"inputs","","",42,null],[12,"variadic","","",42,null],[12,"output","","",42,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",43,null],[12,"elem","","",43,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",44,null],[12,"bounds","","",44,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",45,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",46,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",47,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",48,null],[12,"elem","","",48,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",49,null],[12,"path","","",49,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",50,null],[12,"const_token","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",51,null],[12,"lifetime","","",51,null],[12,"mutability","","",51,null],[12,"elem","","",51,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",52,null],[12,"elem","","",52,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",53,null],[12,"bounds","","",53,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",54,null],[12,"elems","","",54,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",55,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",56,null],[12,"1","","",56,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",58,null],[12,"eq_token","","",58,null],[12,"ty","","",58,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",59,null],[12,"inputs","","`(A, B)`",59,null],[12,"output","","`C`",59,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",60,null],[12,"segments","","",60,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",61,null],[12,"arguments","","",61,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",62,null],[12,"ty","","",62,null],[12,"position","","",62,null],[12,"as_token","","",62,null],[12,"gt_token","","",62,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",63,null],[13,"Inner","","",63,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",64,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,null],[13,"Unit","","Unit struct or unit variant such as `None`.",66,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",67,null],[13,"Crate","","A crate-level visibility: `crate`.",67,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,null],[13,"Inherited","","An inherited visibility, which usually means private.",67,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",68,null],[13,"InPlace","","A placement expression: `place <- value`.",68,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,null],[13,"Call","","A function call expression: `invoke(a, b)`.",68,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,null],[13,"Unary","","A unary operation: `!x`, `*x`.",68,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,null],[13,"Cast","","A cast expression: `foo as f64`.",68,null],[13,"Type","","A type ascription expression: `foo: f64`.",68,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,null],[13,"While","","A while loop: `while expr { ... }`.",68,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,null],[13,"Block","","A blocked scope: `{ ... }`.",68,null],[13,"Assign","","An assignment expression: `a = compute()`.",68,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,null],[13,"Continue","","A `continue`, with an optional label.",68,null],[13,"Return","","A `return`, with an optional value to be returned.",68,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,null],[13,"Group","","An expression contained within invisible delimiters.",68,null],[13,"Try","","A try-expression: `expr?`.",68,null],[13,"Catch","","A catch expression: `do catch { ... }`.",68,null],[13,"Yield","","A yield expression: `yield expr`.",68,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",69,null],[13,"Unnamed","","An unnamed field like `self.0`.",69,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",71,null],[13,"Maybe","","",71,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",72,null],[13,"Lifetime","","",72,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",74,null],[13,"F64","","",74,null],[13,"None","","",74,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",75,null],[13,"I16","","",75,null],[13,"I32","","",75,null],[13,"I64","","",75,null],[13,"I128","","",75,null],[13,"Isize","","",75,null],[13,"U8","","",75,null],[13,"U16","","",75,null],[13,"U32","","",75,null],[13,"U64","","",75,null],[13,"U128","","",75,null],[13,"Usize","","",75,null],[13,"None","","",75,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,null],[13,"Byte","","A byte literal: `b'f'`.",76,null],[13,"Char","","A character literal: `'a'`.",76,null],[13,"Int","","An integer literal: `1` or `1u16`.",76,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,null],[13,"Bool","","A boolean literal: `true` or `false`.",76,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",77,null],[13,"Raw","","A raw string like `r##\"data\"##`.",77,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",78,null],[13,"Brace","","",78,null],[13,"Bracket","","",78,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",80,null],[13,"Sub","","The `-` operator (subtraction)",80,null],[13,"Mul","","The `*` operator (multiplication)",80,null],[13,"Div","","The `/` operator (division)",80,null],[13,"Rem","","The `%` operator (modulus)",80,null],[13,"And","","The `&&` operator (logical and)",80,null],[13,"Or","","The `||` operator (logical or)",80,null],[13,"BitXor","","The `^` operator (bitwise xor)",80,null],[13,"BitAnd","","The `&` operator (bitwise and)",80,null],[13,"BitOr","","The `|` operator (bitwise or)",80,null],[13,"Shl","","The `<<` operator (shift left)",80,null],[13,"Shr","","The `>>` operator (shift right)",80,null],[13,"Eq","","The `==` operator (equality)",80,null],[13,"Lt","","The `<` operator (less than)",80,null],[13,"Le","","The `<=` operator (less than or equal to)",80,null],[13,"Ne","","The `!=` operator (not equal to)",80,null],[13,"Ge","","The `>=` operator (greater than or equal to)",80,null],[13,"Gt","","The `>` operator (greater than)",80,null],[13,"AddEq","","The `+=` operator",80,null],[13,"SubEq","","The `-=` operator",80,null],[13,"MulEq","","The `*=` operator",80,null],[13,"DivEq","","The `/=` operator",80,null],[13,"RemEq","","The `%=` operator",80,null],[13,"BitXorEq","","The `^=` operator",80,null],[13,"BitAndEq","","The `&=` operator",80,null],[13,"BitOrEq","","The `|=` operator",80,null],[13,"ShlEq","","The `<<=` operator",80,null],[13,"ShrEq","","The `>>=` operator",80,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",81,null],[13,"Not","","The `!` operator for logical inversion",81,null],[13,"Neg","","The `-` operator for negation",81,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",82,null],[13,"Wild","","Argument not given a name, matched with `_`.",82,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",83,null],[13,"Type","","A particular type is returned.",83,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,null],[13,"Array","","A fixed size array type: `[T; n]`.",84,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,null],[13,"Never","","The never type: `!`.",84,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,null],[13,"Group","","A type contained within invisible delimiters.",84,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,null],[13,"Macro","","A macro in the type position.",84,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",85,null],[13,"Type","","A type argument.",85,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,null],[13,"Const","","A const expression. Must be inside of a block.",85,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",86,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",87,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",88,null],[3,"Add","","`+`",null,null],[12,"0","","",89,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",90,null],[3,"And","","`&`",null,null],[12,"0","","",91,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",92,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",93,null],[3,"At","","`@`",null,null],[12,"0","","",94,null],[3,"Bang","","`!`",null,null],[12,"0","","",95,null],[3,"Caret","","`^`",null,null],[12,"0","","",96,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",97,null],[3,"Colon","","`:`",null,null],[12,"0","","",98,null],[3,"Colon2","","`::`",null,null],[12,"0","","",99,null],[3,"Comma","","`,`",null,null],[12,"0","","",100,null],[3,"Div","","`/`",null,null],[12,"0","","",101,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",102,null],[3,"Dollar","","`$`",null,null],[12,"0","","",103,null],[3,"Dot","","`.`",null,null],[12,"0","","",104,null],[3,"Dot2","","`..`",null,null],[12,"0","","",105,null],[3,"Dot3","","`...`",null,null],[12,"0","","",106,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",107,null],[3,"Eq","","`=`",null,null],[12,"0","","",108,null],[3,"EqEq","","`==`",null,null],[12,"0","","",109,null],[3,"Ge","","`>=`",null,null],[12,"0","","",110,null],[3,"Gt","","`>`",null,null],[12,"0","","",111,null],[3,"Le","","`<=`",null,null],[12,"0","","",112,null],[3,"Lt","","`<`",null,null],[12,"0","","",113,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",114,null],[3,"Ne","","`!=`",null,null],[12,"0","","",115,null],[3,"Or","","`|`",null,null],[12,"0","","",116,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",117,null],[3,"OrOr","","`||`",null,null],[12,"0","","",118,null],[3,"Pound","","`#`",null,null],[12,"0","","",119,null],[3,"Question","","`?`",null,null],[12,"0","","",120,null],[3,"RArrow","","`->`",null,null],[12,"0","","",121,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",122,null],[3,"Rem","","`%`",null,null],[12,"0","","",123,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",124,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",125,null],[3,"Semi","","`;`",null,null],[12,"0","","",126,null],[3,"Shl","","`<<`",null,null],[12,"0","","",127,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",128,null],[3,"Shr","","`>>`",null,null],[12,"0","","",129,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",130,null],[3,"Star","","`*`",null,null],[12,"0","","",131,null],[3,"Sub","","`-`",null,null],[12,"0","","",132,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",133,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",134,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",135,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",136,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",137,null],[3,"As","","`as`",null,null],[12,"0","","",138,null],[3,"Async","","`async`",null,null],[12,"0","","",139,null],[3,"Auto","","`auto`",null,null],[12,"0","","",140,null],[3,"Box","","`box`",null,null],[12,"0","","",141,null],[3,"Break","","`break`",null,null],[12,"0","","",142,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",143,null],[3,"Catch","","`catch`",null,null],[12,"0","","",144,null],[3,"Const","","`const`",null,null],[12,"0","","",145,null],[3,"Continue","","`continue`",null,null],[12,"0","","",146,null],[3,"Crate","","`crate`",null,null],[12,"0","","",147,null],[3,"Default","","`default`",null,null],[12,"0","","",148,null],[3,"Do","","`do`",null,null],[12,"0","","",149,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",150,null],[3,"Else","","`else`",null,null],[12,"0","","",151,null],[3,"Enum","","`enum`",null,null],[12,"0","","",152,null],[3,"Extern","","`extern`",null,null],[12,"0","","",153,null],[3,"Fn","","`fn`",null,null],[12,"0","","",154,null],[3,"For","","`for`",null,null],[12,"0","","",155,null],[3,"If","","`if`",null,null],[12,"0","","",156,null],[3,"Impl","","`impl`",null,null],[12,"0","","",157,null],[3,"In","","`in`",null,null],[12,"0","","",158,null],[3,"Let","","`let`",null,null],[12,"0","","",159,null],[3,"Loop","","`loop`",null,null],[12,"0","","",160,null],[3,"Macro","","`macro`",null,null],[12,"0","","",161,null],[3,"Match","","`match`",null,null],[12,"0","","",162,null],[3,"Mod","","`mod`",null,null],[12,"0","","",163,null],[3,"Move","","`move`",null,null],[12,"0","","",164,null],[3,"Mut","","`mut`",null,null],[12,"0","","",165,null],[3,"Pub","","`pub`",null,null],[12,"0","","",166,null],[3,"Ref","","`ref`",null,null],[12,"0","","",167,null],[3,"Return","","`return`",null,null],[12,"0","","",168,null],[3,"Self_","","`self`",null,null],[12,"0","","",169,null],[3,"Static","","`static`",null,null],[12,"0","","",170,null],[3,"Struct","","`struct`",null,null],[12,"0","","",171,null],[3,"Super","","`super`",null,null],[12,"0","","",172,null],[3,"Trait","","`trait`",null,null],[12,"0","","",173,null],[3,"Type","","`type`",null,null],[12,"0","","",174,null],[3,"Union","","`union`",null,null],[12,"0","","",175,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",176,null],[3,"Use","","`use`",null,null],[12,"0","","",177,null],[3,"Where","","`where`",null,null],[12,"0","","",178,null],[3,"While","","`while`",null,null],[12,"0","","",179,null],[3,"Yield","","`yield`",null,null],[12,"0","","",180,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"new","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",87,{"o":{"n":"self"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"underscore"}],"o":{"n":"bool"}}],[11,"hash","","",87,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",87,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",87,{"i":[{"n":"cursor"}],"o":{"g":["underscore"],"n":"presult"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"new","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",88,{"o":{"n":"self"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"apostrophe"}],"o":{"n":"bool"}}],[11,"hash","","",88,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",88,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",88,{"i":[{"n":"cursor"}],"o":{"g":["apostrophe"],"n":"presult"}}],[11,"description","","",88,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"new","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",89,{"o":{"n":"self"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"add"}],"o":{"n":"bool"}}],[11,"hash","","",89,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"new","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",90,{"o":{"n":"self"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"addeq"}],"o":{"n":"bool"}}],[11,"hash","","",90,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"new","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",91,{"o":{"n":"self"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"and"}],"o":{"n":"bool"}}],[11,"hash","","",91,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"new","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",92,{"o":{"n":"self"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"andand"}],"o":{"n":"bool"}}],[11,"hash","","",92,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"new","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",93,{"o":{"n":"self"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"andeq"}],"o":{"n":"bool"}}],[11,"hash","","",93,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"new","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",94,{"o":{"n":"self"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"at"}],"o":{"n":"bool"}}],[11,"hash","","",94,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"new","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",95,{"o":{"n":"self"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"bang"}],"o":{"n":"bool"}}],[11,"hash","","",95,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"new","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",96,{"o":{"n":"self"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"caret"}],"o":{"n":"bool"}}],[11,"hash","","",96,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"new","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",97,{"o":{"n":"self"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"careteq"}],"o":{"n":"bool"}}],[11,"hash","","",97,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"new","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",98,{"o":{"n":"self"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"colon"}],"o":{"n":"bool"}}],[11,"hash","","",98,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"new","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",99,{"o":{"n":"self"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"colon2"}],"o":{"n":"bool"}}],[11,"hash","","",99,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"new","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",100,{"o":{"n":"self"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"comma"}],"o":{"n":"bool"}}],[11,"hash","","",100,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"new","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",101,{"o":{"n":"self"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"div"}],"o":{"n":"bool"}}],[11,"hash","","",101,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"new","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",102,{"o":{"n":"self"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"diveq"}],"o":{"n":"bool"}}],[11,"hash","","",102,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"new","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",103,{"o":{"n":"self"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",103,{"i":[{"n":"self"},{"n":"dollar"}],"o":{"n":"bool"}}],[11,"hash","","",103,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"new","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",104,{"o":{"n":"self"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"dot"}],"o":{"n":"bool"}}],[11,"hash","","",104,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"new","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",105,{"o":{"n":"self"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"dot2"}],"o":{"n":"bool"}}],[11,"hash","","",105,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"new","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",106,{"o":{"n":"self"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"dot3"}],"o":{"n":"bool"}}],[11,"hash","","",106,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"new","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",107,{"o":{"n":"self"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"dotdoteq"}],"o":{"n":"bool"}}],[11,"hash","","",107,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"new","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",108,{"o":{"n":"self"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"eq"}],"o":{"n":"bool"}}],[11,"hash","","",108,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"new","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",109,{"o":{"n":"self"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"eqeq"}],"o":{"n":"bool"}}],[11,"hash","","",109,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"new","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",110,{"o":{"n":"self"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"ge"}],"o":{"n":"bool"}}],[11,"hash","","",110,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"new","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",111,{"o":{"n":"self"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"gt"}],"o":{"n":"bool"}}],[11,"hash","","",111,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"new","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",112,{"o":{"n":"self"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"le"}],"o":{"n":"bool"}}],[11,"hash","","",112,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"new","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",113,{"o":{"n":"self"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"lt"}],"o":{"n":"bool"}}],[11,"hash","","",113,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"new","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",114,{"o":{"n":"self"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"muleq"}],"o":{"n":"bool"}}],[11,"hash","","",114,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"new","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",115,{"o":{"n":"self"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"ne"}],"o":{"n":"bool"}}],[11,"hash","","",115,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"new","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",116,{"o":{"n":"self"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"or"}],"o":{"n":"bool"}}],[11,"hash","","",116,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"new","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",117,{"o":{"n":"self"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"oreq"}],"o":{"n":"bool"}}],[11,"hash","","",117,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"new","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",118,{"o":{"n":"self"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"oror"}],"o":{"n":"bool"}}],[11,"hash","","",118,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"new","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",119,{"o":{"n":"self"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"pound"}],"o":{"n":"bool"}}],[11,"hash","","",119,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"new","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",120,{"o":{"n":"self"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"question"}],"o":{"n":"bool"}}],[11,"hash","","",120,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"new","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",121,{"o":{"n":"self"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"rarrow"}],"o":{"n":"bool"}}],[11,"hash","","",121,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"new","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",122,{"o":{"n":"self"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"larrow"}],"o":{"n":"bool"}}],[11,"hash","","",122,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"new","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",123,{"o":{"n":"self"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"rem"}],"o":{"n":"bool"}}],[11,"hash","","",123,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"new","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",124,{"o":{"n":"self"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"remeq"}],"o":{"n":"bool"}}],[11,"hash","","",124,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"new","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",125,{"o":{"n":"self"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"fatarrow"}],"o":{"n":"bool"}}],[11,"hash","","",125,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"new","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",126,{"o":{"n":"self"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"semi"}],"o":{"n":"bool"}}],[11,"hash","","",126,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"new","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",127,{"o":{"n":"self"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"shl"}],"o":{"n":"bool"}}],[11,"hash","","",127,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"new","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",128,{"o":{"n":"self"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"shleq"}],"o":{"n":"bool"}}],[11,"hash","","",128,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"new","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",129,{"o":{"n":"self"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"shr"}],"o":{"n":"bool"}}],[11,"hash","","",129,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"new","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",130,{"o":{"n":"self"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"shreq"}],"o":{"n":"bool"}}],[11,"hash","","",130,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"new","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",131,{"o":{"n":"self"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"star"}],"o":{"n":"bool"}}],[11,"hash","","",131,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"new","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",132,{"o":{"n":"self"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"sub"}],"o":{"n":"bool"}}],[11,"hash","","",132,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"new","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",133,{"o":{"n":"self"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"subeq"}],"o":{"n":"bool"}}],[11,"hash","","",133,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",89,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",89,{"i":[{"n":"cursor"}],"o":{"g":["add"],"n":"presult"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",90,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",90,{"i":[{"n":"cursor"}],"o":{"g":["addeq"],"n":"presult"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",91,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",91,{"i":[{"n":"cursor"}],"o":{"g":["and"],"n":"presult"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",92,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"g":["andand"],"n":"presult"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",93,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",93,{"i":[{"n":"cursor"}],"o":{"g":["andeq"],"n":"presult"}}],[11,"description","","",93,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",94,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"g":["at"],"n":"presult"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",95,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"g":["bang"],"n":"presult"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",96,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"g":["caret"],"n":"presult"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",97,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"g":["careteq"],"n":"presult"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",98,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",98,{"i":[{"n":"cursor"}],"o":{"g":["colon"],"n":"presult"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",99,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",99,{"i":[{"n":"cursor"}],"o":{"g":["colon2"],"n":"presult"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",100,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"g":["comma"],"n":"presult"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",101,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"g":["div"],"n":"presult"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",102,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"g":["diveq"],"n":"presult"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",103,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",103,{"i":[{"n":"cursor"}],"o":{"g":["dollar"],"n":"presult"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",104,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"g":["dot"],"n":"presult"}}],[11,"description","","",104,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",105,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",105,{"i":[{"n":"cursor"}],"o":{"g":["dot2"],"n":"presult"}}],[11,"description","","",105,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",106,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",106,{"i":[{"n":"cursor"}],"o":{"g":["dot3"],"n":"presult"}}],[11,"description","","",106,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",107,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",107,{"i":[{"n":"cursor"}],"o":{"g":["dotdoteq"],"n":"presult"}}],[11,"description","","",107,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",108,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",108,{"i":[{"n":"cursor"}],"o":{"g":["eq"],"n":"presult"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",109,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",109,{"i":[{"n":"cursor"}],"o":{"g":["eqeq"],"n":"presult"}}],[11,"description","","",109,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",110,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",110,{"i":[{"n":"cursor"}],"o":{"g":["ge"],"n":"presult"}}],[11,"description","","",110,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",111,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"g":["gt"],"n":"presult"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",112,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",112,{"i":[{"n":"cursor"}],"o":{"g":["le"],"n":"presult"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",113,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"g":["lt"],"n":"presult"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",114,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"g":["muleq"],"n":"presult"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",115,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",115,{"i":[{"n":"cursor"}],"o":{"g":["ne"],"n":"presult"}}],[11,"description","","",115,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",116,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",116,{"i":[{"n":"cursor"}],"o":{"g":["or"],"n":"presult"}}],[11,"description","","",116,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",117,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"g":["oreq"],"n":"presult"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",118,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"g":["oror"],"n":"presult"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",119,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",119,{"i":[{"n":"cursor"}],"o":{"g":["pound"],"n":"presult"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",120,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"g":["question"],"n":"presult"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",121,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"g":["rarrow"],"n":"presult"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",122,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"g":["larrow"],"n":"presult"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",123,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"g":["rem"],"n":"presult"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",124,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",124,{"i":[{"n":"cursor"}],"o":{"g":["remeq"],"n":"presult"}}],[11,"description","","",124,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",125,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",125,{"i":[{"n":"cursor"}],"o":{"g":["fatarrow"],"n":"presult"}}],[11,"description","","",125,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",126,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",126,{"i":[{"n":"cursor"}],"o":{"g":["semi"],"n":"presult"}}],[11,"description","","",126,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",127,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",127,{"i":[{"n":"cursor"}],"o":{"g":["shl"],"n":"presult"}}],[11,"description","","",127,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",128,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",128,{"i":[{"n":"cursor"}],"o":{"g":["shleq"],"n":"presult"}}],[11,"description","","",128,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",129,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"g":["shr"],"n":"presult"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",130,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"g":["shreq"],"n":"presult"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",131,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",131,{"i":[{"n":"cursor"}],"o":{"g":["star"],"n":"presult"}}],[11,"description","","",131,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",132,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",132,{"i":[{"n":"cursor"}],"o":{"g":["sub"],"n":"presult"}}],[11,"description","","",132,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",133,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",133,{"i":[{"n":"cursor"}],"o":{"g":["subeq"],"n":"presult"}}],[11,"description","","",133,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"default","","",134,{"o":{"n":"self"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"brace"}],"o":{"n":"bool"}}],[11,"hash","","",134,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",134,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",134,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",134,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"default","","",135,{"o":{"n":"self"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"bracket"}],"o":{"n":"bool"}}],[11,"hash","","",135,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",135,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",135,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",135,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"default","","",136,{"o":{"n":"self"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"paren"}],"o":{"n":"bool"}}],[11,"hash","","",136,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",136,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",136,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",136,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"default","","",137,{"o":{"n":"self"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"hash","","",137,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",137,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",137,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",137,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"default","","",138,{"o":{"n":"self"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"as"}],"o":{"n":"bool"}}],[11,"hash","","",138,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",138,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",138,{"i":[{"n":"cursor"}],"o":{"g":["as"],"n":"presult"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",138,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"default","","",139,{"o":{"n":"self"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"hash","","",139,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",139,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",139,{"i":[{"n":"cursor"}],"o":{"g":["async"],"n":"presult"}}],[11,"description","","",139,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",139,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"default","","",140,{"o":{"n":"self"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"auto"}],"o":{"n":"bool"}}],[11,"hash","","",140,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",140,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"g":["auto"],"n":"presult"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",140,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"default","","",141,{"o":{"n":"self"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"bool"}}],[11,"hash","","",141,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",141,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",141,{"i":[{"n":"cursor"}],"o":{"g":["box"],"n":"presult"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",141,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"default","","",142,{"o":{"n":"self"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"break"}],"o":{"n":"bool"}}],[11,"hash","","",142,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",142,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",142,{"i":[{"n":"cursor"}],"o":{"g":["break"],"n":"presult"}}],[11,"description","","",142,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",142,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"default","","",143,{"o":{"n":"self"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"capself"}],"o":{"n":"bool"}}],[11,"hash","","",143,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",143,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",143,{"i":[{"n":"cursor"}],"o":{"g":["capself"],"n":"presult"}}],[11,"description","","",143,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",143,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"default","","",144,{"o":{"n":"self"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"catch"}],"o":{"n":"bool"}}],[11,"hash","","",144,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",144,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",144,{"i":[{"n":"cursor"}],"o":{"g":["catch"],"n":"presult"}}],[11,"description","","",144,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",144,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"default","","",145,{"o":{"n":"self"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"const"}],"o":{"n":"bool"}}],[11,"hash","","",145,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",145,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"g":["const"],"n":"presult"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",145,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"default","","",146,{"o":{"n":"self"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"continue"}],"o":{"n":"bool"}}],[11,"hash","","",146,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",146,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",146,{"i":[{"n":"cursor"}],"o":{"g":["continue"],"n":"presult"}}],[11,"description","","",146,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",146,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"default","","",147,{"o":{"n":"self"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"crate"}],"o":{"n":"bool"}}],[11,"hash","","",147,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",147,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",147,{"i":[{"n":"cursor"}],"o":{"g":["crate"],"n":"presult"}}],[11,"description","","",147,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",147,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"default","","",148,{"o":{"n":"self"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"default"}],"o":{"n":"bool"}}],[11,"hash","","",148,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",148,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"g":["default"],"n":"presult"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",148,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"default","","",149,{"o":{"n":"self"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"do"}],"o":{"n":"bool"}}],[11,"hash","","",149,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",149,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",149,{"i":[{"n":"cursor"}],"o":{"g":["do"],"n":"presult"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",149,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"default","","",150,{"o":{"n":"self"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"dyn"}],"o":{"n":"bool"}}],[11,"hash","","",150,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",150,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",150,{"i":[{"n":"cursor"}],"o":{"g":["dyn"],"n":"presult"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",150,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"default","","",151,{"o":{"n":"self"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"else"}],"o":{"n":"bool"}}],[11,"hash","","",151,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",151,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"g":["else"],"n":"presult"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",151,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"default","","",152,{"o":{"n":"self"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"enum"}],"o":{"n":"bool"}}],[11,"hash","","",152,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",152,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"g":["enum"],"n":"presult"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",152,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"default","","",153,{"o":{"n":"self"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"extern"}],"o":{"n":"bool"}}],[11,"hash","","",153,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",153,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",153,{"i":[{"n":"cursor"}],"o":{"g":["extern"],"n":"presult"}}],[11,"description","","",153,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",153,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"default","","",154,{"o":{"n":"self"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"fn"}],"o":{"n":"bool"}}],[11,"hash","","",154,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",154,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",154,{"i":[{"n":"cursor"}],"o":{"g":["fn"],"n":"presult"}}],[11,"description","","",154,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",154,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"default","","",155,{"o":{"n":"self"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"for"}],"o":{"n":"bool"}}],[11,"hash","","",155,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",155,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",155,{"i":[{"n":"cursor"}],"o":{"g":["for"],"n":"presult"}}],[11,"description","","",155,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",155,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"default","","",156,{"o":{"n":"self"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"if"}],"o":{"n":"bool"}}],[11,"hash","","",156,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",156,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",156,{"i":[{"n":"cursor"}],"o":{"g":["if"],"n":"presult"}}],[11,"description","","",156,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",156,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"default","","",157,{"o":{"n":"self"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"impl"}],"o":{"n":"bool"}}],[11,"hash","","",157,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",157,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",157,{"i":[{"n":"cursor"}],"o":{"g":["impl"],"n":"presult"}}],[11,"description","","",157,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",157,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"default","","",158,{"o":{"n":"self"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"in"}],"o":{"n":"bool"}}],[11,"hash","","",158,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",158,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"g":["in"],"n":"presult"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",158,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"default","","",159,{"o":{"n":"self"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"let"}],"o":{"n":"bool"}}],[11,"hash","","",159,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",159,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",159,{"i":[{"n":"cursor"}],"o":{"g":["let"],"n":"presult"}}],[11,"description","","",159,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",159,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"default","","",160,{"o":{"n":"self"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"hash","","",160,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",160,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",160,{"i":[{"n":"cursor"}],"o":{"g":["loop"],"n":"presult"}}],[11,"description","","",160,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",160,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"default","","",161,{"o":{"n":"self"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"bool"}}],[11,"hash","","",161,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",161,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",161,{"i":[{"n":"cursor"}],"o":{"g":["macro"],"n":"presult"}}],[11,"description","","",161,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",161,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"default","","",162,{"o":{"n":"self"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"hash","","",162,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",162,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",162,{"i":[{"n":"cursor"}],"o":{"g":["match"],"n":"presult"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",162,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"default","","",163,{"o":{"n":"self"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"mod"}],"o":{"n":"bool"}}],[11,"hash","","",163,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",163,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"g":["mod"],"n":"presult"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",163,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"default","","",164,{"o":{"n":"self"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"move"}],"o":{"n":"bool"}}],[11,"hash","","",164,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",164,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",164,{"i":[{"n":"cursor"}],"o":{"g":["move"],"n":"presult"}}],[11,"description","","",164,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",164,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"default","","",165,{"o":{"n":"self"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"mut"}],"o":{"n":"bool"}}],[11,"hash","","",165,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",165,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"g":["mut"],"n":"presult"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",165,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"default","","",166,{"o":{"n":"self"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",166,{"i":[{"n":"self"},{"n":"pub"}],"o":{"n":"bool"}}],[11,"hash","","",166,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",166,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",166,{"i":[{"n":"cursor"}],"o":{"g":["pub"],"n":"presult"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",166,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"default","","",167,{"o":{"n":"self"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"ref"}],"o":{"n":"bool"}}],[11,"hash","","",167,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",167,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",167,{"i":[{"n":"cursor"}],"o":{"g":["ref"],"n":"presult"}}],[11,"description","","",167,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",167,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"default","","",168,{"o":{"n":"self"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",168,{"i":[{"n":"self"},{"n":"return"}],"o":{"n":"bool"}}],[11,"hash","","",168,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",168,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"g":["return"],"n":"presult"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",168,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"default","","",169,{"o":{"n":"self"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",169,{"i":[{"n":"self"},{"n":"self_"}],"o":{"n":"bool"}}],[11,"hash","","",169,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",169,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"g":["self_"],"n":"presult"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",169,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"default","","",170,{"o":{"n":"self"}}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",170,{"i":[{"n":"self"},{"n":"static"}],"o":{"n":"bool"}}],[11,"hash","","",170,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",170,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"g":["static"],"n":"presult"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",170,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"default","","",171,{"o":{"n":"self"}}],[11,"fmt","","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",171,{"i":[{"n":"self"},{"n":"struct"}],"o":{"n":"bool"}}],[11,"hash","","",171,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",171,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",171,{"i":[{"n":"cursor"}],"o":{"g":["struct"],"n":"presult"}}],[11,"description","","",171,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",171,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"default","","",172,{"o":{"n":"self"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",172,{"i":[{"n":"self"},{"n":"super"}],"o":{"n":"bool"}}],[11,"hash","","",172,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",172,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"g":["super"],"n":"presult"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",172,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"default","","",173,{"o":{"n":"self"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",173,{"i":[{"n":"self"},{"n":"trait"}],"o":{"n":"bool"}}],[11,"hash","","",173,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",173,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",173,{"i":[{"n":"cursor"}],"o":{"g":["trait"],"n":"presult"}}],[11,"description","","",173,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",173,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"default","","",174,{"o":{"n":"self"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",174,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"hash","","",174,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",174,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"g":["type"],"n":"presult"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",174,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"default","","",175,{"o":{"n":"self"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"union"}],"o":{"n":"bool"}}],[11,"hash","","",175,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",175,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",175,{"i":[{"n":"cursor"}],"o":{"g":["union"],"n":"presult"}}],[11,"description","","",175,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",175,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"default","","",176,{"o":{"n":"self"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",176,{"i":[{"n":"self"},{"n":"unsafe"}],"o":{"n":"bool"}}],[11,"hash","","",176,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",176,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",176,{"i":[{"n":"cursor"}],"o":{"g":["unsafe"],"n":"presult"}}],[11,"description","","",176,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",176,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"default","","",177,{"o":{"n":"self"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",177,{"i":[{"n":"self"},{"n":"use"}],"o":{"n":"bool"}}],[11,"hash","","",177,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",177,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",177,{"i":[{"n":"cursor"}],"o":{"g":["use"],"n":"presult"}}],[11,"description","","",177,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",177,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"default","","",178,{"o":{"n":"self"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",178,{"i":[{"n":"self"},{"n":"where"}],"o":{"n":"bool"}}],[11,"hash","","",178,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",178,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",178,{"i":[{"n":"cursor"}],"o":{"g":["where"],"n":"presult"}}],[11,"description","","",178,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",178,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"default","","",179,{"o":{"n":"self"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"while"}],"o":{"n":"bool"}}],[11,"hash","","",179,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",179,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",179,{"i":[{"n":"cursor"}],"o":{"g":["while"],"n":"presult"}}],[11,"description","","",179,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",179,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"default","","",180,{"o":{"n":"self"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"yield"}],"o":{"n":"bool"}}],[11,"hash","","",180,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",180,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",180,{"i":[{"n":"cursor"}],"o":{"g":["yield"],"n":"presult"}}],[11,"description","","",180,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",180,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","syn","",181,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"extern"}],"o":{"n":"ident"}}],[11,"parse_inner","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_outer","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"from","","",64,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"from","","",64,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"from","","",64,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"to_tokens","","",64,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"name","","Returns the identifier that begins this structured meta item.",64,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"from","","",65,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",65,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"to_tokens","","",65,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",6,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",6,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",5,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",5,{"o":{"g":["str"],"n":"option"}}],[11,"parse_named","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_unnamed","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",67,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"from","","",66,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"from","","",66,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"to_tokens","","",66,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"itermut"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"from","","",67,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"from","","",67,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"from","","",67,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"to_tokens","","",67,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",68,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",68,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",15,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",15,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",16,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",16,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",17,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",17,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",69,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",69,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",20,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",20,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",12,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",13,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",69,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",14,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"fmt","","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",182,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"ne","","",182,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"hash","","",182,null],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"from","","",68,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"ne","","",183,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"hash","","",183,null],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"from","","",68,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"fmt","","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",184,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"ne","","",184,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"from","","",68,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"from","","",68,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",185,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"ne","","",185,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"hash","","",185,null],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"from","","",68,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",186,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"ne","","",186,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"hash","","",186,null],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"from","","",68,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"from","","",68,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"from","","",68,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"from","","",68,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"from","","",68,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"fmt","","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",187,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"hash","","",187,null],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"from","","",68,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"fmt","","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",188,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"ne","","",188,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"hash","","",188,null],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"from","","",68,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"ne","","",189,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"hash","","",189,null],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"from","","",68,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"fmt","","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"ne","","",190,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"hash","","",190,null],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"from","","",68,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"fmt","","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",191,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"ne","","",191,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"hash","","",191,null],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"from","","",68,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",192,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"ne","","",192,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"hash","","",192,null],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"from","","",68,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"fmt","","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",193,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"ne","","",193,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"hash","","",193,null],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"from","","",68,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",194,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"ne","","",194,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"hash","","",194,null],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"from","","",68,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",195,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"ne","","",195,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"hash","","",195,null],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"from","","",68,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"fmt","","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",196,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"ne","","",196,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"hash","","",196,null],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"from","","",68,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",197,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"ne","","",197,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"hash","","",197,null],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"from","","",68,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"fmt","","",198,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",198,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"ne","","",198,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"hash","","",198,null],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"from","","",68,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",199,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"ne","","",199,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"hash","","",199,null],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"from","","",68,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"from","","",68,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"from","","",68,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"fmt","","",200,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",200,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"ne","","",200,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"hash","","",200,null],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"from","","",68,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"from","","",68,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"fmt","","",201,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",201,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"ne","","",201,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"hash","","",201,null],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"from","","",68,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",202,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"ne","","",202,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"hash","","",202,null],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"from","","",68,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",203,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"ne","","",203,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"hash","","",203,null],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"from","","",68,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",204,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"ne","","",204,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"hash","","",204,null],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"from","","",68,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"fmt","","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",205,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"ne","","",205,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"hash","","",205,null],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"from","","",68,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"fmt","","",206,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",206,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"ne","","",206,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"hash","","",206,null],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"from","","",68,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"fmt","","",207,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",207,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"ne","","",207,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"hash","","",207,null],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"from","","",68,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"from","","",68,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"fmt","","",208,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",208,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"ne","","",208,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"hash","","",208,null],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"from","","",68,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"fmt","","",209,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",209,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"ne","","",209,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"hash","","",209,null],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"from","","",68,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"fmt","","",210,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",210,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"ne","","",210,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"hash","","",210,null],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"from","","",68,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"fmt","","",211,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",211,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"ne","","",211,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"hash","","",211,null],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"from","","",68,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"from","","",68,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"to_tokens","","",68,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",19,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"hash","","",69,null],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"from","","",20,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",20,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",23,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",24,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",24,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",21,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",28,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",28,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",71,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",22,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",22,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",30,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",73,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",73,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",212,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",213,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",214,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",21,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",28,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",71,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",26,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"default","","",23,{"o":{"n":"generics"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"from","","",70,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"from","","",70,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"from","","",70,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"to_tokens","","",70,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"fmt","","",212,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",212,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"ne","","",212,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"hash","","",212,null],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"fmt","","",213,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",213,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"ne","","",213,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"hash","","",213,null],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"fmt","","",214,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",214,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"ne","","",214,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"hash","","",214,null],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",213,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"default","","",21,{"o":{"n":"boundlifetimes"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"new","","",24,{"i":[{"n":"lifetime"}],"o":{"n":"self"}}],[11,"from","","",29,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"from","","",72,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",72,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"to_tokens","","",72,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"from","","",73,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"from","","",73,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"from","","",73,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"to_tokens","","",73,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",31,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"new","","",31,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"hash","","",31,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",76,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",76,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",216,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",216,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",217,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",217,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",218,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",218,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",220,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",220,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",32,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",32,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",215,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",216,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",217,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",218,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",219,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",220,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,{"i":[{"n":"literal"}],"o":{"n":"self"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"fmt","","",215,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"from","","",76,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"from","","",76,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"fmt","","",217,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"from","","",76,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"from","","",76,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"fmt","","",219,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"from","","",76,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"fmt","","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",220,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"from","","",76,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"from","","",76,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"from","","",76,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"to_tokens","","",76,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","",215,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",215,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",215,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",215,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",215,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",216,null],[11,"value","","",216,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",216,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",216,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",217,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",217,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",217,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",217,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",218,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",218,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",218,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",218,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",219,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",219,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",219,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",219,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",219,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",220,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",220,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",220,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",220,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",220,{"i":[{"n":"self"},{"n":"span"}]}],[11,"span","","",33,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",33,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",215,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",215,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",216,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",216,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",217,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",217,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",218,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",218,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",219,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",219,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",220,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",220,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",32,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",33,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"intsuffix"}],"o":{"n":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"floatsuffix"}],"o":{"n":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"parse","","",34,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",34,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",34,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",34,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",38,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",38,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"from","","",79,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"from","","",79,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"from","","",79,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"parse_binop","","",80,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",81,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",81,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",80,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",81,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"parse","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",84,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",41,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",41,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",50,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",51,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",42,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",45,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",54,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",54,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",46,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",46,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",49,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",83,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",44,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",44,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",43,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",43,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",82,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",39,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",39,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",42,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",49,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",83,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",40,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",82,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"hash","","",84,null],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"from","","",84,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"from","","",84,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"hash","","",50,null],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"from","","",84,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"from","","",84,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"from","","",84,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"from","","",84,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"from","","",84,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"from","","",84,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"from","","",84,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"from","","",84,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"from","","",84,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"from","","",84,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"from","","",84,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"hash","","",46,null],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"from","","",84,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"from","","",84,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"to_tokens","","",84,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",55,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"parse","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",60,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",85,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",57,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",57,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",59,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",61,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",61,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",58,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",58,{"o":{"g":["str"],"n":"option"}}],[11,"parse_mod_style","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",60,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",61,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",86,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",85,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",58,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",59,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"global","","",60,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"from","","",60,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"from","","",61,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"hash","","",86,null],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"default","","",86,{"o":{"n":"self"}}],[11,"is_empty","","",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"hash","","",85,null],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",221,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","","",222,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"eq","","",222,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",222,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",222,{"o":{"n":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",222,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",222,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",222,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",222,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",223,null],[13,"End","","",223,null],[11,"to_tokens","","",224,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",223,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",224,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"ne","","",224,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"hash","","",224,null],[11,"clone","","",224,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",224,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",224,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",224,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",224,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",224,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",224,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",224,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",224,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",224,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",224,{"i":[{"n":"self"},{"n":"p"}]}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",224,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",224,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",224,{"i":[{"n":"self"},{"n":"t"}]}],[11,"insert","","Inserts an element at position `index`.",224,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_iter","","",224,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",224,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",224,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",224,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",224,null],[11,"default","","",224,{"o":{"n":"self"}}],[11,"next","","",225,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",225,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",226,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",226,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",227,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",227,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",228,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",228,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",229,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",229,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",230,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",230,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",223,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",223,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",223,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",223,null],[11,"index","","",224,null],[11,"index_mut","","",224,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",231,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_any","syn","",181,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",232,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","A short name of the type being parsed.",232,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",233,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",233,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",233,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",233,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","syn","",181,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",181,{"o":{"g":["str"],"n":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",234,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"i":[{"n":"v"},{"n":"abi"}]}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}]}],[5,"visit_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}]}],[5,"visit_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}]}],[5,"visit_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}]}],[5,"visit_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}]}],[5,"visit_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}]}],[5,"visit_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}]}],[5,"visit_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}]}],[5,"visit_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}]}],[5,"visit_data","","",null,{"i":[{"n":"v"},{"n":"data"}]}],[5,"visit_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}]}],[5,"visit_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}]}],[5,"visit_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}]}],[5,"visit_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"visit_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}]}],[5,"visit_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}]}],[5,"visit_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}]}],[5,"visit_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}]}],[5,"visit_expr_field","","",null,{"i":[{"n":"v"},{"n":"exprfield"}]}],[5,"visit_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}]}],[5,"visit_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}]}],[5,"visit_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}]}],[5,"visit_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}]}],[5,"visit_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}]}],[5,"visit_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}]}],[5,"visit_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"visit_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}]}],[5,"visit_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}]}],[5,"visit_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}]}],[5,"visit_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}]}],[5,"visit_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}]}],[5,"visit_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"visit_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}]}],[5,"visit_index","","",null,{"i":[{"n":"v"},{"n":"index"}]}],[5,"visit_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}]}],[5,"visit_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"visit_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}]}],[5,"visit_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}]}],[5,"visit_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}]}],[5,"visit_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}]}],[5,"visit_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}]}],[5,"visit_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}]}],[5,"visit_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}]}],[5,"visit_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}]}],[5,"visit_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}]}],[5,"visit_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}]}],[5,"visit_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}]}],[5,"visit_member","","",null,{"i":[{"n":"v"},{"n":"member"}]}],[5,"visit_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}]}],[5,"visit_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}]}],[5,"visit_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}]}],[5,"visit_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}]}],[5,"visit_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}]}],[5,"visit_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"visit_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}]}],[5,"visit_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"visit_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}]}],[5,"visit_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}]}],[5,"visit_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}]}],[5,"visit_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}]}],[5,"visit_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}]}],[5,"visit_span","","",null,{"i":[{"n":"v"},{"n":"span"}]}],[5,"visit_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}]}],[5,"visit_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}]}],[5,"visit_type","","",null,{"i":[{"n":"v"},{"n":"type"}]}],[5,"visit_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}]}],[5,"visit_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}]}],[5,"visit_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}]}],[5,"visit_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}]}],[5,"visit_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}]}],[5,"visit_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}]}],[5,"visit_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}]}],[5,"visit_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}]}],[5,"visit_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}]}],[5,"visit_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}]}],[5,"visit_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}]}],[5,"visit_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}]}],[5,"visit_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}]}],[5,"visit_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}]}],[5,"visit_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}]}],[5,"visit_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}]}],[5,"visit_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}]}],[5,"visit_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}]}],[5,"visit_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}]}],[5,"visit_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}]}],[5,"visit_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}]}],[5,"visit_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}]}],[5,"visit_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}]}],[5,"visit_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}]}],[5,"visit_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}]}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",235,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",235,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",235,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",235,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",235,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",235,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",235,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",235,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",235,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",235,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",235,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",235,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",235,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",235,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",235,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",235,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",235,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",235,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_field","","",235,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_index","","",235,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",235,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",235,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",235,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",235,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",235,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",235,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",235,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",235,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",235,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",235,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",235,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",235,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",235,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",235,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",235,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",235,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",235,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",235,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",235,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",235,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",235,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",235,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",235,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",235,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",235,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",235,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",235,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",235,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",235,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",235,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",235,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",235,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",235,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",235,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",235,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",235,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",235,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",235,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",235,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",235,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",235,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",235,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",235,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",235,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",235,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",235,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",235,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",235,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",235,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",235,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",235,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",235,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",235,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",235,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",235,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",235,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",235,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",235,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",235,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",235,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",235,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",235,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",235,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",235,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",235,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",235,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",235,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",235,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",235,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[11,"fmt","syn::synom","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",236,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",181,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",181,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",181,null],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"partial_cmp","","",181,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",181,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",181,null],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"to_tokens","","",181,null],[11,"visit_abi","syn::visit","",235,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",235,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",235,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",235,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",235,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",235,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",235,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",235,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",235,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",235,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",235,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",235,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",235,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",235,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",235,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",235,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",235,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",235,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_field","","",235,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_index","","",235,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",235,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",235,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",235,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",235,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",235,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",235,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",235,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",235,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",235,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",235,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",235,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",235,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",235,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",235,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",235,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",235,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",235,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",235,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",235,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",235,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",235,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",235,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",235,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",235,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",235,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",235,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",235,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",235,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",235,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",235,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",235,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",235,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",235,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",235,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",235,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",235,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",235,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",235,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",235,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",235,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",235,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",235,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",235,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",235,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",235,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",235,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",235,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",235,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",235,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",235,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",235,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",235,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",235,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",235,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",235,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",235,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",235,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",235,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",235,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",235,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",235,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",235,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",235,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",235,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",235,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",235,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",235,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",235,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",235,{"i":[{"n":"self"},{"n":"wherepredicate"}]}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
